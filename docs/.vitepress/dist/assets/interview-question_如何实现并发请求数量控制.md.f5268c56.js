import{_ as s,C as n,o as a,c as l,H as p,w as o,k as e,a as c,Q as r}from"./chunks/framework.e34e23c1.js";const t=JSON.parse('{"title":"关于前端：如何实现并发请求数量控制？","description":"","frontmatter":{"createTime":"2022/11/13","tags":"场景题,并发"},"headers":[],"relativePath":"interview-question/如何实现并发请求数量控制.md","filePath":"全部文档/前端面试题/场景题/如何实现并发请求数量控制.md","lastUpdated":1696860910000}'),E={name:"interview-question/如何实现并发请求数量控制.md"},y=e("h1",{id:"关于前端-如何实现并发请求数量控制",tabindex:"-1"},[c("关于前端：如何实现并发请求数量控制？ "),e("a",{class:"header-anchor",href:"#关于前端-如何实现并发请求数量控制","aria-label":'Permalink to "关于前端：如何实现并发请求数量控制？"'},"​")],-1),i=r('<h2 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h2><p>假设有这么一个场景：现在有<code>20</code>个异步请求需要发送，但是由于某些原因，要求我们必须将同一时刻的并发请求数量控制在<code>3</code>个以内，并且还要尽可能快速的拿到响应结果。其实这个场景在一些大厂的面试题中也有过提及，如下：</p><p>实现一个并发请求函数concurrencyRequest(urls, maxNum)，要求如下：</p><ul><li>要求最大并发数 maxNum</li><li>每当有一个请求返回，就留下一个空位，可以增加新的请求</li><li>所有请求完成后，结果按照 urls 里面的顺序依次打出（发送请求的函数可以直接使用fetch即可）</li></ul><p>遇到到这个问题时你会怎么来做？</p><p>遇到这个问题还是先来分析一下这个问题的设计思路→。</p><h2 id="设计思路" tabindex="-1">设计思路 <a class="header-anchor" href="#设计思路" aria-label="Permalink to &quot;设计思路&quot;">​</a></h2><p>首先来看将上面的文字转化为图之后的效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07bbe7e8bd9641d58569fdc2526d1a12~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="image.png"></p><p>这样就直观的看到，有一个最大并发数<code>maxNum</code>，<code>20</code>个异步请求的<code>urls</code>集合和并发返回之后的<code>results</code>集合。</p><p>下面就开始演示这个思路是如何开始的，如下：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7e9910c36ea44b8a8048ba2f61bc910~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="image.png"></p><p>首先按照每次只能并发<code>3</code>个请求的要求，这里就对应<code>A、B、C</code>，当其中有一个请求完之后就会再从<code>urls</code>里面再取出一个进行请求，这样依次类推，直到<code>urls</code>里面的<code>20</code>个请求都执行完才终止请求。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e34080a4e7a4b3a99ae2a81489ef85d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="image.png"></p><p>主要思路就是上面所述，但是在开发时我们要考虑一些特殊情况，如下：</p><ul><li><code>urls</code>的长度为<code>0</code>时，<code>results</code>就没有值，此时应该返回空数组</li><li><code>maxNum</code>大于<code>urls</code>的长度时，应该取的是<code>urls</code>的长度，否则则是取<code>maxNum</code></li><li>需要定义一个<code>count</code>计数器来判断是否已全部请求完成</li><li>因为没有考虑请求是否请求成功，所以请求成功或报错都应把结果保存在<code>results</code>集合中</li><li><code>results</code>中的顺序需和<code>urls</code>中的保持一致</li></ul><p>好，我的设计思路就是这样的，下面就要来开始开发工作啦~</p><h2 id="开发" tabindex="-1">开发 <a class="header-anchor" href="#开发" aria-label="Permalink to &quot;开发&quot;">​</a></h2><p>具体代码如下（代码中已备注有注释）：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 并发请求函数</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">concurrencyRequest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">urls</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">maxNum</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (urls.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">([]);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">results</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 下一个请求的下标</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 当前请求完成的数量</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 发送请求</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> urls.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index; </span><span style="color:#6A737D;">// 保存序号，使result和urls相对应</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">url</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> urls[index];</span></span>\n<span class="line"><span style="color:#E1E4E8;">            index</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(url);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">resp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(url);</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// resp 加入到results</span></span>\n<span class="line"><span style="color:#E1E4E8;">                results[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> resp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// err 加入到results</span></span>\n<span class="line"><span style="color:#E1E4E8;">                results[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                count</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 判断是否所有的请求都已完成</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (count </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> urls.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;完成了&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(results);</span></span>\n<span class="line"><span style="color:#E1E4E8;">                }</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// maxNum和urls.length取最小进行调用</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">times</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(maxNum, urls.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> times; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    })</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 并发请求函数</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concurrencyRequest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">urls</span><span style="color:#24292E;">, </span><span style="color:#E36209;">maxNum</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (urls.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">([]);</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">        }</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">results</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 下一个请求的下标</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 当前请求完成的数量</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 发送请求</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">() {</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> urls.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">i</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index; </span><span style="color:#6A737D;">// 保存序号，使result和urls相对应</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">url</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> urls[index];</span></span>\n<span class="line"><span style="color:#24292E;">            index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(url);</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">resp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(url);</span></span>\n<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// resp 加入到results</span></span>\n<span class="line"><span style="color:#24292E;">                results[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> resp;</span></span>\n<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>\n<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// err 加入到results</span></span>\n<span class="line"><span style="color:#24292E;">                results[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> err;</span></span>\n<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">                count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 判断是否所有的请求都已完成</span></span>\n<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (count </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> urls.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">                    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;完成了&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(results);</span></span>\n<span class="line"><span style="color:#24292E;">                }</span></span>\n<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">            }</span></span>\n<span class="line"><span style="color:#24292E;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// maxNum和urls.length取最小进行调用</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">times</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(maxNum, urls.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> times; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">        }</span></span>\n<span class="line"><span style="color:#24292E;">    })</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h2 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h2><p>测试代码如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">urls</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    urls.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`https://jsonplaceholder.typicode.com/todos/${</span><span style="color:#E1E4E8;">i</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#B392F0;">concurrencyRequest</span><span style="color:#E1E4E8;">(urls, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res);</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">urls</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>\n<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    urls.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`https://jsonplaceholder.typicode.com/todos/${</span><span style="color:#24292E;">i</span><span style="color:#032F62;">}`</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#6F42C1;">concurrencyRequest</span><span style="color:#24292E;">(urls, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res);</span></span>\n<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="结果" tabindex="-1">结果 <a class="header-anchor" href="#结果" aria-label="Permalink to &quot;结果&quot;">​</a></h2><p>下面通过运行代码来看看效果：</p><p>首先来看看控制台输出的结果，如下：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c8ea31912dc453da2b40aa1a8a87a7e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="image.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0b8c31dff2d403d9db7c7263412dcf5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="image.png"></p><p>可以看到<code>20</code>个请求都请求完成，<code>results</code>里面也是按顺序打印出了结果。</p><p>然后再看看请求时请求数量是否每次都是<code>3</code>个，如下：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ed226dce0674af09bdbac1617aac8ab~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="test1.gif"></p><p>通过上面这个<code>gif</code>图可以很直观的看到，每次请求的数量都是<code>3</code>个，证明写的代码没有毛病，搞定！</p><p>至此，这个在实际开发中会遇见的前端控制并发请求的需求就实现完成了。代码相对来说没有太大的难度，只要把一些特殊情况给考虑完全，最后的实现也就没什么太大问题。最后，希望看完这篇文章之后你也能轻松掌握前端控制并发数量的问题，栓Q~</p>',33);const u=s(E,[["render",function(s,e,c,r,t,E){const u=n("ArticleMetadata"),b=n("ClientOnly");return a(),l("div",null,[y,p(b,null,{default:o((()=>[p(u)])),_:1}),i])}]]);export{t as __pageData,u as default};
