import{_ as s,C as a,o as n,c as l,H as p,w as o,k as e,a as c,Q as r}from"./chunks/framework.e34e23c1.js";const t=JSON.parse('{"title":"7个简单但棘手的JavaScript面试问题","description":"JavaScript面试问题","frontmatter":{"layout":"Article","title":"7个简单但棘手的JavaScript面试问题","head":[["meta",{"name":"description","content":"JavaScript面试问题"}],["meta",{"name":"keywords","content":"的JavaScript面试问题"}]],"date":"2023/10/27","tags":"JavaScript","category":"技术专栏","intro":"7个简单但棘手的JavaScript面试问题"},"headers":[],"relativePath":"article/7个简单但棘手的JavaScript面试问题.md","filePath":"全部文档/技术专栏/前端/7个简单但棘手的JavaScript面试问题.md","lastUpdated":1699516939000}'),y={name:"article/7个简单但棘手的JavaScript面试问题.md"},E=e("h1",{id:"_7个简单但棘手的javascript面试问题",tabindex:"-1"},[c("7个简单但棘手的JavaScript面试问题 "),e("a",{class:"header-anchor",href:"#_7个简单但棘手的javascript面试问题","aria-label":'Permalink to "7个简单但棘手的JavaScript面试问题"'},"​")],-1),i=r('<h2 id="_1-意外全局变量" tabindex="-1">1. 意外全局变量 <a class="header-anchor" href="#_1-意外全局变量" aria-label="Permalink to &quot;1. 意外全局变量&quot;">​</a></h2><p><strong>问题：</strong> 在下面的代码中，我们想要分别输出变量 <code>a</code> 和 <code>b</code> 的类型：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  a</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> a; </span><span style="color:#6A737D;">// =&gt; ???</span></span>\n<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> b; </span><span style="color:#6A737D;">// =&gt; ???</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">  a</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> a; </span><span style="color:#6A737D;">// =&gt; ???</span></span>\n<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> b; </span><span style="color:#6A737D;">// =&gt; ???</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>分析：</strong> 这段代码引发了一个常见的陷阱：意外创建的全局变量。在函数 <code>foo()</code> 中，我们声明了变量 <code>a</code>，但 <code>b</code> 并没有使用 <code>let</code> 或 <code>const</code> 进行声明。因此，<code>b</code> 变成了全局变量，而不是局部变量。</p><p>因此，<code>typeof a</code> 返回 <code>&#39;undefined&#39;</code>，因为变量 <code>a</code> 是 <code>foo()</code> 函数内的局部变量，而 <code>typeof b</code> 返回 <code>&#39;number&#39;</code>，因为变量 <code>b</code> 成为了全局变量。</p><h2 id="_2-数组的-length-属性" tabindex="-1">2. 数组的 length 属性 <a class="header-anchor" href="#_2-数组的-length-属性" aria-label="Permalink to &quot;2. 数组的 length 属性&quot;">​</a></h2><p><strong>问题：</strong> 下面的代码中，我们尝试清空一个数组 <code>clothes</code>，然后访问 <code>clothes[0]</code>。它的值会是什么？</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">clothes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;jacket&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;t-shirt&#39;</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#E1E4E8;">clothes.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">clothes[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]; </span><span style="color:#6A737D;">// =&gt; ???</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">clothes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;jacket&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;t-shirt&#39;</span><span style="color:#24292E;">];</span></span>\n<span class="line"><span style="color:#24292E;">clothes.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">clothes[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// =&gt; ???</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>分析：</strong> 这个问题涉及到JavaScript中数组的 <code>length</code> 属性。当我们将数组的 <code>length</code> 设置为 <code>0</code> 时，实际上是在删除数组的所有元素。因此，<code>clothes[0]</code> 的值是 <code>undefined</code>，因为数组已被清空。</p><h2 id="_3-鹰眼测试" tabindex="-1">3. 鹰眼测试 <a class="header-anchor" href="#_3-鹰眼测试" aria-label="Permalink to &quot;3. 鹰眼测试&quot;">​</a></h2><p><strong>问题：</strong> 下面的代码尝试在数组 <code>numbers</code> 中添加一些数字。<code>numbers</code> 的内容会是什么？</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">numbers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  numbers.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">numbers; </span><span style="color:#6A737D;">// =&gt; ???</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">numbers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>\n<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">{</span></span>\n<span class="line"><span style="color:#24292E;">  numbers.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#24292E;">numbers; </span><span style="color:#6A737D;">// =&gt; ???</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>分析：</strong> 这个问题涉及到JavaScript中常见的<code>for</code>循环陷阱。在 <code>for</code> 循环的末尾存在一个意外的分号 <code>;</code>，导致循环体未执行。因此，<code>numbers</code> 数组将为空，其内容是 <code>[]</code>。</p><h2 id="_4-自动分号插入" tabindex="-1">4. 自动分号插入 <a class="header-anchor" href="#_4-自动分号插入" aria-label="Permalink to &quot;4. 自动分号插入&quot;">​</a></h2><p><strong>问题：</strong> 下面的函数 <code>arrayFromValue()</code> 接受一个参数，并将其放入数组中。它的返回值是什么？</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">arrayFromValue</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span></span>\n<span class="line"><span style="color:#E1E4E8;">  [item];</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#B392F0;">arrayFromValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// =&gt; ???</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">arrayFromValue</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span></span>\n<span class="line"><span style="color:#24292E;">  [item];</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#6F42C1;">arrayFromValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// =&gt; ???</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>分析：</strong> 这个问题涉及到JavaScript中自动分号插入的行为。由于在 <code>return</code> 语句和数组 <code>[item]</code> 之间存在换行符，JavaScript会自动插入分号，将函数的返回值视为 <code>undefined</code>。因此，<code>arrayFromValue(10)</code> 的返回值是 <code>undefined</code>。</p><h2 id="_5-经典问题-棘手的闭包" tabindex="-1">5. 经典问题:棘手的闭包 <a class="header-anchor" href="#_5-经典问题-棘手的闭包" aria-label="Permalink to &quot;5. 经典问题:棘手的闭包&quot;">​</a></h2><p><strong>问题：</strong> 下面的代码尝试在一个<code>for</code>循环中使用闭包来记录不同的值。它将输出什么到控制台？</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i;</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(i);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(log, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i;</span></span>\n<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(i);</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(log, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>分析：</strong> 这个问题涉及到JavaScript中的闭包和作用域。尽管我们可能期望输出是 <code>0</code>、<code>1</code> 和 <code>2</code>，但实际上它会输出 <code>3</code>、<code>3</code> 和 <code>3</code>。这是因为 <code>log</code> 函数是一个闭包，它捕获了变量 <code>i</code> 的最终值，而不是在每次迭代中的值。</p><h2 id="_6-浮点数计算" tabindex="-1">6. 浮点数计算 <a class="header-anchor" href="#_6-浮点数计算" aria-label="Permalink to &quot;6. 浮点数计算&quot;">​</a></h2><p><strong>问题：</strong> 下面的等式检查两个浮点数的相等性。它们相等吗？</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.3</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// =&gt; ???</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">0.1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.3</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// =&gt; ???</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>分析：</strong> 这个问题涉及到JavaScript中浮点数的精度问题。尽管我们可能期望 <code>0.1 + 0.2</code> 等于 <code>0.3</code>，但实际上它返回 <code>false</code>。这是因为在二进制表示中，这些浮点数相加会产生舍入误差。</p><h2 id="_7-变量提升" tabindex="-1">7. 变量提升 <a class="header-anchor" href="#_7-变量提升" aria-label="Permalink to &quot;7. 变量提升&quot;">​</a></h2><p><strong>问题：</strong> 如果在变量声明前访问变量 <code>myVar</code> 和 <code>myConst</code>，会发生什么？</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">myVar; </span><span style="color:#6A737D;">// =&gt; ???</span></span>\n<span class="line"><span style="color:#E1E4E8;">myConst; </span><span style="color:#6A737D;">// =&gt; ???</span></span>\n<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> myVar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;value&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myConst</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.14</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">myVar; </span><span style="color:#6A737D;">// =&gt; ???</span></span>\n<span class="line"><span style="color:#24292E;">myConst; </span><span style="color:#6A737D;">// =&gt; ???</span></span>\n<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myVar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myConst</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.14</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>分析：</strong> 这个问题涉及到JavaScript中的变量提升和临时死区。在声明前访问 <code>myVar</code> 会返回 <code>undefined</code>，因为变量 <code>myVar</code> 在声明前已经提升，但尚未初始化。而在声明前访问 <code>myConst</code> 会引发 <code>ReferenceError</code>，因为 <code>const</code> 声明具有临时死区，直到声明行之后才能访问。</p>',29);const d=s(y,[["render",function(s,e,c,r,t,y){const d=a("ArticleMetadata"),u=a("ClientOnly");return n(),l("div",null,[E,p(u,null,{default:o((()=>[p(d)])),_:1}),i])}]]);export{t as __pageData,d as default};
