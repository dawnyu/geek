import{_ as s,C as n,o as a,c as l,H as p,w as o,k as e,a as c,Q as r}from"./chunks/framework.e34e23c1.js";const t=JSON.parse('{"title":"let和const如何实现块级作用域","description":"","frontmatter":{"layout":"Article","title":"let和const如何实现块级作用域","date":"2023/10/10","tags":"JavaScript","category":"技术专栏","preview":"/common/8.jpg","intro":"使用let 和 const 声明变量早已经习以为常了。笔者作为面试官面试过上百人，能准确理解let/const块级作用域以及的候选人不足一二。本文将深入研究 let 和 const 的实现原理，以及多种方式来模拟私有变量，希望本文能给初中级前端小伙伴们一点帮助。"},"headers":[],"relativePath":"article/let和const如何实现块级作用域.md","filePath":"全部文档/技术专栏/前端/let和const如何实现块级作用域.md","lastUpdated":1696945268000}'),E={name:"article/let和const如何实现块级作用域.md"},i=e("h1",{id:"let和const如何实现块级作用域",tabindex:"-1"},[c("let和const如何实现块级作用域 "),e("a",{class:"header-anchor",href:"#let和const如何实现块级作用域","aria-label":'Permalink to "let和const如何实现块级作用域"'},"​")],-1),y=r('<blockquote><p>使用let 和 const 声明变量早已经习以为常了。笔者作为面试官面试过上百人，能准确理解let/const块级作用域以及的候选人不足一二。本文将深入研究 let 和 const 的实现原理，以及多种方式来模拟私有变量，希望本文能给初中级前端小伙伴们一点帮助。</p></blockquote><h2 id="一、let-和-const-的实现原理" tabindex="-1">一、<code>let</code> 和 <code>const</code> 的实现原理 <a class="header-anchor" href="#一、let-和-const-的实现原理" aria-label="Permalink to &quot;一、`let` 和 `const` 的实现原理&quot;">​</a></h2><h3 id="_1-1-javascript-的作用域链" tabindex="-1">1.1 JavaScript 的作用域链 <a class="header-anchor" href="#_1-1-javascript-的作用域链" aria-label="Permalink to &quot;1.1 JavaScript 的作用域链&quot;">​</a></h3><p>在深入了解 <code>let</code> 和 <code>const</code> 前，让我们首先回顾一下 JavaScript 中的作用域。作用域是一个决定变量可见性和访问性的概念。JavaScript 具有两种主要的作用域：全局作用域和函数作用域。</p><p>全局作用域是整个程序的顶层作用域，其中声明的变量可以在程序的任何地方访问。函数作用域限定了变量的作用范围，只有在函数内部才能访问这些变量。</p><h3 id="_1-2-词法环境和变量对象" tabindex="-1">1.2 词法环境和变量对象 <a class="header-anchor" href="#_1-2-词法环境和变量对象" aria-label="Permalink to &quot;1.2 词法环境和变量对象&quot;">​</a></h3><p>JavaScript 引擎使用词法环境来管理变量和函数的作用域。词法环境包括两个重要部分：词法环境记录和对外部词法环境的引用。</p><p>词法环境记录是一个内部数据结构，用于存储变量和函数声明。全局环境的词法环境记录包含全局变量和函数，而函数环境的词法环境记录包含局部变量和参数。</p><h3 id="_1-3-let-和-const-的块级作用域" tabindex="-1">1.3 <code>let</code> 和 <code>const</code> 的块级作用域 <a class="header-anchor" href="#_1-3-let-和-const-的块级作用域" aria-label="Permalink to &quot;1.3 `let` 和 `const` 的块级作用域&quot;">​</a></h3><p>ES6 引入了 <code>let</code> 和 <code>const</code>，它们引入了块级作用域的概念。块级作用域允许我们在 <code>{}</code> 内部创建独立的作用域，使得变量仅在该块内有效。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(x); </span><span style="color:#6A737D;">// 报错：x is not defined</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(y); </span><span style="color:#6A737D;">// 报错：y is not defined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">y</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x); </span><span style="color:#6A737D;">// 报错：x is not defined</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(y); </span><span style="color:#6A737D;">// 报错：y is not defined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在上面例子中，<code>x</code> 和 <code>y</code> 只在 <code>if</code> 语句块内可见，外部无法访问它们。</p><h3 id="_1-4-let-和-const-的临时死区" tabindex="-1">1.4 <code>let</code> 和 <code>const</code> 的临时死区 <a class="header-anchor" href="#_1-4-let-和-const-的临时死区" aria-label="Permalink to &quot;1.4 `let` 和 `const` 的临时死区&quot;">​</a></h3><p><code>let</code> 和 <code>const</code> 引入了“临时死区”（Temporal Dead Zone，TDZ）的概念。TDZ 是指在变量声明之前，变量无法被访问或赋值的状态。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(x); </span><span style="color:#6A737D;">// 报错：Cannot access &#39;x&#39; before initialization</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x); </span><span style="color:#6A737D;">// 报错：Cannot access &#39;x&#39; before initialization</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在上面例子中，由于 <code>x</code> 在声明之前被访问，触发了 TDZ，导致报错。</p><h3 id="_1-5-const-的不可变性" tabindex="-1">1.5 <code>const</code> 的不可变性 <a class="header-anchor" href="#_1-5-const-的不可变性" aria-label="Permalink to &quot;1.5 `const` 的不可变性&quot;">​</a></h3><p><code>const</code> 声明的变量是不可变的，一旦赋值后不能再重新赋值。但需要注意的是，对于引用类型的变量，虽然变量本身不可重新赋值，但其属性仍然可以修改。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pi</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.14159</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">pi </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.14</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 报错：Assignment to constant variable.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">person</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { name: </span><span style="color:#9ECBFF;">&#39;John&#39;</span><span style="color:#E1E4E8;"> };</span></span>\n<span class="line"><span style="color:#E1E4E8;">person.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Alice&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 可行</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pi</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.14159</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">pi </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.14</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 报错：Assignment to constant variable.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&#39;John&#39;</span><span style="color:#24292E;"> };</span></span>\n<span class="line"><span style="color:#24292E;">person.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Alice&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 可行</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在上面例子中，<code>pi</code> 由于是基本数据类型，不能被重新赋值。而 <code>person</code> 是一个对象，虽然不能重新赋值 <code>person</code>，但可以修改其属性。</p><h2 id="二、模拟私有变量" tabindex="-1">二、模拟私有变量 <a class="header-anchor" href="#二、模拟私有变量" aria-label="Permalink to &quot;二、模拟私有变量&quot;">​</a></h2><h3 id="_2-1-闭包的基本原理" tabindex="-1">2.1 闭包的基本原理 <a class="header-anchor" href="#_2-1-闭包的基本原理" aria-label="Permalink to &quot;2.1 闭包的基本原理&quot;">​</a></h3><p>闭包是 js 中的一个概念，它允许函数访问其外部作用域的变量，即使外部作用域已经执行完毕。闭包通过将内部函数引用到外部函数的变量来实现。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createCounter</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 内部函数 increment 闭包了外部函数 createCounter 的变量 count</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    count</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> increment;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">counter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createCounter</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#B392F0;">counter</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 输出 1</span></span>\n<span class="line"><span style="color:#B392F0;">counter</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 输出 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createCounter</span><span style="color:#24292E;">() {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 内部函数 increment 闭包了外部函数 createCounter 的变量 count</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">() {</span></span>\n<span class="line"><span style="color:#24292E;">    count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(count);</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> increment;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">counter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createCounter</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#6F42C1;">counter</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 输出 1</span></span>\n<span class="line"><span style="color:#6F42C1;">counter</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 输出 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>在上面例子中，<code>createCounter</code> 函数返回了一个内部函数 <code>increment</code>，该内部函数能够访问并修改外部函数的 <code>count</code> 变量。这就是闭包的基本原理。</p><h3 id="_2-2-使用函数闭包" tabindex="-1">2.2 使用函数闭包 <a class="header-anchor" href="#_2-2-使用函数闭包" aria-label="Permalink to &quot;2.2 使用函数闭包&quot;">​</a></h3><p>通过函数闭包，我们可以封装变量并模拟实现私有变量的行为。我们可以创建一个函数，该函数包含了需要保护的变量，并返回用于访问和修改这些变量的方法。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createPrivateVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">initialValue</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> initialValue;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setValue</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">newValue</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newValue;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  };</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">privateVar</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createPrivateVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(privateVar.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 输出 42</span></span>\n<span class="line"><span style="color:#E1E4E8;">privateVar.</span><span style="color:#B392F0;">setValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(privateVar.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 输出 100</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPrivateVariable</span><span style="color:#24292E;">(</span><span style="color:#E36209;">initialValue</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> initialValue;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value;</span></span>\n<span class="line"><span style="color:#24292E;">    },</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setValue</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">newValue</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">      value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newValue;</span></span>\n<span class="line"><span style="color:#24292E;">    },</span></span>\n<span class="line"><span style="color:#24292E;">  };</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">privateVar</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPrivateVariable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(privateVar.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 输出 42</span></span>\n<span class="line"><span style="color:#24292E;">privateVar.</span><span style="color:#6F42C1;">setValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(privateVar.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 输出 100</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>在上面例子中，<code>createPrivateVariable</code> 函数返回了一个对象，该对象包含了两个方法 <code>getValue</code> 和 <code>setValue</code>，用于访问和修改私有变量 <code>value</code>。这样，我们成功地模拟出了一个私有变量的效果，外部无法直接访问或修改它。</p><h3 id="_2-3-模块模式" tabindex="-1">2.3 模块模式 <a class="header-anchor" href="#_2-3-模块模式" aria-label="Permalink to &quot;2.3 模块模式&quot;">​</a></h3><p>模块模式是一种常见的实现私有变量的方式，特别适用于大型应用程序的模块化设计。模块模式利用了函数作用域和闭包的特性，将私有变量和方法封装在一个函数内部，并返回一个包含公有方法的对象。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myModule</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 私有变量</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> privateVar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 私有方法</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">privateFunction</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 可以访问 privateVar</span></span>\n<span class="line"><span style="color:#E1E4E8;">    privateVar</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 公有方法</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">privateFunction</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> privateVar;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  };</span></span>\n<span class="line"><span style="color:#E1E4E8;">})();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">myModule.</span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(myModule.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 输出 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myModule</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 私有变量</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> privateVar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 私有方法</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">privateFunction</span><span style="color:#24292E;">() {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 可以访问 privateVar</span></span>\n<span class="line"><span style="color:#24292E;">    privateVar</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 公有方法</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">privateFunction</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">    },</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> privateVar;</span></span>\n<span class="line"><span style="color:#24292E;">    },</span></span>\n<span class="line"><span style="color:#24292E;">  };</span></span>\n<span class="line"><span style="color:#24292E;">})();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">myModule.</span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(myModule.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 输出 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>在上面例子中，<code>myModule</code> 是一个立即执行函数，它创建了一个闭包，包含了私有变量 <code>privateVar</code> 和私有方法 <code>privateFunction</code>。然后，通过返回一个包含公有方法的对象，我们可以访问和操作私有变量，同时将其封装起来，不会受到外部的干扰。</p><h3 id="_2-4-es6-中的-symbol" tabindex="-1">2.4 ES6 中的 Symbol <a class="header-anchor" href="#_2-4-es6-中的-symbol" aria-label="Permalink to &quot;2.4 ES6 中的 Symbol&quot;">​</a></h3><p>ES6 引入了 Symbol 数据类型，它可以用于创建唯一的属性键，从而实现私有属性。每个 Symbol 值都是唯一的，不会与其他属性键冲突。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">privateVariable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;privateVar&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  [privateVariable]: </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj[privateVariable]); </span><span style="color:#6A737D;">// 输出 42</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">privateVariable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;privateVar&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  [privateVariable]: </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj[privateVariable]); </span><span style="color:#6A737D;">// 输出 42</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在这个示例中，我们使用 Symbol 创建了一个私有属性键 <code>privateVariable</code>，然后将其作为对象的属性。这个私有属性对外部是不可见的，只能通过使用相同的 Symbol 才能访问。</p><h2 id="三、总结" tabindex="-1">三、总结 <a class="header-anchor" href="#三、总结" aria-label="Permalink to &quot;三、总结&quot;">​</a></h2><p>深入理解 js 的 <code>let</code> 和 <code>const</code> 变量声明以及模拟实现私有变量的方法，我们可以更好地掌握 JavaScript 的核心概念。 本文我们探讨了 js 的作用域、块级作用域、闭包、<code>let</code> 和 <code>const</code> 的行为，以及模拟私有变量的多种方式,希望能够帮助读者更好的理解js的核心概念。如果本文对你有帮助，记得点赞关注我哦~</p>',39);const d=s(E,[["render",function(s,e,c,r,t,E){const d=n("ArticleMetadata"),u=n("ClientOnly");return a(),l("div",null,[i,p(u,null,{default:o((()=>[p(d)])),_:1}),y])}]]);export{t as __pageData,d as default};
