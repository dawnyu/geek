import{_ as s,C as n,o as a,c as l,H as p,w as o,k as e,a as r,Q as t}from"./chunks/framework.e34e23c1.js";const c=JSON.parse('{"title":"面试题集合","description":"","frontmatter":{"createTime":"2022/10/18","tags":"ts"},"headers":[],"relativePath":"interview-question/typescript面试题集合.md","filePath":"全部文档/前端面试题/ts/typescript面试题集合.md","lastUpdated":1696860910000}'),y={name:"interview-question/typescript面试题集合.md"},i=e("h1",{id:"面试题集合",tabindex:"-1"},[r("面试题集合 "),e("a",{class:"header-anchor",href:"#面试题集合","aria-label":'Permalink to "面试题集合"'},"​")],-1),E=t('<h2 id="什么是typescript" tabindex="-1">什么是TypeScript？ <a class="header-anchor" href="#什么是typescript" aria-label="Permalink to &quot;什么是TypeScript？&quot;">​</a></h2><p>Typescript 是一个强类型的 JavaScript 超集，支持ES6语法，支持面向对象编程的概念，如类、接口、继承、泛型等。Typescript并不直接在浏览器上运行，需要编译器编译成纯Javascript来运行。</p><h2 id="为什么要使用-typescript-typescript-相对于-javascript-的优势是什么" tabindex="-1">为什么要使用 TypeScript ? TypeScript 相对于 JavaScript 的优势是什么？ <a class="header-anchor" href="#为什么要使用-typescript-typescript-相对于-javascript-的优势是什么" aria-label="Permalink to &quot;为什么要使用 TypeScript ? TypeScript 相对于 JavaScript 的优势是什么？&quot;">​</a></h2><p>增加了静态类型，可以在开发人员编写脚本时检测错误，使得代码质量更好，更健壮。</p><h3 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h3><ol><li>杜绝手误导致的变量名写错;</li><li>类型可以一定程度上充当文档;</li><li>IDE自动填充，自动联想;</li></ol><h2 id="typescript-中-const-和-readonly-的区别-枚举和常量枚举的区别-接口和类型别名的区别" tabindex="-1">TypeScript 中 const 和 readonly 的区别？枚举和常量枚举的区别？接口和类型别名的区别？ <a class="header-anchor" href="#typescript-中-const-和-readonly-的区别-枚举和常量枚举的区别-接口和类型别名的区别" aria-label="Permalink to &quot;TypeScript 中 const 和 readonly 的区别？枚举和常量枚举的区别？接口和类型别名的区别？&quot;">​</a></h2><ul><li>const 和 readonly: const可以防止变量的值被修改，readonly可以防止变量的属性被修改。</li><li>枚举和常量枚举: 常量枚举只能使用常量枚举表达式，并且不同于常规的枚举，它们在编译阶段会被删除。 常量枚举成员在使用的地方会被内联进来。 之所以可以这么做是因为，常量枚举不允许包含计算成员。</li><li>接口和类型别名: 两者都可以用来描述对象或函数的类型。与接口不同，类型别名还可以用于其他类型，如基本类型（原始值）、联合类型、元组。</li></ul><h2 id="typescript-中-any-类型的作用是什么" tabindex="-1">TypeScript 中 any 类型的作用是什么？ <a class="header-anchor" href="#typescript-中-any-类型的作用是什么" aria-label="Permalink to &quot;TypeScript 中 any 类型的作用是什么？&quot;">​</a></h2><p>为编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。</p><h2 id="typescript-中-any、never、unknown、null-undefined-和-void-有什么区别" tabindex="-1">TypeScript 中 any、never、unknown、null &amp; undefined 和 void 有什么区别？ <a class="header-anchor" href="#typescript-中-any、never、unknown、null-undefined-和-void-有什么区别" aria-label="Permalink to &quot;TypeScript 中 any、never、unknown、null &amp; undefined 和 void 有什么区别？&quot;">​</a></h2><ul><li>any: 动态的变量类型（失去了类型检查的作用）。</li><li>never: 永不存在的值的类型。例如：never 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型。</li><li>unknown: 任何类型的值都可以赋给 unknown 类型，但是 unknown 类型的值只能赋给 unknown 本身和 any 类型。</li><li>null &amp; undefined: 默认情况下 null 和 undefined 是所有类型的子类型。 就是说你可以把 null 和 undefined 赋值给 number 类型的变量。当你指定了 --strictNullChecks 标记，null 和 undefined 只能赋值给 void 和它们各自。</li><li>void: 没有任何类型。例如：一个函数如果没有返回值，那么返回值可以定义为void。</li></ul><h2 id="typescript-中-interface-可以给-function-array-class-indexable-做声明吗" tabindex="-1">TypeScript 中 interface 可以给 Function / Array / Class（Indexable）做声明吗？ <a class="header-anchor" href="#typescript-中-interface-可以给-function-array-class-indexable-做声明吗" aria-label="Permalink to &quot;TypeScript 中 interface 可以给 Function / Array / Class（Indexable）做声明吗？&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/*可以*/</span></span>\n<span class="line"><span style="color:#6A737D;">// 函数声明</span></span>\n<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Say</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">viod</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">say</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Say</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">viod</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}</span></span>\n<span class="line"><span style="color:#6A737D;">// Array 声明</span></span>\n<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NumberArray</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> fibonacci</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NumberArray</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#6A737D;">// Class 声明</span></span>\n<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PersonalIntl</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>\n<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sayHi</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/*可以*/</span></span>\n<span class="line"><span style="color:#6A737D;">// 函数声明</span></span>\n<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Say</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;"> (</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">viod</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">say</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Say</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">viod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {}</span></span>\n<span class="line"><span style="color:#6A737D;">// Array 声明</span></span>\n<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NumberArray</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> fibonacci</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NumberArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span>\n<span class="line"><span style="color:#6A737D;">// Class 声明</span></span>\n<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PersonalIntl</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;"> </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>\n<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sayHi</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="typescript-中可以使用-string、number、boolean、symbol、object-等给类型做声明吗" tabindex="-1">TypeScript 中可以使用 String、Number、Boolean、Symbol、Object 等给类型做声明吗？ <a class="header-anchor" href="#typescript-中可以使用-string、number、boolean、symbol、object-等给类型做声明吗" aria-label="Permalink to &quot;TypeScript 中可以使用 String、Number、Boolean、Symbol、Object 等给类型做声明吗？&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/*可以*/</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bob&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> decLiteral</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> isDone</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> sym</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">symbol</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/*可以*/</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bob&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> decLiteral</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> isDone</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sym</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">symbol</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;"> </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;"> </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="typescript-中的-this-和-javascript-中的-this-有什么差异" tabindex="-1">TypeScript 中的 this 和 JavaScript 中的 this 有什么差异？ <a class="header-anchor" href="#typescript-中的-this-和-javascript-中的-this-有什么差异" aria-label="Permalink to &quot;TypeScript 中的 this 和 JavaScript 中的 this 有什么差异？&quot;">​</a></h2><ul><li>TypeScript：noImplicitThis: true 的情况下，必须去声明 this 的类型，才能在函数或者对象中使用this。</li><li>Typescript 中箭头函数的 this 和 ES6 中箭头函数中的 this 是一致的。</li></ul><h2 id="typescript-中使用-union-types-时有哪些注意事项" tabindex="-1">TypeScript 中使用 Union Types 时有哪些注意事项？ <a class="header-anchor" href="#typescript-中使用-union-types-时有哪些注意事项" aria-label="Permalink to &quot;TypeScript 中使用 Union Types 时有哪些注意事项？&quot;">​</a></h2><p>属性或方法访问: 当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getLength</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">something</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> something.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// index.ts(2,22): error TS2339: Property &#39;length&#39; does not exist on type &gt;&#39;string | number&#39;.</span></span>\n<span class="line"><span style="color:#6A737D;">//   Property &#39;length&#39; does not exist on type &#39;number&#39;.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">something</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> something.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 公共方法和属性可以访问</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getLength</span><span style="color:#24292E;">(</span><span style="color:#E36209;">something</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> something.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// index.ts(2,22): error TS2339: Property &#39;length&#39; does not exist on type &gt;&#39;string | number&#39;.</span></span>\n<span class="line"><span style="color:#6A737D;">//   Property &#39;length&#39; does not exist on type &#39;number&#39;.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#E36209;">something</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> something.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 公共方法和属性可以访问</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="typescript-如何设计-class-的声明" tabindex="-1">TypeScript 如何设计 Class 的声明？ <a class="header-anchor" href="#typescript-如何设计-class-的声明" aria-label="Permalink to &quot;TypeScript 如何设计 Class 的声明？&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>\n<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Greeter</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#FFAB70;">greeting</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">message</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.greeting </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message;</span></span>\n<span class="line"><span style="color:#E1E4E8;">   }</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">greet</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello, &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.greeting;</span></span>\n<span class="line"><span style="color:#E1E4E8;">   }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> greeter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Greeter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">// 在声明类的时候，一般类中都会包含，构造函数、对构造函数中的属性进行类型声明、类中的方法。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>\n<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Greeter</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#E36209;">greeting</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">message</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.greeting </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> message;</span></span>\n<span class="line"><span style="color:#24292E;">   }</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">{</span></span>\n<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello, &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.greeting;</span></span>\n<span class="line"><span style="color:#24292E;">   }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> greeter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Greeter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#6A737D;">// 在声明类的时候，一般类中都会包含，构造函数、对构造函数中的属性进行类型声明、类中的方法。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="typescript-中如何联合枚举类型的-key" tabindex="-1">TypeScript 中如何联合枚举类型的 Key? <a class="header-anchor" href="#typescript-中如何联合枚举类型的-key" aria-label="Permalink to &quot;TypeScript 中如何联合枚举类型的 Key?&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>\n<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">B</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">C</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">strUnion</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">keyof</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> str; </span><span style="color:#6A737D;">// &#39;A&#39; | &#39;B&#39; | &#39;C&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>\n<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">str</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">A</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">B</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">C</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">strUnion</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> str; </span><span style="color:#6A737D;">// &#39;A&#39; | &#39;B&#39; | &#39;C&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="typescript-中-type-和-interface-的区别" tabindex="-1">TypeScript 中 type 和 interface 的区别? <a class="header-anchor" href="#typescript-中-type-和-interface-的区别" aria-label="Permalink to &quot;TypeScript 中 type 和 interface 的区别?&quot;">​</a></h2><h3 id="相同点" tabindex="-1">相同点 <a class="header-anchor" href="#相同点" aria-label="Permalink to &quot;相同点&quot;">​</a></h3><ol><li>都可以描述 &#39;对象&#39; 或者 &#39;函数&#39;</li><li>都允许拓展(extends)</li></ol><h3 id="不同点" tabindex="-1">不同点 <a class="header-anchor" href="#不同点" aria-label="Permalink to &quot;不同点&quot;">​</a></h3><ol><li>type 可以声明基本类型，联合类型，元组</li><li>type 可以使用 typeof 获取实例的类型进行赋值</li><li>多个相同的 interface 声明可以自动合并 使用 interface 描述‘数据结构’，使用 type 描述‘类型关系’</li></ol><h2 id="typescript-中-、-、-、-、-、-等符号的含义" tabindex="-1">TypeScript 中 ?.、??、!、!.、_、** 等符号的含义？ <a class="header-anchor" href="#typescript-中-、-、-、-、-、-等符号的含义" aria-label="Permalink to &quot;TypeScript 中 ?.、??、!、!.、_、** 等符号的含义？&quot;">​</a></h2><ul><li>?. 可选链 遇到 null 和 undefined 可以立即停止表达式的运行。</li><li>?? 空值合并运算符 当左侧操作数为 null 或 undefined 时，其返回右侧的操作数，否则返回左侧的操作数。</li><li>! 非空断言运算符 x! 将从 x 值域中排除 null 和 undefined</li><li>!. 在变量名后添加，可以断言排除undefined和null类型</li><li>_ 数字分割符 分隔符不会改变数值字面量的值，使人更容易读懂数字 .e.g 1_101_324。</li><li>** 求幂</li></ul><h2 id="简单介绍一下-typescript-模块的加载机制" tabindex="-1">简单介绍一下 TypeScript 模块的加载机制？ <a class="header-anchor" href="#简单介绍一下-typescript-模块的加载机制" aria-label="Permalink to &quot;简单介绍一下 TypeScript 模块的加载机制？&quot;">​</a></h2><p>假设有一个导入语句 import { a } from &quot;moduleA&quot;;</p><ol><li>首先，编译器会尝试定位需要导入的模块文件，通过绝对或者相对的路径查找方式；</li><li>如果上面的解析失败了，没有查找到对应的模块，编译器会尝试定位一个外部模块声明（.d.ts）；</li><li>最后，如果编译器还是不能解析这个模块，则会抛出一个错误 error TS2307: Cannot find module &#39;moduleA&#39;.</li></ol><h2 id="简单聊聊你对-typescript-类型兼容性的理解" tabindex="-1">简单聊聊你对 TypeScript 类型兼容性的理解？ <a class="header-anchor" href="#简单聊聊你对-typescript-类型兼容性的理解" aria-label="Permalink to &quot;简单聊聊你对 TypeScript 类型兼容性的理解？&quot;">​</a></h2><p>ts 类型兼容： 当一个类型 Y 可以赋值给另一个类型 X 时， 我们就可以说类型 X 兼容类型 Y。也就是说两者在结构上是一致的，而不一定非得通过 extends 的方式继承而来</p><ul><li>接口的兼容性：X = Y 只要目标类型 X 中声明的属性变量在源类型 Y 中都存在就是兼容的（ Y 中的类型可以比 X 中的多，但是不能少）</li><li>函数的兼容性：X = Y Y 的每个参数必须能在 X 里找到对应类型的参数，参数的名字相同与否无所谓，只看它们的类型（参数可以少但是不能多。与接口的兼容性有区别，原因参考第 17 问）</li></ul><h2 id="协变、逆变、双变和抗变的理解" tabindex="-1">协变、逆变、双变和抗变的理解？ <a class="header-anchor" href="#协变、逆变、双变和抗变的理解" aria-label="Permalink to &quot;协变、逆变、双变和抗变的理解？&quot;">​</a></h2><h3 id="协变-x-y-y-类型可以赋值给-x-类型的情况就叫做协变-也可以说是-x-类型兼容-y-类型" tabindex="-1">协变：X = Y Y 类型可以赋值给 X 类型的情况就叫做协变，也可以说是 X 类型兼容 Y 类型 <a class="header-anchor" href="#协变-x-y-y-类型可以赋值给-x-类型的情况就叫做协变-也可以说是-x-类型兼容-y-类型" aria-label="Permalink to &quot;协变：X = Y Y 类型可以赋值给 X 类型的情况就叫做协变，也可以说是 X 类型兼容 Y 类型&quot;">​</a></h3><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">X</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">; </span><span style="color:#FFAB70;">age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">; }</span></span>\n<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Y</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">; </span><span style="color:#FFAB70;">age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">; </span><span style="color:#FFAB70;">hobbies</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">[] }</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">X</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { name: </span><span style="color:#9ECBFF;">&#39;xiaoming&#39;</span><span style="color:#E1E4E8;">, age: </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> }</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> y</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Y</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { name: </span><span style="color:#9ECBFF;">&#39;xiaohong&#39;</span><span style="color:#E1E4E8;">, age: </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">, hobbies: [</span><span style="color:#9ECBFF;">&#39;eat&#39;</span><span style="color:#E1E4E8;">] }</span></span>\n<span class="line"><span style="color:#E1E4E8;">x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> y</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">X</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">; </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">; }</span></span>\n<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Y</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">; </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">; </span><span style="color:#E36209;">hobbies</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[] }</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">X</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&#39;xiaoming&#39;</span><span style="color:#24292E;">, age: </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> }</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Y</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&#39;xiaohong&#39;</span><span style="color:#24292E;">, age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">, hobbies: [</span><span style="color:#032F62;">&#39;eat&#39;</span><span style="color:#24292E;">] }</span></span>\n<span class="line"><span style="color:#24292E;">x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="逆变-printy-printx-函数x-类型可以赋值给函数y-类型-因为函数y-在调用的时候参数是按照y类型进行约束的-但是用到的是函数x的x的属性和方法-ts检查结果是类型安全的。这种特性就叫做逆变-函数的参数有逆变的性质" tabindex="-1">逆变：printY = printX 函数X 类型可以赋值给函数Y 类型，因为函数Y 在调用的时候参数是按照Y类型进行约束的，但是用到的是函数X的X的属性和方法，ts检查结果是类型安全的。这种特性就叫做逆变，函数的参数有逆变的性质 <a class="header-anchor" href="#逆变-printy-printx-函数x-类型可以赋值给函数y-类型-因为函数y-在调用的时候参数是按照y类型进行约束的-但是用到的是函数x的x的属性和方法-ts检查结果是类型安全的。这种特性就叫做逆变-函数的参数有逆变的性质" aria-label="Permalink to &quot;逆变：printY = printX 函数X 类型可以赋值给函数Y 类型，因为函数Y 在调用的时候参数是按照Y类型进行约束的，但是用到的是函数X的X的属性和方法，ts检查结果是类型安全的。这种特性就叫做逆变，函数的参数有逆变的性质&quot;">​</a></h3><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printY</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">y</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Y</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span></span>\n<span class="line"><span style="color:#B392F0;">printY</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(y.hobbies) }</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printX</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">X</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span></span>\n<span class="line"><span style="color:#B392F0;">printX</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(x.name) }</span></span>\n<span class="line"><span style="color:#E1E4E8;">printY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> printX</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printY</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Y</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span></span>\n<span class="line"><span style="color:#6F42C1;">printY</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">y</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(y.hobbies) }</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printX</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">X</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span></span>\n<span class="line"><span style="color:#6F42C1;">printX</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x.name) }</span></span>\n<span class="line"><span style="color:#24292E;">printY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> printX</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="双变-双向协变-x-y-y-x父类型可以赋值给子类型-子类型可以赋值给父类型-既逆变又协变-叫做-双向协变-ts2-x-之前支持这种赋值-之后-ts-加了一个编译选项-strictfunctiontypes-设置为-true-就只支持函数参数的逆变-设置为-false-则支持双向协变" tabindex="-1">双变（双向协变）：X = Y；Y = X父类型可以赋值给子类型，子类型可以赋值给父类型，既逆变又协变，叫做“双向协变”（ts2.x 之前支持这种赋值，之后 ts 加了一个编译选项 strictFunctionTypes，设置为 true 就只支持函数参数的逆变，设置为 false 则支持双向协变） <a class="header-anchor" href="#双变-双向协变-x-y-y-x父类型可以赋值给子类型-子类型可以赋值给父类型-既逆变又协变-叫做-双向协变-ts2-x-之前支持这种赋值-之后-ts-加了一个编译选项-strictfunctiontypes-设置为-true-就只支持函数参数的逆变-设置为-false-则支持双向协变" aria-label="Permalink to &quot;双变（双向协变）：X = Y；Y = X父类型可以赋值给子类型，子类型可以赋值给父类型，既逆变又协变，叫做“双向协变”（ts2.x 之前支持这种赋值，之后 ts 加了一个编译选项 strictFunctionTypes，设置为 true 就只支持函数参数的逆变，设置为 false 则支持双向协变）&quot;">​</a></h3><h3 id="抗变-不变-非父子类型之间不会发生型变-只要类型不一样就会报错" tabindex="-1">抗变（不变）：非父子类型之间不会发生型变，只要类型不一样就会报错 <a class="header-anchor" href="#抗变-不变-非父子类型之间不会发生型变-只要类型不一样就会报错" aria-label="Permalink to &quot;抗变（不变）：非父子类型之间不会发生型变，只要类型不一样就会报错&quot;">​</a></h3><h2 id="typescript-中对象展开会有什么副作用吗" tabindex="-1">TypeScript 中对象展开会有什么副作用吗？ <a class="header-anchor" href="#typescript-中对象展开会有什么副作用吗" aria-label="Permalink to &quot;TypeScript 中对象展开会有什么副作用吗？&quot;">​</a></h2><p>展开对象后面的属性会覆盖前面的属性； 仅包含对象自身的可枚举属性，不可枚举的属性将会丢失。</p><h2 id="类型的全局声明和局部声明" tabindex="-1">类型的全局声明和局部声明 <a class="header-anchor" href="#类型的全局声明和局部声明" aria-label="Permalink to &quot;类型的全局声明和局部声明&quot;">​</a></h2><p>如果声明文件内不包含import、export，那么这个文件声明的类型就会变成全局声明。反之，若是这个文件包含了import、export，那么这个文件包含的类型声明则会是局部声明，不会影响到全局声明。</p><h2 id="typescript-中同名的-interface-或者同名的-interface-和-class-可以合并吗" tabindex="-1">TypeScript 中同名的 interface 或者同名的 interface 和 class 可以合并吗？ <a class="header-anchor" href="#typescript-中同名的-interface-或者同名的-interface-和-class-可以合并吗" aria-label="Permalink to &quot;TypeScript 中同名的 interface 或者同名的 interface 和 class 可以合并吗？&quot;">​</a></h2><p>同名的interface会自动合并，同名的interface和class会自动聚合。</p><h2 id="如何使-typescript-项目引入并识别编译为-javascript-的-npm-库包" tabindex="-1">如何使 TypeScript 项目引入并识别编译为 JavaScript 的 npm 库包？ <a class="header-anchor" href="#如何使-typescript-项目引入并识别编译为-javascript-的-npm-库包" aria-label="Permalink to &quot;如何使 TypeScript 项目引入并识别编译为 JavaScript 的 npm 库包？&quot;">​</a></h2><p>选择安装 ts 版本，npm install @types/包名 --save； 对于没有类型的 js 库，需要编写同名的.d.ts文件</p><h2 id="typescript-的-tsconfig-json-中有哪些配置项信息" tabindex="-1">TypeScript 的 tsconfig.json 中有哪些配置项信息？ <a class="header-anchor" href="#typescript-的-tsconfig-json-中有哪些配置项信息" aria-label="Permalink to &quot;TypeScript 的 tsconfig.json 中有哪些配置项信息？&quot;">​</a></h2><ul><li>files 是一个数组列表，里面包含指定文件的相对或绝对路径，用来指定待编译文件，编译器在编译的时候只会编译包含在files中列出的文件。</li><li>include &amp; exclude 指定编译某些文件，或者指定排除某些文件。</li><li>compileOnSave：true 让IDE在保存文件的时候根据tsconfig.json重新生成文件。</li><li>extends 可以通过指定一个其他的tsconfig.json文件路径，来继承这个配置文件里的配置。</li><li>compilerOptions 编译配置项，如何对具体的ts文件进行编译</li></ul><ol start="23"><li>TypeScript 中如何设置模块导入的路径别名？</li></ol><p>通过 tsconfig.json 中的 paths 项来配置:</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">    {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;baseUrl&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;paths&quot;</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">&quot;@helper/*&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;src/helper/*&quot;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">&quot;@utils/*&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;src/utils/*&quot;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FDAEB7;font-style:italic;">...</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">   }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">:</span></span>\n<span class="line"><span style="color:#24292E;">    {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;baseUrl&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;paths&quot;</span><span style="color:#24292E;">: {</span></span>\n<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">&quot;@helper/*&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;src/helper/*&quot;</span><span style="color:#24292E;">],</span></span>\n<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">&quot;@utils/*&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;src/utils/*&quot;</span><span style="color:#24292E;">],</span></span>\n<span class="line"><span style="color:#24292E;">         </span><span style="color:#B31D28;font-style:italic;">...</span></span>\n<span class="line"><span style="color:#24292E;">      }</span></span>\n<span class="line"><span style="color:#24292E;">   }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="declare-declare-global是什么" tabindex="-1">declare，declare global是什么？ <a class="header-anchor" href="#declare-declare-global是什么" aria-label="Permalink to &quot;declare，declare global是什么？&quot;">​</a></h2><p>declare 是用来定义全局变量、全局函数、全局命名空间、js modules、class等 declare global 为全局对象 window 增加新的属性</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> global {</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Window</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">csrf</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">   }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> global {</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Window</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">csrf</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">   }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解" tabindex="-1">对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？ <a class="header-anchor" href="#对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解" aria-label="Permalink to &quot;对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？&quot;">​</a></h2><ul><li>public: 成员都默认为public，被此限定符修饰的成员是可以被外部访问；</li><li>private: 被此限定符修饰的成员是只可以被类的内部访问；</li><li>protected: 被此限定符修饰的成员是只可以被类的内部以及类的子类访问;</li><li>readonly: 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</li></ul><h2 id="keyof-和-typeof-关键字的作用" tabindex="-1">keyof 和 typeof 关键字的作用？ <a class="header-anchor" href="#keyof-和-typeof-关键字的作用" aria-label="Permalink to &quot;keyof 和 typeof 关键字的作用？&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">keyof 索引类型查询操作符 获取索引类型的属性名，构成联合类型。</span></span>\n<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> 获取一个变量或对象的类型</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">keyof 索引类型查询操作符 获取索引类型的属性名，构成联合类型。</span></span>\n<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> 获取一个变量或对象的类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="简述工具类型-exclude、omit、merge、intersection、overwrite的作用" tabindex="-1">简述工具类型 Exclude、Omit、Merge、Intersection、Overwrite的作用 <a class="header-anchor" href="#简述工具类型-exclude、omit、merge、intersection、overwrite的作用" aria-label="Permalink to &quot;简述工具类型 Exclude、Omit、Merge、Intersection、Overwrite的作用&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Exclude</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> 从 </span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;"> 中排除出可分配给 U的元素。</span></span>\n<span class="line"><span style="color:#E1E4E8;">Omit</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">K</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> 的作用是忽略T中的某些属性。</span></span>\n<span class="line"><span style="color:#E1E4E8;">Merge</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">O1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">O2</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> 是将两个对象的属性合并。</span></span>\n<span class="line"><span style="color:#E1E4E8;">Compute</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">B</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> 是将交叉类型合并</span></span>\n<span class="line"><span style="color:#E1E4E8;">Intersection</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">的作用是取T的属性,此属性同样也存在与U。</span></span>\n<span class="line"><span style="color:#E1E4E8;">Overwrite</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> 是用U的属性覆盖T的相同属性。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Exclude</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> 从 </span><span style="color:#005CC5;">T</span><span style="color:#24292E;"> 中排除出可分配给 U的元素。</span></span>\n<span class="line"><span style="color:#24292E;">Omit</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">K</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> 的作用是忽略T中的某些属性。</span></span>\n<span class="line"><span style="color:#24292E;">Merge</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">O1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">O2</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> 是将两个对象的属性合并。</span></span>\n<span class="line"><span style="color:#24292E;">Compute</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">B</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> 是将交叉类型合并</span></span>\n<span class="line"><span style="color:#24292E;">Intersection</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">的作用是取T的属性,此属性同样也存在与U。</span></span>\n<span class="line"><span style="color:#24292E;">Overwrite</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> 是用U的属性覆盖T的相同属性。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="数组定义的两种方式" tabindex="-1">数组定义的两种方式 <a class="header-anchor" href="#数组定义的两种方式" aria-label="Permalink to &quot;数组定义的两种方式&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt;;</span></span>\n<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bar</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">baz</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;{ </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">}&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">[];</span></span>\n<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bar</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">baz</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> }[]</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>\n<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;;</span></span>\n<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bar</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">baz</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;{ </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">}&gt;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[];</span></span>\n<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bar</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">baz</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> }[]</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',69);const u=s(y,[["render",function(s,e,r,t,c,y){const u=n("ArticleMetadata"),b=n("ClientOnly");return a(),l("div",null,[i,p(b,null,{default:o((()=>[p(u)])),_:1}),E])}]]);export{c as __pageData,u as default};
