import{_ as s,C as n,o as a,c as l,H as p,w as e,k as o,a as c,Q as t}from"./chunks/framework.e34e23c1.js";const r=JSON.parse('{"title":"前端面试官怎么总喜欢问watch和computed","description":"watch和computed有什么区别,vue3中watch怎么用,vue3中computed怎么用","frontmatter":{"layout":"Article","title":"前端面试官怎么总喜欢问watch和computed","head":[["meta",{"name":"description","content":"watch和computed有什么区别,vue3中watch怎么用,vue3中computed怎么用"}],["meta",{"name":"keywords","content":"watch和computed有什么区别,vue3中watch怎么用,vue3中computed怎么用"}]],"date":"2023/10/23","tags":"watch,computed","category":"技术专栏","intro":"在现代前端的面试中，vue和react是面试过程中基本必问的技术栈，其中在聊到Vue响应式话题时，`watch和computed`是面试官非常喜欢聊的主题，虽然`watch`和`computed`它们都用于监听数据的变化，但它们在实现原理、使用场景和行为上有着显著的区别。"},"headers":[],"relativePath":"article/面试中常问的watch和computed区别.md","filePath":"全部文档/技术专栏/前端/面试中常问的watch和computed区别.md","lastUpdated":1698064137000}'),E={name:"article/面试中常问的watch和computed区别.md"},y=o("h1",{id:"前端面试官怎么总喜欢问watch和computed",tabindex:"-1"},[c("前端面试官怎么总喜欢问watch和computed "),o("a",{class:"header-anchor",href:"#前端面试官怎么总喜欢问watch和computed","aria-label":'Permalink to "前端面试官怎么总喜欢问watch和computed"'},"​")],-1),i=t('<p>在现代前端的面试中，vue和react是面试过程中基本必问的技术栈，其中在聊到Vue响应式话题时，<code>watch和computed</code>是面试官非常喜欢聊的主题，虽然<code>watch</code>和<code>computed</code>它们都用于监听数据的变化，但它们在实现原理、使用场景和行为上有着显著的区别。本文将深入探讨<code>watch</code>和<code>computed</code>的原理和区别，并提供一些面试过程中的建议。</p><h2 id="先了解下vue-3响应式" tabindex="-1">先了解下Vue 3响应式 <a class="header-anchor" href="#先了解下vue-3响应式" aria-label="Permalink to &quot;先了解下Vue 3响应式&quot;">​</a></h2><p>Vue 3使用了Proxy作为其底层响应式实现可以监听对象属性的变化并触发相应的更新。当你访问数据时，Vue会建立一个依赖关系，然后在数据发生变化时通知相关的依赖项，从而更新视图。在这个背景下，我们深入探讨<code>watch</code>和<code>computed</code>的底层源码和使用上的区别。</p><h2 id="watch" tabindex="-1">Watch <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;Watch&quot;">​</a></h2><p><code>watch</code>选项允许你监听数据的变化并执行自定义的操作。它通常用于监视某个数据的变化并执行副作用，比如异步请求、打印日志或触发动画。当你创建一个<code>watch</code>属性时，Vue会建立一个响应式依赖关系，将该<code>watch</code>属性关联到你要监视的数据。当监视的数据发生变化时，Vue会通知相关的<code>watch</code>属性，触发其回调函数。这个回调函数会接收新值和旧值作为参数，你可以在其中执行所需的操作。</p><h3 id="源码分析" tabindex="-1">源码分析 <a class="header-anchor" href="#源码分析" aria-label="Permalink to &quot;源码分析&quot;">​</a></h3><p>相关文件：<code>vue/src/runtime-core/apiWatch.ts</code>和<code>vue/src/reactivity/src/effect.ts</code>。</p><p>在Vue 3的源码中，<code>watch</code>的实现主要依赖于<code>createWatcher</code>函数和<code>Watcher</code>类。</p><ul><li><code>createWatcher</code>函数负责创建<code>Watcher</code>实例，并接收监视的数据、回调函数以及其他选项。</li><li><code>Watcher</code>类是<code>watch</code>的核心，它建立了对监视数据的依赖，并在数据变化时触发回调函数。</li><li>在<code>Watcher</code>的内部，依赖项追踪和回调触发是通过Vue的响应式系统实现的。当监视的数据发生变化时，Vue会检测到依赖关系，从而触发<code>Watcher</code>的回调。</li></ul><h4 id="解读" tabindex="-1">解读 <a class="header-anchor" href="#解读" aria-label="Permalink to &quot;解读&quot;">​</a></h4><p>1、在<code>vue/src/runtime-core/apiWatch.ts</code>中，<code>watch</code>函数负责创建<code>Watcher</code>实例，如下所示：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">source</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WatchSource</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">cb</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WatchCallback</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WatchOptions</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WatchStopHandle</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建一个watcher实例</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">watcher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Watcher</span><span style="color:#E1E4E8;">(vm, source, cb, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    deep: options </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> options.deep,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    flush: options </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> options.flush,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    onTrack: options </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> options.onTrack,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    onTrigger: options </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> options.onTrigger,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">source</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WatchSource</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">cb</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WatchCallback</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">options</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WatchOptions</span></span>\n<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WatchStopHandle</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建一个watcher实例</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">watcher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Watcher</span><span style="color:#24292E;">(vm, source, cb, {</span></span>\n<span class="line"><span style="color:#24292E;">    deep: options </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> options.deep,</span></span>\n<span class="line"><span style="color:#24292E;">    flush: options </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> options.flush,</span></span>\n<span class="line"><span style="color:#24292E;">    onTrack: options </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> options.onTrack,</span></span>\n<span class="line"><span style="color:#24292E;">    onTrigger: options </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> options.onTrigger,</span></span>\n<span class="line"><span style="color:#24292E;">  });</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这段代码创建了一个<code>Watcher</code>实例，其中<code>vm</code>是Vue实例，<code>source</code>是要监视的数据，<code>cb</code>是回调函数，以及其他选项。</p><p>2、Watcher<code>的核心工作在</code>vue/src/reactivity/src/effect.ts`中，其中包含了依赖项追踪和回调触发的逻辑。下面是一个简化的示例：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Watcher</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置当前的watcher为活动watcher</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">pushTarget</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 执行监视的数据，触发依赖项的收集</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.getter.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.vm, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.vm);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 恢复之前的watcher</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">popTarget</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 触发回调函数，通知数据变化</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 执行回调函数</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.value </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isObject</span><span style="color:#E1E4E8;">(value) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.deep) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 触发回调函数</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">(value, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.value);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Watcher</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置当前的watcher为活动watcher</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">pushTarget</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行监视的数据，触发依赖项的收集</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.getter.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.vm, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.vm);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 恢复之前的watcher</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">popTarget</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value;</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">() {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 触发回调函数，通知数据变化</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行回调函数</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isObject</span><span style="color:#24292E;">(value) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.deep) {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 触发回调函数</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">cb</span><span style="color:#24292E;">(value, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value);</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>这段代码展示了<code>Watcher</code>的关键部分，包括<code>get</code>方法用于获取数据和触发依赖项追踪，以及<code>update</code>和<code>run</code>方法用于触发回调函数。</p><h3 id="watch使用" tabindex="-1">watch使用 <a class="header-anchor" href="#watch使用" aria-label="Permalink to &quot;watch使用&quot;">​</a></h3><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;Count: {{ count }}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;Doubled Count: {{ doubledCount }}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;incrementCount&quot;</span><span style="color:#E1E4E8;">&gt;Increment Count&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, watch } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">doubledCount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">incrementCount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  count.value</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(count, (</span><span style="color:#FFAB70;">newVal</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 监听 count 的变化</span></span>\n<span class="line"><span style="color:#E1E4E8;">  doubledCount.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newVal </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;Count: {{ count }}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;Doubled Count: {{ doubledCount }}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;incrementCount&quot;</span><span style="color:#24292E;">&gt;Increment Count&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref, watch } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">count</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">doubledCount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">incrementCount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  count.value</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(count, (</span><span style="color:#E36209;">newVal</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 监听 count 的变化</span></span>\n<span class="line"><span style="color:#24292E;">  doubledCount.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newVal </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span>\n<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>在这个示例中，我们使用 <code>&lt;script setup&gt;</code> 来导入 <code>ref</code> 和 <code>watch</code>，并创建了 <code>count</code> 和 <code>doubledCount</code> 的响应式变量。然后，我们使用 <code>watch</code> 来监听 <code>count</code> 的变化，并在 <code>count</code> 变化时更新 <code>doubledCount</code> 的值。</p><h2 id="computed" tabindex="-1">Computed <a class="header-anchor" href="#computed" aria-label="Permalink to &quot;Computed&quot;">​</a></h2><p><code>computed</code>的工作原理与<code>watch</code> 有一些差异。<code>computed</code>允许派生出一个新的计算属性，它依赖于其他响应式数据。当你定义一个<code>computed</code>属性时，Vue会建立一个依赖关系，将该计算属性关联到其依赖项。计算属性的值仅在其依赖项发生变化时重新计算，并且在多次访问时会返回缓存的结果。这可以减少不必要的计算，提高性能。</p><h3 id="源码分析-1" tabindex="-1">源码分析 <a class="header-anchor" href="#源码分析-1" aria-label="Permalink to &quot;源码分析&quot;">​</a></h3><p>在Vue 3的源码中，<code>computed</code>的实现主要依赖于<code>createComputed</code>函数和<code>ComputedRefImpl</code>类。相关部分位于<code>vue/src/reactivity/src/computed.ts</code>文件中。</p><ul><li><code>createComputed</code>函数负责创建<code>ComputedRefImpl</code>实例，接收计算函数和其他选项。</li><li><code>ComputedRefImpl</code>类是<code>computed</code>的核心，它包装了计算函数并实现了缓存机制。计算函数的执行和结果的缓存是通过Vue的响应式系统实现的。</li><li><code>ComputedRefImpl</code>实例在内部维护一个缓存，当依赖的数据变化时，它会重新计算并更新缓存。</li></ul><h4 id="解读-1" tabindex="-1">解读 <a class="header-anchor" href="#解读-1" aria-label="Permalink to &quot;解读&quot;">​</a></h4><p>1、在<code>vue/src/reactivity/src/computed.ts</code>中，<code>computed</code>函数负责创建<code>ComputedRefImpl</code>实例，如下所示：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">export function computed&lt;T&gt;(</span></span>\n<span class="line"><span style="color:#e1e4e8;">  getter: ComputedGetter&lt;T&gt;,</span></span>\n<span class="line"><span style="color:#e1e4e8;">  options?: ComputedOptions</span></span>\n<span class="line"><span style="color:#e1e4e8;">): ComputedRef&lt;T&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">  // 创建一个computed实例</span></span>\n<span class="line"><span style="color:#e1e4e8;">  const c = new ComputedRefImpl(getter, options);</span></span>\n<span class="line"><span style="color:#e1e4e8;">  // ...</span></span>\n<span class="line"><span style="color:#e1e4e8;">  return c;</span></span>\n<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">export function computed&lt;T&gt;(</span></span>\n<span class="line"><span style="color:#24292e;">  getter: ComputedGetter&lt;T&gt;,</span></span>\n<span class="line"><span style="color:#24292e;">  options?: ComputedOptions</span></span>\n<span class="line"><span style="color:#24292e;">): ComputedRef&lt;T&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">  // 创建一个computed实例</span></span>\n<span class="line"><span style="color:#24292e;">  const c = new ComputedRefImpl(getter, options);</span></span>\n<span class="line"><span style="color:#24292e;">  // ...</span></span>\n<span class="line"><span style="color:#24292e;">  return c;</span></span>\n<span class="line"><span style="color:#24292e;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这段代码创建了一个<code>ComputedRefImpl</code>实例，其中<code>getter</code>是计算函数，<code>options</code>包含一些选项。</p><p>2、<code>ComputedRefImpl</code>的核心工作是负责追踪依赖项和缓存计算结果。下面是一个简化的示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">class ComputedRefImpl&lt;T&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">  // ...</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">  get value() {</span></span>\n<span class="line"><span style="color:#e1e4e8;">    // 如果依赖项发生变化，或者值尚未计算</span></span>\n<span class="line"><span style="color:#e1e4e8;">    if (this.dirty) {</span></span>\n<span class="line"><span style="color:#e1e4e8;">      // 清除之前的依赖项</span></span>\n<span class="line"><span style="color:#e1e4e8;">      cleanup(this);</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      // 设置当前的computed属性为活动属性</span></span>\n<span class="line"><span style="color:#e1e4e8;">      track(this);</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      // 执行计算函数，获取新值</span></span>\n<span class="line"><span style="color:#e1e4e8;">      this.value = this.effect();</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      // 标记computed属性为已计算</span></span>\n<span class="line"><span style="color:#e1e4e8;">      this.dirty = false;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      // 清理并设置新的依赖项</span></span>\n<span class="line"><span style="color:#e1e4e8;">      stop(this);</span></span>\n<span class="line"><span style="color:#e1e4e8;">    }</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    // 返回缓存的值</span></span>\n<span class="line"><span style="color:#e1e4e8;">    return this.value;</span></span>\n<span class="line"><span style="color:#e1e4e8;">  }</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">  // ...</span></span>\n<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">class ComputedRefImpl&lt;T&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">  // ...</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">  get value() {</span></span>\n<span class="line"><span style="color:#24292e;">    // 如果依赖项发生变化，或者值尚未计算</span></span>\n<span class="line"><span style="color:#24292e;">    if (this.dirty) {</span></span>\n<span class="line"><span style="color:#24292e;">      // 清除之前的依赖项</span></span>\n<span class="line"><span style="color:#24292e;">      cleanup(this);</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      // 设置当前的computed属性为活动属性</span></span>\n<span class="line"><span style="color:#24292e;">      track(this);</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      // 执行计算函数，获取新值</span></span>\n<span class="line"><span style="color:#24292e;">      this.value = this.effect();</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      // 标记computed属性为已计算</span></span>\n<span class="line"><span style="color:#24292e;">      this.dirty = false;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      // 清理并设置新的依赖项</span></span>\n<span class="line"><span style="color:#24292e;">      stop(this);</span></span>\n<span class="line"><span style="color:#24292e;">    }</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    // 返回缓存的值</span></span>\n<span class="line"><span style="color:#24292e;">    return this.value;</span></span>\n<span class="line"><span style="color:#24292e;">  }</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">  // ...</span></span>\n<span class="line"><span style="color:#24292e;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>这段代码展示了<code>ComputedRefImpl</code>的核心工作流程：</p><ol><li>当首次访问<code>computed</code>属性或相关依赖项发生变化时，<code>computed</code>属性会被标记为&quot;dirty&quot;（未计算）。</li><li>在获取属性值时，<code>value</code>的<code>getter</code>函数会被触发。</li><li>在获取属性值时，Vue会清除先前的依赖项，然后重新追踪新的依赖项。</li><li>计算函数(<code>effect</code>)会被执行，以获取新的值。</li><li>新的值会被缓存，同时<code>dirty</code>标志会被设置为<code>false</code>，表示已计算。</li><li>新的依赖项会被清理，并新的依赖项会被追踪。</li></ol><p>这个缓存机制确保了<code>computed</code>属性的值只有在相关依赖项发生变化时才会重新计算，提高了性能并减少不必要的计算。</p><h3 id="computed使用" tabindex="-1">Computed使用 <a class="header-anchor" href="#computed使用" aria-label="Permalink to &quot;Computed使用&quot;">​</a></h3><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;Count: {{ count }}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;Doubled Count: {{ doubledCount }}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;incrementCount&quot;</span><span style="color:#E1E4E8;">&gt;Increment Count&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, computed } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">doubledCount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">computed</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 计算属性，依赖于 count</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> count.value </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">incrementCount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  count.value</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;Count: {{ count }}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;Doubled Count: {{ doubledCount }}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;incrementCount&quot;</span><span style="color:#24292E;">&gt;Increment Count&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref, computed } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">count</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">doubledCount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">computed</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 计算属性，依赖于 count</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> count.value </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">incrementCount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  count.value</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">};</span></span>\n<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>在这个示例中，我们同样使用 <code>&lt;script setup&gt;</code> 来导入 <code>ref</code> 和 <code>computed</code>，并创建了 <code>count</code> 和 <code>doubledCount</code> 的响应式变量。然后，我们使用 <code>computed</code> 来创建计算属性 <code>doubledCount</code>，该属性依赖于 <code>count</code> 的值。</p><h2 id="区别与使用场景" tabindex="-1">区别与使用场景 <a class="header-anchor" href="#区别与使用场景" aria-label="Permalink to &quot;区别与使用场景&quot;">​</a></h2><p>上面我们介绍了二者之间的原理及使用方法，下面我们总结一下<code>watch</code>和<code>computed</code>之间的主要区别以及它们的使用场景。</p><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><ol><li><strong>响应方式</strong>： <ul><li><code>watch</code>用于监视数据的变化，它允许你执行副作用。</li><li><code>computed</code>用于派生出一个新的计算属性，它的值会根据依赖项的变化而变化。</li></ul></li><li><strong>缓存</strong>： <ul><li><code>watch</code>不会缓存结果，每次数据变化都会触发回调。</li><li><code>computed</code>会缓存计算结果，只有在依赖项变化时才会重新计算。</li></ul></li></ol><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><ol><li><p><strong>watch的使用场景</strong>：</p><ul><li>异步操作：当你需要在数据变化时执行异步操作，如发送网络请求。</li><li>副作用：执行一些与数据变化相关的操作，如日志记录或触发动画。</li><li>监听多个数据的变化并执行不同的操作。</li></ul></li><li><p><strong>computed的使用场景</strong>：</p><ul><li>派生属性：当你需要从现有数据派生出新的属性，以便在模板中使用。</li><li>避免重复计算：当某个计算较为昂贵，但其依赖项不经常变化时，使用<code>computed</code>可以避免不必要的计算。</li></ul></li></ol><h2 id="面试建议" tabindex="-1">面试建议 <a class="header-anchor" href="#面试建议" aria-label="Permalink to &quot;面试建议&quot;">​</a></h2><p>面试官常常会问有关<code>watch</code>和<code>computed</code>的问题，以了解你对Vue的响应式系统的理解。下面给一些小建议希望能对你有帮助：</p><ol><li><strong>理解原理</strong>：确保你理解<code>watch</code>和<code>computed</code>的工作原理以及它们与Vue的响应式系统的关系。</li><li><strong>使用示例</strong>：能够提供清晰的示例，说明如何使用<code>watch</code>和<code>computed</code>，以及何时使用它们。</li><li><strong>区别与使用场景</strong>：强调<code>watch</code>和<code>computed</code>之间的区别，以及何时选择其中之一的使用场景。</li><li><strong>性能考虑</strong>：在回答关于性能的问题时，能够解释<code>computed</code>如何帮助避免不必要的计算，并提高性能。</li><li><strong>示范经验</strong>：分享你在实际项目中使用<code>watch</code>和<code>computed</code>的经验和成功案例，这可以让面试官对你的实际技能有更好的了解。</li></ol><h3 id="学习资料推荐" tabindex="-1">学习资料推荐 <a class="header-anchor" href="#学习资料推荐" aria-label="Permalink to &quot;学习资料推荐&quot;">​</a></h3><p><img src="https://cdn.geekbuluo.com/blog/20231023/a3558f.png" alt="image-20231023190146036"></p><p><img src="https://cdn.geekbuluo.com/blog/20231023/d6d38b.png" alt="image-20231023190222291"></p><p>学习资料关注公众号<code>前端大湿兄</code>后台回复：<code> 学习资源</code>免费领取哦~</p>',49);const u=s(E,[["render",function(s,o,c,t,r,E){const u=n("ArticleMetadata"),d=n("ClientOnly");return a(),l("div",null,[y,p(d,null,{default:e((()=>[p(u)])),_:1}),i])}]]);export{r as __pageData,u as default};
