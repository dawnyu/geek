import{_ as s,C as n,o as a,c as l,H as p,w as o,k as e,a as r,Q as t}from"./chunks/framework.f92cd432.js";const c=JSON.parse('{"title":"前端优雅处理大数运算","description":"","frontmatter":{"layout":"Article","title":"前端优雅处理大数运算","date":"2023/10/16","tags":"JavaScript","category":"技术专栏","preview":"/common/3.jpg","intro":"最近作为面试官在面试的前端候选人时，我出了这样一道题:“请用JavaScript实现一个函数,实现两个1000位长度的数字相加。”候选人思考了很久,还是无法给出一个优雅的实现方案。在编程中处理大数运算一直是考察开发者编程思维的一个重要题型。本文我们将探讨 JavaScript 中的大数字相加问题，希望对读者有所帮助。"},"headers":[],"relativePath":"article/前端优雅处理大数运算.md","filePath":"全部文档/技术专栏/前端/前端优雅处理大数运算.md","lastUpdated":1697510840000}'),E={name:"article/前端优雅处理大数运算.md"},y=e("h1",{id:"前端优雅处理大数运算",tabindex:"-1"},[r("前端优雅处理大数运算 "),e("a",{class:"header-anchor",href:"#前端优雅处理大数运算","aria-label":'Permalink to "前端优雅处理大数运算"'},"​")],-1),i=t('<p><strong>引言</strong></p><blockquote><p>文章首发公众号「前端大湿兄」，欢迎关注。 最近作为面试官在面试的前端候选人时，我出了这样一道题: <code>“请用JavaScript实现一个函数,实现两个1000位长度的数字相加。”</code> 候选人思考了很久,还是无法给出一个优雅的实现方案。在编程中处理大数运算一直是考察开发者编程思维的一个重要题型。本文我们将探讨 JavaScript 中的大数字相加问题，希望对读者有所帮助。</p></blockquote><p><strong>1. 了解大数问题</strong></p><p>在计算中，我们经常需要处理整数，但 JavaScript 的 Number 类型有其限制。当数字超出其表示范围时，会出现精度丢失的问题。这就是大数问题的实际意义。例如，试着在 JavaScript 中执行以下操作：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">largeNumber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9999999999999999999999999999999999999999999999999999999999999999999</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(largeNumber </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 输出：10000000000000000000000000000000000000000000000000000000000000000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">largeNumber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9999999999999999999999999999999999999999999999999999999999999999999</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(largeNumber </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 输出：10000000000000000000000000000000000000000000000000000000000000000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在这个示例中，即使我们添加了 1，结果仍然不正确。这是因为 JavaScript 的 Number 类型无法表示如此大的整数，而且精度被限制在 IEEE 754 双精度浮点数的范围内。</p><p><strong>2. 用字符串表示大数</strong></p><p>为了解决大数问题，我们可以使用字符串来表示大数。字符串没有固定的上限，可以容纳大数。例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">largeNumber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;9999999999999999999999999999999999999999999999999999999999999999999&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">addLargeNumbers</span><span style="color:#E1E4E8;">(largeNumber, </span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 输出：&#39;10000000000000000000000000000000000000000000000000000000000000000&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">largeNumber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;9999999999999999999999999999999999999999999999999999999999999999999&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">addLargeNumbers</span><span style="color:#24292E;">(largeNumber, </span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 输出：&#39;10000000000000000000000000000000000000000000000000000000000000000&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>3. 实现大数相加算法</strong></p><p>大数相加的关键在于算法。我们可以逐位相加，同时处理进位。以下是一个 JavaScript 函数，用于实现大数相加：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addLargeNumbers</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">num1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">num2</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  num1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> num1.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  num2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> num2.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> carry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> maxLength </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(num1.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">, num2.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> maxLength; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">digit1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(num1[num1.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> i] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">digit2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(num2[num2.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> i] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> digit1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> digit2 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> carry;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    carry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">floor</span><span style="color:#E1E4E8;">(sum </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (sum </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> result;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (carry </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> carry </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> result;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addLargeNumbers</span><span style="color:#24292E;">(</span><span style="color:#E36209;">num1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">num2</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  num1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num1.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">  num2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num2.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> carry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> maxLength </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(num1.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">, num2.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> maxLength; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">digit1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(num1[num1.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> i] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">digit2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(num2[num2.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> i] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> digit1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> digit2 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> carry;</span></span>\n<span class="line"><span style="color:#24292E;">    carry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(sum </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (sum </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> result;</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (carry </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> carry </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> result;</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><strong>4. 性能和优化</strong></p><p>虽然这个算法有效解决我们的问题，但在处理非常大的数字时，性能问题是一个绕不开的话题。在实际项目中，可以考虑一些性能优化方法，如并行计算、记忆化、缓存等，以降低大数相加对程序性能的影响。</p><p><strong>5. 示例和应用场景</strong></p><p>大数字相加的应用场景比较广泛，特别是在需要处理非常大的整数或浮点数时。以下举一些常见应用场景：</p><ol><li><p><strong>金融和会计系统</strong>：金融领域经常需要处理非常大的货币金额或精确的财务计算。大数相加用于计算总账、利息、复利等。</p></li><li><p><strong>密码学</strong>：在密码学中，大数相加是一种基本操作。它用于生成、解密和签署加密消息，以确保数据的机密性和完整性。</p></li><li><p><strong>科学计算</strong>：科学研究和工程领域经常需要进行复杂的数值计算，其中包括了大量大数字的加法操作。这包括模拟、模型求解、统计分析等。</p></li><li><p><strong>物理引擎</strong>：物理引擎通常涉及对粒子系统、碰撞检测和模拟的大量数值计算。这些操作需要处理大数字以获得准确的结果。</p></li><li><p><strong>大数据处理</strong>：在大数据领域，处理大量数据通常涉及到大数字的操作，例如对数据的聚合、统计和计算总和。</p></li><li><p><strong>工程建模</strong>：在工程领域，建模和仿真通常需要处理大数字，以执行复杂的计算，如结构分析、流体力学和电路模拟。</p></li><li><p><strong>电信和通信</strong>：在电信和通信领域，大数字相加用于处理大量的通信数据，例如信号处理和传输控制。</p><p>这些仅仅是大数字相加的一些应用场景示例，实际上，几乎在所有需要处理大数值的领域都会涉及到这种操作。</p></li></ol><p><strong>最后</strong></p><p>处理大数是前端和后端开发中的重要技能。通过使用字符串表示和逐位相加的算法，我们可以在 JavaScript 中无虑数字精度问题。希望这篇文章能给读者们一点帮助和启发，有用的话点个关注收藏吧。</p>',19);const u=s(E,[["render",function(s,e,r,t,c,E){const u=n("ArticleMetadata"),F=n("ClientOnly");return a(),l("div",null,[y,p(F,null,{default:o((()=>[p(u)])),_:1}),i])}]]);export{c as __pageData,u as default};
