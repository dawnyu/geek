import{_ as s,C as n,o as a,c as p,H as l,w as e,k as o,a as c,Q as r}from"./chunks/framework.f92cd432.js";const t=JSON.parse('{"title":"观察者模式","description":"","frontmatter":{"createTime":"2022/11/06","tags":"js,面试题,设计模式"},"headers":[],"relativePath":"interview-question/观察者模式.md","filePath":"全部文档/前端面试题/设计模式/观察者模式.md","lastUpdated":1696860910000}'),i={name:"interview-question/观察者模式.md"},E=o("h1",{id:"观察者模式",tabindex:"-1"},[c("观察者模式 "),o("a",{class:"header-anchor",href:"#观察者模式","aria-label":'Permalink to "观察者模式"'},"​")],-1),y=r('<h2 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h2><p>假设我们在开发一款外卖网站，进入网站的时候，第一步需要去请求后端接口得到用户的常用外卖地址。然后再去请求其他接口、渲染页面。如果什么都不考虑可能会直接这样写：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// getAddress 异步请求</span></span>\n<span class="line"><span style="color:#6A737D;">// 页面里有三个模块 A，B，C 需要拿到地址后再进行下一步</span></span>\n<span class="line"><span style="color:#6A737D;">// A、B、C 三个模块都是不同人写的，提供了不同的方法供我们调用</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">address</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> res.address;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(address)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">B</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(address)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">C</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">change</span><span style="color:#E1E4E8;">(address)</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// getAddress 异步请求</span></span>\n<span class="line"><span style="color:#6A737D;">// 页面里有三个模块 A，B，C 需要拿到地址后再进行下一步</span></span>\n<span class="line"><span style="color:#6A737D;">// A、B、C 三个模块都是不同人写的，提供了不同的方法供我们调用</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">address</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> res.address;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">A</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(address)</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">B</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(address)</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">C</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">change</span><span style="color:#24292E;">(address)</span></span>\n<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>此时页面里多了一个模块 <code>D</code> ，同样需要拿到地址后进行下一步操作，我们只好去翻请求地址的代码把 <code>D</code> 模块的调用补上。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// getAddress 异步请求</span></span>\n<span class="line"><span style="color:#6A737D;">// 页面里有三个模块 A，B，C 需要拿到地址后再进行下一步</span></span>\n<span class="line"><span style="color:#6A737D;">// A、B、C 三个模块都是不同人写的，提供了不同的方法供我们调用</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">address</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> res.address;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(address)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">B</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(address)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">C</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">change</span><span style="color:#E1E4E8;">(address)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">D</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(address)</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// getAddress 异步请求</span></span>\n<span class="line"><span style="color:#6A737D;">// 页面里有三个模块 A，B，C 需要拿到地址后再进行下一步</span></span>\n<span class="line"><span style="color:#6A737D;">// A、B、C 三个模块都是不同人写的，提供了不同的方法供我们调用</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">address</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> res.address;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">A</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(address)</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">B</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(address)</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">C</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">change</span><span style="color:#24292E;">(address)</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">D</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(address)</span></span>\n<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可以看到各个模块和获取地址模块耦合严重，<code>A</code>、<code>B</code>、<code>C</code> 模块有变化或者有新增模块，都需要深入到获取地址的代码去修改，一不小心可能就改出问题了。</p><p>此时就需要观察者模式了。</p><h2 id="设计模式定义" tabindex="-1">设计模式定义 <a class="header-anchor" href="#设计模式定义" aria-label="Permalink to &quot;设计模式定义&quot;">​</a></h2><p>可以看下 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FObserver_pattern%23cite_note-5" title="https://en.wikipedia.org/wiki/Observer_pattern#cite_note-5" target="_blank" rel="noreferrer">维基百科</a>的介绍：</p><blockquote><p>The <strong>observer pattern</strong> is a <a href="https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSoftware_design_pattern" title="https://en.wikipedia.org/wiki/Software_design_pattern" target="_blank" rel="noreferrer">software design pattern</a> in which an <a href="https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FObject_(computer_science)%23Objects_in_object-oriented_programming" title="https://en.wikipedia.org/wiki/Object_(computer_science)#Objects_in_object-oriented_programming" target="_blank" rel="noreferrer">object</a>, named the <strong>subject</strong>, maintains a list of its dependents, called <strong>observers</strong>, and notifies them automatically of any state changes, usually by calling one of their <a href="https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMethod_(computer_science)" title="https://en.wikipedia.org/wiki/Method_(computer_science)" target="_blank" rel="noreferrer">methods</a>.</p></blockquote><p>很好理解的一个设计模式，有一个 <code>subject</code> 对象，然后有很多 <code>observers</code> 观察者对象，当 <code>subject</code> 对象有变化的时候去通知 <code>observer</code> 对象即可。</p><p>再看一下 <code>UML</code> 图和时序图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33ea1b54f55b4565846dcbf43fab5db0~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="image-20220127110751274"></p><p>每一个观察者都实现了 <code>update</code> 方法，并且调用 <code>Subject</code> 对象的 <code>attach</code> 方法订阅变化。当 <code>Subject</code> 变化时，调用 <code>Observer</code> 的 <code>update</code> 方法去通知观察者。</p><p>先用 <code>java</code> 写一个简单的例子：</p><p>公众号文章可以看作是 <code>Subject</code> ，会不定期更新。然后每一个用户都是一个 <code>Observer</code> ，订阅公众号，当更新的时候就可以第一时间收到消息。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.ArrayList;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">interface Observer {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    public void update();</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 提取 Subject 的公共部分</span></span>\n<span class="line"><span style="color:#E1E4E8;">abstract class Subject {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    private ArrayList&lt;Observer&gt; list = new ArrayList&lt;Observer&gt;();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    public void attach(Observer observer){</span></span>\n<span class="line"><span style="color:#E1E4E8;">        list.add(observer);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    public void detach(Observer observer){</span></span>\n<span class="line"><span style="color:#E1E4E8;">        list.remove(observer);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    public void notifyObserver(){</span></span>\n<span class="line"><span style="color:#E1E4E8;">        for(Observer observer : list){</span></span>\n<span class="line"><span style="color:#E1E4E8;">            observer.update();</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 具体的公众号，提供写文章和得到文章</span></span>\n<span class="line"><span style="color:#E1E4E8;">class WindLiang extends Subject {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    private String post;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    public void writePost(String p) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        post = p;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    public String getPost() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        return post;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 小明</span></span>\n<span class="line"><span style="color:#E1E4E8;">class XiaoMing implements Observer {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    private WindLiang subject;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    XiaoMing(WindLiang sub) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        subject = sub;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    @Override</span></span>\n<span class="line"><span style="color:#E1E4E8;">    public void update(){</span></span>\n<span class="line"><span style="color:#E1E4E8;">        String post = subject.getPost();</span></span>\n<span class="line"><span style="color:#E1E4E8;">        System.out.println(&quot;我收到了&quot; + post + &quot; 并且点了个赞&quot;);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 小杨</span></span>\n<span class="line"><span style="color:#E1E4E8;">class XiaoYang implements Observer {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    private WindLiang subject;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    XiaoYang(WindLiang sub) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        subject = sub;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    @Override</span></span>\n<span class="line"><span style="color:#E1E4E8;">    public void update(){</span></span>\n<span class="line"><span style="color:#E1E4E8;">        String post = subject.getPost();</span></span>\n<span class="line"><span style="color:#E1E4E8;">        System.out.println(&quot;我收到了&quot; + post + &quot; 并且转发了&quot;);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 小刚</span></span>\n<span class="line"><span style="color:#E1E4E8;">class XiaoGang implements Observer {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    private WindLiang subject;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    XiaoGang(WindLiang sub) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        subject = sub;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    @Override</span></span>\n<span class="line"><span style="color:#E1E4E8;">    public void update(){</span></span>\n<span class="line"><span style="color:#E1E4E8;">        String post = subject.getPost();</span></span>\n<span class="line"><span style="color:#E1E4E8;">        System.out.println(&quot;我收到了&quot; + post + &quot; 并且收藏&quot;);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">public class Main {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    public static void main(String[] args) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        WindLiang windliang = new WindLiang(); </span><span style="color:#6A737D;">// Subject</span></span>\n<span class="line"><span style="color:#E1E4E8;">        XiaoMing xiaoMing = new XiaoMing(windliang);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        XiaoYang xiaoYang = new XiaoYang(windliang);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        XiaoGang xiaoGang = new XiaoGang(windliang);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 添加观察者</span></span>\n<span class="line"><span style="color:#E1E4E8;">        windliang.attach(xiaoMing);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        windliang.attach(xiaoYang);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        windliang.attach(xiaoGang);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        windliang.writePost(&quot;新文章-观察者模式，balabala&quot;); </span><span style="color:#6A737D;">// 更新文章</span></span>\n<span class="line"><span style="color:#E1E4E8;">        windliang.notifyObserver(); </span><span style="color:#6A737D;">// 通知观察者</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.ArrayList;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">interface Observer {</span></span>\n<span class="line"><span style="color:#24292E;">    public void update();</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 提取 Subject 的公共部分</span></span>\n<span class="line"><span style="color:#24292E;">abstract class Subject {</span></span>\n<span class="line"><span style="color:#24292E;">    private ArrayList&lt;Observer&gt; list = new ArrayList&lt;Observer&gt;();</span></span>\n<span class="line"><span style="color:#24292E;">    public void attach(Observer observer){</span></span>\n<span class="line"><span style="color:#24292E;">        list.add(observer);</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">    public void detach(Observer observer){</span></span>\n<span class="line"><span style="color:#24292E;">        list.remove(observer);</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">    public void notifyObserver(){</span></span>\n<span class="line"><span style="color:#24292E;">        for(Observer observer : list){</span></span>\n<span class="line"><span style="color:#24292E;">            observer.update();</span></span>\n<span class="line"><span style="color:#24292E;">        }</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 具体的公众号，提供写文章和得到文章</span></span>\n<span class="line"><span style="color:#24292E;">class WindLiang extends Subject {</span></span>\n<span class="line"><span style="color:#24292E;">    private String post;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    public void writePost(String p) {</span></span>\n<span class="line"><span style="color:#24292E;">        post = p;</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    public String getPost() {</span></span>\n<span class="line"><span style="color:#24292E;">        return post;</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 小明</span></span>\n<span class="line"><span style="color:#24292E;">class XiaoMing implements Observer {</span></span>\n<span class="line"><span style="color:#24292E;">    private WindLiang subject;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    XiaoMing(WindLiang sub) {</span></span>\n<span class="line"><span style="color:#24292E;">        subject = sub;</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">    @Override</span></span>\n<span class="line"><span style="color:#24292E;">    public void update(){</span></span>\n<span class="line"><span style="color:#24292E;">        String post = subject.getPost();</span></span>\n<span class="line"><span style="color:#24292E;">        System.out.println(&quot;我收到了&quot; + post + &quot; 并且点了个赞&quot;);</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 小杨</span></span>\n<span class="line"><span style="color:#24292E;">class XiaoYang implements Observer {</span></span>\n<span class="line"><span style="color:#24292E;">    private WindLiang subject;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    XiaoYang(WindLiang sub) {</span></span>\n<span class="line"><span style="color:#24292E;">        subject = sub;</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">    @Override</span></span>\n<span class="line"><span style="color:#24292E;">    public void update(){</span></span>\n<span class="line"><span style="color:#24292E;">        String post = subject.getPost();</span></span>\n<span class="line"><span style="color:#24292E;">        System.out.println(&quot;我收到了&quot; + post + &quot; 并且转发了&quot;);</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 小刚</span></span>\n<span class="line"><span style="color:#24292E;">class XiaoGang implements Observer {</span></span>\n<span class="line"><span style="color:#24292E;">    private WindLiang subject;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    XiaoGang(WindLiang sub) {</span></span>\n<span class="line"><span style="color:#24292E;">        subject = sub;</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">    @Override</span></span>\n<span class="line"><span style="color:#24292E;">    public void update(){</span></span>\n<span class="line"><span style="color:#24292E;">        String post = subject.getPost();</span></span>\n<span class="line"><span style="color:#24292E;">        System.out.println(&quot;我收到了&quot; + post + &quot; 并且收藏&quot;);</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">public class Main {</span></span>\n<span class="line"><span style="color:#24292E;">    public static void main(String[] args) {</span></span>\n<span class="line"><span style="color:#24292E;">        WindLiang windliang = new WindLiang(); </span><span style="color:#6A737D;">// Subject</span></span>\n<span class="line"><span style="color:#24292E;">        XiaoMing xiaoMing = new XiaoMing(windliang);</span></span>\n<span class="line"><span style="color:#24292E;">        XiaoYang xiaoYang = new XiaoYang(windliang);</span></span>\n<span class="line"><span style="color:#24292E;">        XiaoGang xiaoGang = new XiaoGang(windliang);</span></span>\n<span class="line"><span style="color:#24292E;">      </span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 添加观察者</span></span>\n<span class="line"><span style="color:#24292E;">        windliang.attach(xiaoMing);</span></span>\n<span class="line"><span style="color:#24292E;">        windliang.attach(xiaoYang);</span></span>\n<span class="line"><span style="color:#24292E;">        windliang.attach(xiaoGang);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">        windliang.writePost(&quot;新文章-观察者模式，balabala&quot;); </span><span style="color:#6A737D;">// 更新文章</span></span>\n<span class="line"><span style="color:#24292E;">        windliang.notifyObserver(); </span><span style="color:#6A737D;">// 通知观察者</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br></div></div><p>输出结果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea29a41eb26d46d1957e203f6c81a06a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="图片"></p><p>上边的实现主要是为了符合最原始的定义，调用 <code>update</code> 的时候没有传参。如果观察者需要的参数是一致的，其实这里也可以直接把更新后的数据传过去，这样观察者就不需要向上边一样再去调用 <code>subject.getPost()</code> 手动拿更新后的数据了。</p><p>这两种不同的方式前者叫做拉 <code>(pull)</code> 模式，就是收到 <code>Subject</code> 的通知后，通过内部的 <code>Subject</code> 对象调用相应的方法去拿到需要的数据。</p><p>后者叫做推 <code>(push)</code> 模式，<code>Subject</code> 更新的时候就将数据推给观察者，观察者直接使用即可。</p><p>下边用 <code>js</code> 改写为推模式：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WindLiang</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> post </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;还没更新&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">attach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">update</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            list.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(update);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">detach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">update</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> findIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> list.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (list[i] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> update) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                    findIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>\n<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">                }</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (findIndex </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                list.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(findIndex, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">notifyObserver</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> list.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                list[i](post);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">writePost</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            post </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">XiaoMing</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">post</span><span style="color:#E1E4E8;">){</span></span>\n<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;我收到了&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> post </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; 并且点了个赞&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">XiaoYang</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">post</span><span style="color:#E1E4E8;">){</span></span>\n<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;我收到了&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> post </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; 并且转发了&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">XiaoGang</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">post</span><span style="color:#E1E4E8;">){</span></span>\n<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;我收到了&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> post </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; 并且收藏&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">windliang </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WindLiang</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">windliang.</span><span style="color:#B392F0;">attach</span><span style="color:#E1E4E8;">(XiaoMing.update)</span></span>\n<span class="line"><span style="color:#E1E4E8;">windliang.</span><span style="color:#B392F0;">attach</span><span style="color:#E1E4E8;">(XiaoYang.update)</span></span>\n<span class="line"><span style="color:#E1E4E8;">windliang.</span><span style="color:#B392F0;">attach</span><span style="color:#E1E4E8;">(XiaoGang.update)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">windliang.</span><span style="color:#B392F0;">writePost</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;新文章-观察者模式，balabala&quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">windliang.</span><span style="color:#B392F0;">notifyObserver</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WindLiang</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> post </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;还没更新&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">update</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">            list.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(update);</span></span>\n<span class="line"><span style="color:#24292E;">        },</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">detach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">update</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> findIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> list.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (list[i] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> update) {</span></span>\n<span class="line"><span style="color:#24292E;">                    findIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>\n<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">                }</span></span>\n<span class="line"><span style="color:#24292E;">            }</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (findIndex </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">                list.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(findIndex, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">            }</span></span>\n<span class="line"><span style="color:#24292E;">        },</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">notifyObserver</span><span style="color:#24292E;">() {</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> list.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">                list[i](post);</span></span>\n<span class="line"><span style="color:#24292E;">            }</span></span>\n<span class="line"><span style="color:#24292E;">        },</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">writePost</span><span style="color:#24292E;">(</span><span style="color:#E36209;">p</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">            post </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>\n<span class="line"><span style="color:#24292E;">        },</span></span>\n<span class="line"><span style="color:#24292E;">    };</span></span>\n<span class="line"><span style="color:#24292E;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">XiaoMing</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#E36209;">post</span><span style="color:#24292E;">){</span></span>\n<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我收到了&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> post </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; 并且点了个赞&quot;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">XiaoYang</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#E36209;">post</span><span style="color:#24292E;">){</span></span>\n<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我收到了&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> post </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; 并且转发了&quot;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">XiaoGang</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#E36209;">post</span><span style="color:#24292E;">){</span></span>\n<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我收到了&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> post </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; 并且收藏&quot;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">windliang </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WindLiang</span><span style="color:#24292E;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">windliang.</span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">(XiaoMing.update)</span></span>\n<span class="line"><span style="color:#24292E;">windliang.</span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">(XiaoYang.update)</span></span>\n<span class="line"><span style="color:#24292E;">windliang.</span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">(XiaoGang.update)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">windliang.</span><span style="color:#6F42C1;">writePost</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;新文章-观察者模式，balabala&quot;</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">windliang.</span><span style="color:#6F42C1;">notifyObserver</span><span style="color:#24292E;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div><p>在 <code>js</code> 中，我们可以直接将 <code>update</code> 方法传给 <code>Subject</code> ，同时采取推模式，调用 <code>update</code> 的时候直接将数据传给观察者，看起来会简洁很多。</p><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><p>回到开头的场景，我们可以利用观察者模式将获取地址后的一系列后续操作解耦出来。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 页面里有三个模块 A，B，C 需要拿到地址后再进行下一步</span></span>\n<span class="line"><span style="color:#6A737D;">// A、B、C 三个模块都是不同人写的，提供了不同的方法供我们调用</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">observers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>\n<span class="line"><span style="color:#6A737D;">// 注册观察者</span></span>\n<span class="line"><span style="color:#E1E4E8;">observers.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">.update)</span></span>\n<span class="line"><span style="color:#E1E4E8;">observers.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">B</span><span style="color:#E1E4E8;">.next)</span></span>\n<span class="line"><span style="color:#E1E4E8;">obervers.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">C</span><span style="color:#E1E4E8;">.change)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// getAddress 异步请求</span></span>\n<span class="line"><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">address</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> res.address;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  observers.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">update</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(address))</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 页面里有三个模块 A，B，C 需要拿到地址后再进行下一步</span></span>\n<span class="line"><span style="color:#6A737D;">// A、B、C 三个模块都是不同人写的，提供了不同的方法供我们调用</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">observers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>\n<span class="line"><span style="color:#6A737D;">// 注册观察者</span></span>\n<span class="line"><span style="color:#24292E;">observers.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">A</span><span style="color:#24292E;">.update)</span></span>\n<span class="line"><span style="color:#24292E;">observers.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">B</span><span style="color:#24292E;">.next)</span></span>\n<span class="line"><span style="color:#24292E;">obervers.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">C</span><span style="color:#24292E;">.change)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// getAddress 异步请求</span></span>\n<span class="line"><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">address</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> res.address;</span></span>\n<span class="line"><span style="color:#24292E;">  observers.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">update</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(address))</span></span>\n<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>通过观察者模式我们将获取地址后的操作解耦了出来，未来有新增模块只需要注册观察者即可。</p><p>当 <code>getAddress</code> 很复杂的时候，通过观察者模式会使得未来的改动变得清晰，不会影响到 <code>getAddress</code> 的逻辑。</p><p>必要的话也可以把 <code>observers</code> 抽离到一个新的文件作为一个新模块，防止让一个文件变得过于臃肿。</p>',31);const b=s(i,[["render",function(s,o,c,r,t,i){const b=n("ArticleMetadata"),u=n("ClientOnly");return a(),p("div",null,[E,l(u,null,{default:e((()=>[l(b)])),_:1}),y])}]]);export{t as __pageData,b as default};
