import{_ as s,C as n,o as a,c as l,H as p,w as e,k as o,a as t,Q as c}from"./chunks/framework.80346561.js";const r=JSON.parse('{"title":"hooks","description":"","frontmatter":{"createTime":"2022/11/06","tag":"React,面试题"},"headers":[],"relativePath":"interview-question/react hooks.md","filePath":"s/前端面试题/react/react hooks.md","lastUpdated":1696495218000}'),y={name:"interview-question/react hooks.md"},i=o("h1",{id:"hooks",tabindex:"-1"},[t("hooks "),o("a",{class:"header-anchor",href:"#hooks","aria-label":'Permalink to "hooks"'},"​")],-1),E=c('<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddea1c732cfb425da5bedbb2dc1295fe~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="深入 Hooks.png"></p><h2 id="自定义hooks是什么" tabindex="-1">自定义Hooks是什么？ <a class="header-anchor" href="#自定义hooks是什么" aria-label="Permalink to &quot;自定义Hooks是什么？&quot;">​</a></h2><p><code>react-hooks</code>是<code>React16.8</code>以后新增的钩子API，目的是增加代码的可复用性、逻辑性，最主要的是解决了<strong>函数式组件无状态的问题</strong>，这样既保留了函数式的简单，又解决了没有数据管理状态的缺陷</p><p>那么什么是自定义hooks呢？</p><p><code>自定义hooks</code>是在<code>react-hooks</code>基础上的一个扩展，可以根据业务、需求去制定相应的<code>hooks</code>,将常用的逻辑进行封装，从而具备复用性</p><h2 id="如何设计一个自定义hooks" tabindex="-1">如何设计一个自定义Hooks <a class="header-anchor" href="#如何设计一个自定义hooks" aria-label="Permalink to &quot;如何设计一个自定义Hooks&quot;">​</a></h2><p><code>hooks</code>本质上是一个<strong>函数</strong>，而这个函数主要就是<strong>逻辑复用</strong>，我们首先要知道一件事，<code>hooks</code>的驱动条件是什么？</p><p>其实就是<code>props</code>的修改，<code>useState</code>、<code>useReducer</code>的使用是无状态组件更新的条件，从而驱动自定义hooks</p><h2 id="通用模式" tabindex="-1">通用模式 <a class="header-anchor" href="#通用模式" aria-label="Permalink to &quot;通用模式&quot;">​</a></h2><p>自定义hooks的名称是以<strong>use</strong>开头，我们设计为：</p><blockquote><p>const [ xxx, ...] = useXXX(参数一，参数二...)</p></blockquote><h2 id="简单的小例子-usepow" tabindex="-1">简单的小例子：usePow <a class="header-anchor" href="#简单的小例子-usepow" aria-label="Permalink to &quot;简单的小例子：usePow&quot;">​</a></h2><p>我们先写一个简单的小例子来了解下<code>自定义hooks</code></p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// usePow.ts</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Index</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">list</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">[]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">pow</span><span style="color:#E1E4E8;">(item, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  })</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Index;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// index.tsx</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Button } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;antd-mobile&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React,{ useState } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { usePow } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/components&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Index</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">FC</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">flag</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setFlag</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">usePow</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">])</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;数字：{</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(data)}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">color</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;primary&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span><span style="color:#B392F0;">setFlag</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">v)}}&gt;切换&lt;/</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;切换状态：{</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(flag)}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Index;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// usePow.ts</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Index</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">list</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">[]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(item, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">  })</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Index;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// index.tsx</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Button } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;antd-mobile&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React,{ useState } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { usePow } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/components&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Index</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">FC</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">props</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">flag</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setFlag</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">&gt;(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">usePow</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">])</span></span>\n<span class="line"><span style="color:#24292E;">  </span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>\n<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;数字：{</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(data)}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">Button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">color</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;primary&#39;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span><span style="color:#6F42C1;">setFlag</span><span style="color:#24292E;">(</span><span style="color:#E36209;">v</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">v)}}&gt;切换&lt;/</span><span style="color:#005CC5;">Button</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;切换状态：{</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(flag)}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">  );</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Index;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>我们简单的写了个 <code>usePow</code>，我们通过 <code>usePow</code> 给所传入的数字平方, 用切换状态的按钮表示函数内部的状态，我们来看看此时的效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d21cc3b15e24a8fba7a7cf3f2a89d14~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="img2.gif"></p><p>我们发现了一个问题，为什么点击切换按钮也会触发<code>console.log(1)</code>呢？</p><p>这样明显增加了性能开销，我们的理想状态肯定不希望做无关的渲染，所以我们做自定义 <code>hooks</code>的时候一定要注意，需要<strong>减少性能开销</strong>,我们为组件加入 <code>useMemo</code>试试：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useMemo } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Index</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">list</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">[]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useMemo</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">pow</span><span style="color:#E1E4E8;">(item, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }), []) </span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Index;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useMemo } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Index</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">list</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">[]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useMemo</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(item, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">      }), []) </span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Index;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3e583fe589a4dacbb0a5a72b2e99cef~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="img3.gif"></p><p>发现此时就已经解决了这个问题，所以要非常注意一点，一个好用的自定义<code>hooks</code>,一定要配合<code>useMemo</code>、<code>useCallback</code>等 Api 一起使用。</p><h2 id="玩转react-hooks" tabindex="-1">玩转React Hooks <a class="header-anchor" href="#玩转react-hooks" aria-label="Permalink to &quot;玩转React Hooks&quot;">​</a></h2><p>在上述中我们讲了用 <code>useMemo</code>来处理无关的渲染，接下来我们一起来看看<code>React Hooks</code>的这些钩子的妙用（这里建议先熟知、并使用对应的<code>React Hooks</code>,才能造出好的钩子）</p><h2 id="usememo" tabindex="-1">useMemo <a class="header-anchor" href="#usememo" aria-label="Permalink to &quot;useMemo&quot;">​</a></h2><p>当一个父组件中调用了一个子组件的时候，父组件的 state 发生变化，会导致父组件更新，而子组件虽然没有发生改变，但也会进行更新。</p><p>简单的理解下，当一个页面内容非常复杂，模块非常多的时候，函数式组件会<strong>从头更新到尾</strong>，只要一处改变，所有的模块都会进行刷新，这种情况显然是没有必要的。</p><p>我们理想的状态是各个模块只进行自己的更新，不要相互去影响，那么此时用<code>useMemo</code>是最佳的解决方案。</p><p>这里要尤其注意一点，<strong>只要父组件的状态更新，无论有没有对自组件进行操作，子组件都会进行更新</strong>，<code>useMemo</code>就是为了防止这点而出现的</p><p>在讲 <code>useMemo</code> 之前，我们先说说<code>memo</code>,<code>memo</code>的作用是<strong>结合了pureComponent纯组件和 componentShouldUpdate功能</strong>，会对传入的props进行一次对比，然后根据第二个函数返回值来进一步判断哪些props需要更新。（具体使用会在下文讲到～）</p><p><code>useMemo</code>与<code>memo</code>的理念上差不多，都是判断是否满足当前的限定条件来决定是否执行<code>callback</code>函数，而<code>useMemo</code>的第二个参数是一个数组，通过这个数组来判定是否更新回掉函数</p><p>这种方式可以运用在<strong>元素、组件、上下文中</strong>，尤其是利用在数组上，先看一个例子：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">useMemo</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                list.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">                    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{index}&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">                        {item.name}</span></span>\n<span class="line"><span style="color:#E1E4E8;">                    &lt;/&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">                )}</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ),[list])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">useMemo</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span></span>\n<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">            {</span></span>\n<span class="line"><span style="color:#24292E;">                list.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span></span>\n<span class="line"><span style="color:#24292E;">                    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{index}&gt;</span></span>\n<span class="line"><span style="color:#24292E;">                        {item.name}</span></span>\n<span class="line"><span style="color:#24292E;">                    &lt;/&gt;</span></span>\n<span class="line"><span style="color:#24292E;">                )}</span></span>\n<span class="line"><span style="color:#24292E;">            }</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">    ),[list])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>从上面我们看出 <code>useMemo</code>只有在<code>list</code>发生变化的时候才会进行渲染，从而减少了不必要的开销</p><p>总结一下<code>useMemo</code>的好处：</p><ul><li>可以减少不必要的循环和不必要的渲染</li><li>可以减少子组件的渲染次数</li><li>通过特地的依赖进行更新，可以避免很多不必要的开销，但要注意，有时候在配合 <code>useState</code>拿不到最新的值，这种情况可以考虑使用 <code>useRef</code>解决</li></ul><h2 id="usecallback" tabindex="-1">useCallback <a class="header-anchor" href="#usecallback" aria-label="Permalink to &quot;useCallback&quot;">​</a></h2><p><code>useCallback</code>与<code>useMemo</code>极其类似,可以说是一模一样，唯一不同的是<code>useMemo</code>返回的是函数运行的<strong>结果</strong>，而<code>useCallback</code>返回的是<strong>函数</strong></p><p>注意：这个函数是父组件传递子组件的一个函数，防止做无关的刷新，其次，这个组件必须配合<code>memo</code>,否则<strong>不但不会提升性能，还有可能降低性能</strong></p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React, { useState, useCallback } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Button } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;antd-mobile&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MockMemo</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">FC</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">setCount</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">show</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">setShow</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useCallback</span><span style="color:#E1E4E8;">(()</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">setCount</span><span style="color:#E1E4E8;">(count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },[count])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{display: </span><span style="color:#9ECBFF;">&#39;flex&#39;</span><span style="color:#E1E4E8;">, justifyContent: </span><span style="color:#9ECBFF;">&#39;flex-start&#39;</span><span style="color:#E1E4E8;">}}&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">              &lt;</span><span style="color:#79B8FF;">TestButton</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">title</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;普通点击&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setCount</span><span style="color:#E1E4E8;">(count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) }/&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">              &lt;</span><span style="color:#79B8FF;">TestButton</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">title</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;useCallback点击&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{add}/&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{marginTop: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">}}&gt;count: {count}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span><span style="color:#B392F0;">setShow</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">show)}}&gt; 切换&lt;/</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        )</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TestButton</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> React.</span><span style="color:#B392F0;">memo</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">props</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(props.title)</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">color</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;primary&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{props.onClick} </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{props.title </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;useCallback点击&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        marginLeft: </span><span style="color:#79B8FF;">20</span></span>\n<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">}&gt;{props.title}&lt;/</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> MockMemo;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React, { useState, useCallback } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Button } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;antd-mobile&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MockMemo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">FC</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">count</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">setCount</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">show</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">setShow</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">add</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useCallback</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>\n<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">setCount</span><span style="color:#24292E;">(count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">        },[count])</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>\n<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{display: </span><span style="color:#032F62;">&#39;flex&#39;</span><span style="color:#24292E;">, justifyContent: </span><span style="color:#032F62;">&#39;flex-start&#39;</span><span style="color:#24292E;">}}&gt;</span></span>\n<span class="line"><span style="color:#24292E;">              &lt;</span><span style="color:#005CC5;">TestButton</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">title</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;普通点击&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setCount</span><span style="color:#24292E;">(count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) }/&gt;</span></span>\n<span class="line"><span style="color:#24292E;">              &lt;</span><span style="color:#005CC5;">TestButton</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">title</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;useCallback点击&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{add}/&gt;</span></span>\n<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{marginTop: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">}}&gt;count: {count}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#005CC5;">Button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span><span style="color:#6F42C1;">setShow</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">show)}}&gt; 切换&lt;/</span><span style="color:#005CC5;">Button</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">          &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">        )</span></span>\n<span class="line"><span style="color:#24292E;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TestButton</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> React.</span><span style="color:#6F42C1;">memo</span><span style="color:#24292E;">((</span><span style="color:#E36209;">props</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>\n<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(props.title)</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">Button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">color</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;primary&#39;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{props.onClick} </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{props.title </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;useCallback点击&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">        marginLeft: </span><span style="color:#005CC5;">20</span></span>\n<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">}&gt;{props.title}&lt;/</span><span style="color:#005CC5;">Button</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">      })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> MockMemo;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c00efe7071b40c583a3d167d073a979~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="img2.gif"></p><p>我们可以看到，当点击切换按钮的时候，没有经过 <code>useCallback</code>封装的函数会再次刷新，而经过 <code>useCallback</code>包裹的函数不会被再次刷新</p><h2 id="useref" tabindex="-1">useRef <a class="header-anchor" href="#useref" aria-label="Permalink to &quot;useRef&quot;">​</a></h2><p><strong>useRef</strong> 可以获取当前元素的所有属性，并且返回一个可变的ref对象，并且这个对象<strong>只有current属性</strong>，可设置initialValue</p><h3 id="通过useref获取对应的属性值" tabindex="-1">通过useRef获取对应的属性值 <a class="header-anchor" href="#通过useref获取对应的属性值" aria-label="Permalink to &quot;通过useRef获取对应的属性值&quot;">​</a></h3><p>我们先看个案例：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React, { useState, useRef } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Index</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">FC</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scrollRef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">clientHeight</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setClientHeight</span><span style="color:#E1E4E8;"> ] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">scrollTop</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setScrollTop</span><span style="color:#E1E4E8;"> ] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">scrollHeight</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setScrollHeight</span><span style="color:#E1E4E8;"> ] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onScroll</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(scrollRef?.current){</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> clientHeight </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scrollRef?.current.clientHeight; </span><span style="color:#6A737D;">//可视区域高度</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> scrollTop  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scrollRef?.current.scrollTop;  </span><span style="color:#6A737D;">//滚动条滚动高度</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> scrollHeight </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scrollRef?.current.scrollHeight; </span><span style="color:#6A737D;">//滚动内容高度</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">setClientHeight</span><span style="color:#E1E4E8;">(clientHeight)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">setScrollTop</span><span style="color:#E1E4E8;">(scrollTop)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">setScrollHeight</span><span style="color:#E1E4E8;">(scrollHeight)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> &gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> &gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;可视区域高度：{clientHeight}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;滚动条滚动高度：{scrollTop}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;滚动内容高度：{scrollHeight}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{height: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, overflowY: </span><span style="color:#9ECBFF;">&#39;auto&#39;</span><span style="color:#E1E4E8;">}} </span><span style="color:#B392F0;">ref</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{scrollRef} </span><span style="color:#B392F0;">onScroll</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{onScroll} &gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{height: </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">}}&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Index;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React, { useState, useRef } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Index</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">FC</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scrollRef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRef</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt;(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">clientHeight</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setClientHeight</span><span style="color:#24292E;"> ] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">scrollTop</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setScrollTop</span><span style="color:#24292E;"> ] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">scrollHeight</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setScrollHeight</span><span style="color:#24292E;"> ] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onScroll</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(scrollRef?.current){</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> clientHeight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scrollRef?.current.clientHeight; </span><span style="color:#6A737D;">//可视区域高度</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> scrollTop  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scrollRef?.current.scrollTop;  </span><span style="color:#6A737D;">//滚动条滚动高度</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> scrollHeight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scrollRef?.current.scrollHeight; </span><span style="color:#6A737D;">//滚动内容高度</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">setClientHeight</span><span style="color:#24292E;">(clientHeight)</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">setScrollTop</span><span style="color:#24292E;">(scrollTop)</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">setScrollHeight</span><span style="color:#24292E;">(scrollHeight)</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>\n<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> &gt;</span></span>\n<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> &gt;</span></span>\n<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;可视区域高度：{clientHeight}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;滚动条滚动高度：{scrollTop}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;滚动内容高度：{scrollHeight}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{height: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, overflowY: </span><span style="color:#032F62;">&#39;auto&#39;</span><span style="color:#24292E;">}} </span><span style="color:#6F42C1;">ref</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{scrollRef} </span><span style="color:#6F42C1;">onScroll</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{onScroll} &gt;</span></span>\n<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{height: </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">}}&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">  );</span></span>\n<span class="line"><span style="color:#24292E;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Index;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>从上述可知，我们可以通过<code>useRef</code>来获取对应元素的相关属性，以此来做一些操作</p><p>效果： <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce0221becc3940ec8610783afa66f5dc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="img1.gif"></p><h3 id="缓存数据" tabindex="-1">缓存数据 <a class="header-anchor" href="#缓存数据" aria-label="Permalink to &quot;缓存数据&quot;">​</a></h3><p>除了获取对应的属性值外，<code>useRef</code>还有一点比较重要的特性，那就是 <strong>缓存数据</strong></p><p>上述讲到我们封装一个合格的<code>自定义hooks</code>的时候需要结合<strong>useMemo</strong>、<strong>useCallback</strong>等Api，但我们控制变量的值用<strong>useState</strong> 有可能会导致拿到的是旧值，并且如果他们更新会带来整个组件重新执行，这种情况下，我们使用<strong>useRef</strong>将会是一个非常不错的选择</p><p>在<code>react-redux</code>的源码中，在hooks推出后，<code>react-redux</code>用大量的<strong>useMemo</strong>重做了<strong>Provide</strong>等核心模块，其中就是运用<strong>useRef</strong>来缓存数据，并且所运用的 <strong>useRef()</strong> 没有一个是绑定在dom元素上的，都是做数据缓存用的</p><p>可以简单的来看一下：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 缓存数据</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* react-redux 用userRef 来缓存 merge之后的 props */</span><span style="color:#E1E4E8;"> </span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lastChildProps</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRef</span><span style="color:#E1E4E8;">() </span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// lastWrapperProps 用 useRef 来存放组件真正的 props信息 </span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lastWrapperProps</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRef</span><span style="color:#E1E4E8;">(wrapperProps) </span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//是否储存props是否处于正在更新状态 </span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">renderIsScheduled</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRef</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//更新数据</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">captureWrapperProps</span><span style="color:#E1E4E8;">( </span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">lastWrapperProps</span><span style="color:#E1E4E8;">, </span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">lastChildProps</span><span style="color:#E1E4E8;">, </span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">renderIsScheduled</span><span style="color:#E1E4E8;">, </span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">wrapperProps</span><span style="color:#E1E4E8;">, </span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">actualChildProps</span><span style="color:#E1E4E8;">, </span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">childPropsFromStoreUpdate</span><span style="color:#E1E4E8;">, </span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">notifyNestedSubs</span><span style="color:#E1E4E8;"> </span></span>\n<span class="line"><span style="color:#E1E4E8;">    ) { </span></span>\n<span class="line"><span style="color:#E1E4E8;">        lastWrapperProps.current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> wrapperProps </span></span>\n<span class="line"><span style="color:#E1E4E8;">        lastChildProps.current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> actualChildProps </span></span>\n<span class="line"><span style="color:#E1E4E8;">        renderIsScheduled.current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>\n<span class="line"><span style="color:#E1E4E8;">   }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 缓存数据</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* react-redux 用userRef 来缓存 merge之后的 props */</span><span style="color:#24292E;"> </span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">lastChildProps</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRef</span><span style="color:#24292E;">() </span></span>\n<span class="line"><span style="color:#24292E;">    </span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// lastWrapperProps 用 useRef 来存放组件真正的 props信息 </span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">lastWrapperProps</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRef</span><span style="color:#24292E;">(wrapperProps) </span></span>\n<span class="line"><span style="color:#24292E;">    </span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//是否储存props是否处于正在更新状态 </span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">renderIsScheduled</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRef</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//更新数据</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">captureWrapperProps</span><span style="color:#24292E;">( </span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">lastWrapperProps</span><span style="color:#24292E;">, </span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">lastChildProps</span><span style="color:#24292E;">, </span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">renderIsScheduled</span><span style="color:#24292E;">, </span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">wrapperProps</span><span style="color:#24292E;">, </span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">actualChildProps</span><span style="color:#24292E;">, </span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">childPropsFromStoreUpdate</span><span style="color:#24292E;">, </span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">notifyNestedSubs</span><span style="color:#24292E;"> </span></span>\n<span class="line"><span style="color:#24292E;">    ) { </span></span>\n<span class="line"><span style="color:#24292E;">        lastWrapperProps.current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> wrapperProps </span></span>\n<span class="line"><span style="color:#24292E;">        lastChildProps.current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> actualChildProps </span></span>\n<span class="line"><span style="color:#24292E;">        renderIsScheduled.current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>\n<span class="line"><span style="color:#24292E;">   }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>我们看到 <code>react-redux</code> 用重新赋值的方法，改变了缓存的数据源，减少了不必要的更新，如过采取<code>useState</code>势必会重新渲染</p><h3 id="uselatest" tabindex="-1">useLatest <a class="header-anchor" href="#uselatest" aria-label="Permalink to &quot;useLatest&quot;">​</a></h3><p>经过上面的讲解我们知道<code>useRef</code> 可以拿到最新值，我们可以进行简单的封装，这样做的好处是：<strong>可以随时确保获取的是最新值，并且也可以解决闭包问题</strong></p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useRef } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useLatest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">&gt;(value: T) =&gt; {</span></span>\n<span class="line"><span style="color:#E1E4E8;">     const ref </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRef</span><span style="color:#E1E4E8;">(value)</span></span>\n<span class="line"><span style="color:#E1E4E8;">     ref.current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">     return ref</span></span>\n<span class="line"><span style="color:#E1E4E8;">   };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">   export default useLatest;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useRef } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useLatest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">&gt;(value: T) =&gt; {</span></span>\n<span class="line"><span style="color:#24292E;">     const ref </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRef</span><span style="color:#24292E;">(value)</span></span>\n<span class="line"><span style="color:#24292E;">     ref.current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">     return ref</span></span>\n<span class="line"><span style="color:#24292E;">   };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">   export default useLatest;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="结合usememo和useref封装usecreation" tabindex="-1">结合useMemo和useRef封装useCreation <a class="header-anchor" href="#结合usememo和useref封装usecreation" aria-label="Permalink to &quot;结合useMemo和useRef封装useCreation&quot;">​</a></h3><p><strong>useCreation</strong> ：是 <code>useMemo</code> 或 <code>useRef</code>的替代品。换言之，<code>useCreation</code>这个钩子增强了 <code>useMemo</code> 和 <code>useRef</code>，让这个钩子可以替换这两个钩子。（来自<a href="https://link.juejin.cn/?target=https%3A%2F%2Fahooks.js.org%2Fzh-CN%2Fhooks%2Fuse-creation" title="https://ahooks.js.org/zh-CN/hooks/use-creation" target="_blank" rel="noreferrer">ahooks-useCreation</a>）</p><ul><li><code>useMemo</code>的值不一定是最新的值，但<code>useCreation</code>可以保证拿到的值一定是最新的值</li><li>对于复杂常量的创建，<code>useRef</code>容易出现潜在的的性能隐患，但<code>useCreation</code>可以避免</li></ul><p>这里的性能隐患是指：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 每次重渲染，都会执行实例化 Subject 的过程，即便这个实例立刻就被扔掉了</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRef</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Subject</span><span style="color:#E1E4E8;">()) </span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 通过 factory 函数，可以避免性能隐患</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useCreation</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Subject</span><span style="color:#E1E4E8;">(), [])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 每次重渲染，都会执行实例化 Subject 的过程，即便这个实例立刻就被扔掉了</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRef</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Subject</span><span style="color:#24292E;">()) </span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 通过 factory 函数，可以避免性能隐患</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useCreation</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Subject</span><span style="color:#24292E;">(), [])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>接下来我们来看看如何封装一个<code>useCreation</code>,首先我们要明白以下三点：</p><ul><li>第一点：先确定参数，<code>useCreation</code> 的参数与<code>useMemo</code>的一致，第一个参数是函数，第二个参数参数是可变的数组</li><li>第二点：我们的值要保存在 <code>useRef</code>中，这样可以将值缓存，从而减少无关的刷新</li><li>第三点：更新值的判断，怎么通过第二个参数来判断是否更新 <code>useRef</code>里的值。</li></ul><p>明白了一上三点我们就可以自己实现一个<code>useCreation</code></p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useRef } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> { DependencyList } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">depsAreSame</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">oldDeps</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DependencyList</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">deps</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DependencyList</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(oldDeps </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> deps) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> oldDeps.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断两个值是否是同一个值</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">(oldDeps[i], deps[i])) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useCreation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">&gt;(fn:() =&gt; T, deps: DependencyList)=&gt; {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  const { current } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRef</span><span style="color:#E1E4E8;">({ </span></span>\n<span class="line"><span style="color:#E1E4E8;">    deps,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    obj:  </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> ,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    initialized: </span><span style="color:#79B8FF;">false</span></span>\n<span class="line"><span style="color:#E1E4E8;">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">if</span><span style="color:#E1E4E8;">(current.initialized </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">depsAreSame</span><span style="color:#E1E4E8;">(current.deps, deps)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    current.deps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> deps;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    current.obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    current.initialized </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  return current.obj </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span></span>\n<span class="line"><span style="color:#E1E4E8;">} </span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">export default useCreation;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useRef } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> { DependencyList } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">depsAreSame</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">oldDeps</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DependencyList</span><span style="color:#24292E;">, </span><span style="color:#E36209;">deps</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DependencyList</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(oldDeps </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> deps) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>\n<span class="line"><span style="color:#24292E;">  </span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> oldDeps.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断两个值是否是同一个值</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">is</span><span style="color:#24292E;">(oldDeps[i], deps[i])) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useCreation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">&gt;(fn:() =&gt; T, deps: DependencyList)=&gt; {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  const { current } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRef</span><span style="color:#24292E;">({ </span></span>\n<span class="line"><span style="color:#24292E;">    deps,</span></span>\n<span class="line"><span style="color:#24292E;">    obj:  </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> ,</span></span>\n<span class="line"><span style="color:#24292E;">    initialized: </span><span style="color:#005CC5;">false</span></span>\n<span class="line"><span style="color:#24292E;">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">if</span><span style="color:#24292E;">(current.initialized </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">depsAreSame</span><span style="color:#24292E;">(current.deps, deps)) {</span></span>\n<span class="line"><span style="color:#24292E;">    current.deps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> deps;</span></span>\n<span class="line"><span style="color:#24292E;">    current.obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">    current.initialized </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  return current.obj </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span></span>\n<span class="line"><span style="color:#24292E;">} </span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">export default useCreation;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>在<code>useRef</code>判断是否更新值通过<code>initialized</code> 和 <code>depsAreSame</code>来判断，其中<code>depsAreSame</code>通过存储在 <code>useRef</code>下的<code>deps</code>(旧值) 和 新传入的 <code>deps</code>（新值）来做对比，判断两数组的数据是否一致，来确定是否更新</p><h3 id="验证-usecreation" tabindex="-1">验证 useCreation <a class="header-anchor" href="#验证-usecreation" aria-label="Permalink to &quot;验证 useCreation&quot;">​</a></h3><p>接下来我们写个小例子，来验证下 <code>useCreation</code>是否能满足我们的要求：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React, { useState } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Button } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;antd-mobile&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useCreation } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/components&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Index</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">FC</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">_</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setFlag</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getNowData</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nowData</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useCreation</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getNowData</span><span style="color:#E1E4E8;">(), []);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{padding: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">}}&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;正常的函数： {</span><span style="color:#B392F0;">getNowData</span><span style="color:#E1E4E8;">()}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;useCreation包裹后的： {nowData}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">color</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;primary&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span><span style="color:#B392F0;">setFlag</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">v)}}&gt; 渲染&lt;/</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      )</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Index;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React, { useState } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Button } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;antd-mobile&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useCreation } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/components&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Index</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">FC</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">_</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setFlag</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">&gt;(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getNowData</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">()</span></span>\n<span class="line"><span style="color:#24292E;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nowData</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useCreation</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getNowData</span><span style="color:#24292E;">(), []);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>\n<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{padding: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">}}&gt;</span></span>\n<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;正常的函数： {</span><span style="color:#6F42C1;">getNowData</span><span style="color:#24292E;">()}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;useCreation包裹后的： {nowData}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#005CC5;">Button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">color</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;primary&#39;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span><span style="color:#6F42C1;">setFlag</span><span style="color:#24292E;">(</span><span style="color:#E36209;">v</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">v)}}&gt; 渲染&lt;/</span><span style="color:#005CC5;">Button</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">      )</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Index;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa5645ef84d141878142032ae2079bdc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="useCreation.gif"></p><p>我们可以看到，当我们做无关的<code>state</code>改变的时候，正常的函数也会刷新，但<code>useCreation</code>没有刷新，从而增强了渲染的性能～</p><h2 id="useeffect" tabindex="-1">useEffect <a class="header-anchor" href="#useeffect" aria-label="Permalink to &quot;useEffect&quot;">​</a></h2><p><code>useEffect</code>相信各位小伙伴已经用的熟的不能再熟了，我们可以使用<code>useEffect</code>来模拟下<code>class</code>的<code>componentDidMount</code>和<code>componentWillUnmount</code>的功能。</p><h3 id="usemount" tabindex="-1">useMount <a class="header-anchor" href="#usemount" aria-label="Permalink to &quot;useMount&quot;">​</a></h3><p>这个钩子不必多说，只是简化了使用<code>useEffect</code>的第二个参数：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useEffect } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useMount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">fn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">useEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">?.();</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }, []);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> useMount;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useEffect } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useMount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">fn</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">useEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">?.();</span></span>\n<span class="line"><span style="color:#24292E;">      }, []);</span></span>\n<span class="line"><span style="color:#24292E;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> useMount;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="useunmount" tabindex="-1">useUnmount <a class="header-anchor" href="#useunmount" aria-label="Permalink to &quot;useUnmount&quot;">​</a></h3><p>这个需要注意一个点，就是使用<code>useRef</code>来确保所传入的函数为最新的状态，所以可以结合上述讲的<strong>useLatest</strong>结合使用</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useEffect, useRef } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useUnmount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">fn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ref</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRef</span><span style="color:#E1E4E8;">(fn);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      ref.current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fn;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">useEffect</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">?.()</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },</span></span>\n<span class="line"><span style="color:#E1E4E8;">        [],</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> useUnmount;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useEffect, useRef } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useUnmount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">fn</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ref</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRef</span><span style="color:#24292E;">(fn);</span></span>\n<span class="line"><span style="color:#24292E;">      ref.current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fn;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">useEffect</span><span style="color:#24292E;">(</span></span>\n<span class="line"><span style="color:#24292E;">        () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">?.()</span></span>\n<span class="line"><span style="color:#24292E;">        },</span></span>\n<span class="line"><span style="color:#24292E;">        [],</span></span>\n<span class="line"><span style="color:#24292E;">      );</span></span>\n<span class="line"><span style="color:#24292E;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> useUnmount;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="结合usemount和useunmount做个小例子" tabindex="-1">结合<code>useMount</code>和<code>useUnmount</code>做个小例子 <a class="header-anchor" href="#结合usemount和useunmount做个小例子" aria-label="Permalink to &quot;结合`useMount`和`useUnmount`做个小例子&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Button, Toast } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;antd-mobile&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React,{ useState } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useMount, useUnmount } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/components&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Child</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">useMount</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        Toast.</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;首次渲染&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">useUnmount</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        Toast.</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;组件已卸载&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;你好，我是小杜杜&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Index</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">FC</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">flag</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setFlag</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{padding: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">}}&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">color</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;primary&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span><span style="color:#B392F0;">setFlag</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">v)}}&gt;切换 {flag </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;unmount&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;mount&#39;</span><span style="color:#E1E4E8;">}&lt;/</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          {flag </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">Child</span><span style="color:#E1E4E8;"> /&gt;}</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Index;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Button, Toast } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;antd-mobile&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React,{ useState } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useMount, useUnmount } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/components&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Child</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">useMount</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">        Toast.</span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;首次渲染&#39;</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">      });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">useUnmount</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">        Toast.</span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;组件已卸载&#39;</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">      })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;你好，我是小杜杜&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Index</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">FC</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">props</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">flag</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setFlag</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">&gt;(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>\n<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{padding: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">}}&gt;</span></span>\n<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#005CC5;">Button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">color</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;primary&#39;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span><span style="color:#6F42C1;">setFlag</span><span style="color:#24292E;">(</span><span style="color:#E36209;">v</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">v)}}&gt;切换 {flag </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;unmount&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;mount&#39;</span><span style="color:#24292E;">}&lt;/</span><span style="color:#005CC5;">Button</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">          {flag </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">Child</span><span style="color:#24292E;"> /&gt;}</span></span>\n<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">      );</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Index;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>效果如下： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27b1cfa623a944eb9056b62eeafaba5f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="img5.gif"></p><h3 id="useupdate" tabindex="-1">useUpdate <a class="header-anchor" href="#useupdate" aria-label="Permalink to &quot;useUpdate&quot;">​</a></h3><p><strong>useUpdate</strong>:强制更新</p><p>有的时候我们需要组件强制更新，这个时候就可以使用这个钩子：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useCallback, useState } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useUpdate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [, </span><span style="color:#79B8FF;">setState</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">({});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useCallback</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">({}), []);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> useUpdate;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//示例：</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Button } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;antd-mobile&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useUpdate } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/components&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Index</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">FC</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">update</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useUpdate</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{padding: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">}}&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;时间：{Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">()}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">color</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;primary&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{update}&gt;更新时间&lt;/</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Index;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useCallback, useState } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useUpdate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [, </span><span style="color:#005CC5;">setState</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">({});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useCallback</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">({}), []);</span></span>\n<span class="line"><span style="color:#24292E;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> useUpdate;</span></span>\n<span class="line"><span style="color:#24292E;">    </span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//示例：</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Button } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;antd-mobile&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useUpdate } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/components&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Index</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">FC</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">props</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">update</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useUpdate</span><span style="color:#24292E;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>\n<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{padding: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">}}&gt;</span></span>\n<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;时间：{Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">()}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#005CC5;">Button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">color</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;primary&#39;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{update}&gt;更新时间&lt;/</span><span style="color:#005CC5;">Button</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">      );</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Index;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>效果如下：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bbe4ebe0e17f439693b48eac899e3f67~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="img6.gif"></p><h1 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h1>',91),u=c('<h2 id="案例1-usereactive" tabindex="-1">案例1: useReactive <a class="header-anchor" href="#案例1-usereactive" aria-label="Permalink to &quot;案例1: useReactive&quot;">​</a></h2><p><strong>useReactive</strong>: 一种具备<strong>响应式</strong>的<code>useState</code></p><p>缘由：我们知道用<code>useState</code>可以定义变量其格式为：</p><p><code>const [count, setCount] = useState&lt;number&gt;(0)</code></p><p>通过<code>setCount</code>来设置，<code>count</code>来获取，使用这种方式才能够渲染视图</p><p>来看看正常的操作，像这样 <code>let count = 0; count =7</code> 此时<code>count</code>的值就是7，也就是说数据是响应式的</p><p>那么我们可不可以将 <code>useState</code>也写成<strong>响应式</strong>的呢？我可以自由设置<strong>count的值,并且可以随时获取到count的最新值</strong>，而不是通过<code>setCount</code>来设置。</p><p>我们来想想怎么去实现一个具备 <strong>响应式</strong> 特点的 <code>useState</code> 也就是 <code>useRective</code>,提出以下疑问，感兴趣的，可以先自行思考一下：</p><ul><li>这个钩子的出入参该怎么设定？</li><li>如何将数据制作成响应式（毕竟普通的操作无法刷新视图）？</li><li>如何使用<code>TS</code>去写，完善其类型？</li><li>如何更好的去优化？</li></ul><h3 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h3><p>以上四个小问题，最关键的就是<code>第二个</code>，我们如何将数据弄成<strong>响应式</strong>，想要弄成响应式，就必须监听到值的变化，在做出更改，也就是说，我们对这个数进行操作的时候，要进行相应的<strong>拦截</strong>，这时就需要<code>ES6</code>的一个知识点：<strong>Proxy</strong></p><p>在这里会用到 <strong>Proxy</strong>和<strong>Reflect</strong>的点，感兴趣的可以看看我的这篇文章：<a href="https://juejin.cn/post/7068935394191998990#heading-36" title="https://juejin.cn/post/7068935394191998990#heading-36" target="_blank" rel="noreferrer">🔥花一个小时，迅速了解ES6~ES12的全部特性</a></p><p><strong>Proxy</strong>：接受的参数是<strong>对象</strong>，所以第一个问题也解决了，入参就为对象。那么如何去刷新视图呢？这里就使用上述的<strong>useUpdate</strong>来强制刷新，使数据更改。</p><p>至于优化这一块，使用上文说的<code>useCreation</code>就好，再配合<code>useRef</code>来放<code>initialState</code>即可</p><h3 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to &quot;代码&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">import { useRef } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;">import { useUpdate, useCreation } from &#39;../index&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">const observer = &lt;T extends Record&lt;string, any&gt;&gt;(initialVal: T, cb: () =&gt; void): T =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;"> const proxy = new Proxy&lt;T&gt;(initialVal, {</span></span>\n<span class="line"><span style="color:#e1e4e8;">    get(target, key, receiver) {</span></span>\n<span class="line"><span style="color:#e1e4e8;">      const res = Reflect.get(target, key, receiver);</span></span>\n<span class="line"><span style="color:#e1e4e8;">      return typeof res === &#39;object&#39; ? observer(res, cb) : Reflect.get(target, key);</span></span>\n<span class="line"><span style="color:#e1e4e8;">    },</span></span>\n<span class="line"><span style="color:#e1e4e8;">    set(target, key, val) {</span></span>\n<span class="line"><span style="color:#e1e4e8;">      const ret = Reflect.set(target, key, val);</span></span>\n<span class="line"><span style="color:#e1e4e8;">      cb();</span></span>\n<span class="line"><span style="color:#e1e4e8;">      return ret;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    },</span></span>\n<span class="line"><span style="color:#e1e4e8;">  });</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">  return proxy;</span></span>\n<span class="line"><span style="color:#e1e4e8;">}</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">const useReactive = &lt;T extends Record&lt;string, any&gt;&gt;(initialState: T):T =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">  const ref = useRef&lt;T&gt;(initialState);</span></span>\n<span class="line"><span style="color:#e1e4e8;">  const update = useUpdate();</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">  const state = useCreation(() =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">    return observer(ref.current, () =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">      update();</span></span>\n<span class="line"><span style="color:#e1e4e8;">    });</span></span>\n<span class="line"><span style="color:#e1e4e8;">  }, []);</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">  return state</span></span>\n<span class="line"><span style="color:#e1e4e8;">};</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">export default useReactive;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">import { useRef } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#24292e;">import { useUpdate, useCreation } from &#39;../index&#39;;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">const observer = &lt;T extends Record&lt;string, any&gt;&gt;(initialVal: T, cb: () =&gt; void): T =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;"> const proxy = new Proxy&lt;T&gt;(initialVal, {</span></span>\n<span class="line"><span style="color:#24292e;">    get(target, key, receiver) {</span></span>\n<span class="line"><span style="color:#24292e;">      const res = Reflect.get(target, key, receiver);</span></span>\n<span class="line"><span style="color:#24292e;">      return typeof res === &#39;object&#39; ? observer(res, cb) : Reflect.get(target, key);</span></span>\n<span class="line"><span style="color:#24292e;">    },</span></span>\n<span class="line"><span style="color:#24292e;">    set(target, key, val) {</span></span>\n<span class="line"><span style="color:#24292e;">      const ret = Reflect.set(target, key, val);</span></span>\n<span class="line"><span style="color:#24292e;">      cb();</span></span>\n<span class="line"><span style="color:#24292e;">      return ret;</span></span>\n<span class="line"><span style="color:#24292e;">    },</span></span>\n<span class="line"><span style="color:#24292e;">  });</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">  return proxy;</span></span>\n<span class="line"><span style="color:#24292e;">}</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">const useReactive = &lt;T extends Record&lt;string, any&gt;&gt;(initialState: T):T =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">  const ref = useRef&lt;T&gt;(initialState);</span></span>\n<span class="line"><span style="color:#24292e;">  const update = useUpdate();</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">  const state = useCreation(() =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">    return observer(ref.current, () =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">      update();</span></span>\n<span class="line"><span style="color:#24292e;">    });</span></span>\n<span class="line"><span style="color:#24292e;">  }, []);</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">  return state</span></span>\n<span class="line"><span style="color:#24292e;">};</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">export default useReactive;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>这里先说下<code>TS</code>，因为我们不知道会传递什么类型的<code>initialState</code>所以在这需要使用<strong>泛型</strong>，我们接受的参数是<strong>对象</strong>，可就是 key-value 的形式，其中 key 为 string，value 可以是 任意类型，所以我们使用 <code>Record&lt;string, any&gt;</code></p><p>有不熟悉的小伙伴可以看看我的这篇文章： <a href="https://juejin.cn/post/7088304364078497800#heading-82" title="https://juejin.cn/post/7088304364078497800#heading-82" target="_blank" rel="noreferrer">一篇让你完全够用TS的指南</a>（又推销一遍，有点打广告，别在意～）</p><p>再来说下<code>拦截这块</code>,我们只需要拦截<strong>设置（set）</strong> 和 <strong>获取（get）</strong> 即可，其中：</p><ul><li>设置这块，需要改变是图，也就是说需要，使用<strong>useUpdate</strong>来强制刷新</li><li>获取这块，需要判断其是否为对象，是的话继续递归，不是的话返回就行</li></ul><h3 id="验证" tabindex="-1">验证 <a class="header-anchor" href="#验证" aria-label="Permalink to &quot;验证&quot;">​</a></h3><p>接下来我们来验证一下我们写的 <code>useReactive</code>,我们将以 字符串、数字、布尔、数组、函数、计算属性几个方面去验证一下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">    import { Button } from &#39;antd-mobile&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    import React from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    import { useReactive } from &#39;@/components&#39;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    const Index:React.FC&lt;any&gt; = (props)=&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      const state = useReactive&lt;any&gt;({</span></span>\n<span class="line"><span style="color:#e1e4e8;">        count: 0,</span></span>\n<span class="line"><span style="color:#e1e4e8;">        name: &#39;小杜杜&#39;,</span></span>\n<span class="line"><span style="color:#e1e4e8;">        flag: true,</span></span>\n<span class="line"><span style="color:#e1e4e8;">        arr: [],</span></span>\n<span class="line"><span style="color:#e1e4e8;">        bugs: [&#39;小杜杜&#39;, &#39;react&#39;, &#39;hook&#39;],</span></span>\n<span class="line"><span style="color:#e1e4e8;">        addBug(bug:string) {</span></span>\n<span class="line"><span style="color:#e1e4e8;">          this.bugs.push(bug);</span></span>\n<span class="line"><span style="color:#e1e4e8;">        },</span></span>\n<span class="line"><span style="color:#e1e4e8;">        get bugsCount() {</span></span>\n<span class="line"><span style="color:#e1e4e8;">          return this.bugs.length;</span></span>\n<span class="line"><span style="color:#e1e4e8;">        },</span></span>\n<span class="line"><span style="color:#e1e4e8;">      })</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      return (</span></span>\n<span class="line"><span style="color:#e1e4e8;">        &lt;div style={{padding: 20}}&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">          &lt;div style={{fontWeight: &#39;bold&#39;}}&gt;基本使用：&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;div style={{marginTop: 8}}&gt; 对数字进行操作：{state.count}&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;div style={{margin: &#39;8px 0&#39;, display: &#39;flex&#39;,justifyContent: &#39;flex-start&#39;}}&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">             &lt;Button color=&#39;primary&#39; onClick={() =&gt; state.count++ } &gt;加1&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">             &lt;Button color=&#39;primary&#39; style={{marginLeft: 8}} onClick={() =&gt; state.count-- } &gt;减1&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">             &lt;Button color=&#39;primary&#39; style={{marginLeft: 8}} onClick={() =&gt; state.count = 7 } &gt;设置为7&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;div style={{marginTop: 8}}&gt; 对字符串进行操作：{state.name}&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;div style={{margin: &#39;8px 0&#39;, display: &#39;flex&#39;,justifyContent: &#39;flex-start&#39;}}&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">             &lt;Button color=&#39;primary&#39; onClick={() =&gt; state.name = &#39;小杜杜&#39; } &gt;设置为小杜杜&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">             &lt;Button color=&#39;primary&#39; style={{marginLeft: 8}} onClick={() =&gt; state.name = &#39;Domesy&#39;} &gt;设置为Domesy&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;div style={{marginTop: 8}}&gt; 对布尔值进行操作：{JSON.stringify(state.flag)}&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;div style={{margin: &#39;8px 0&#39;, display: &#39;flex&#39;,justifyContent: &#39;flex-start&#39;}}&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">             &lt;Button color=&#39;primary&#39; onClick={() =&gt; state.flag = !state.flag } &gt;切换状态&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;div style={{marginTop: 8}}&gt; 对数组进行操作：{JSON.stringify(state.arr)}&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;div style={{margin: &#39;8px 0&#39;, display: &#39;flex&#39;,justifyContent: &#39;flex-start&#39;}}&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">             &lt;Button color=&quot;primary&quot; onClick={() =&gt; state.arr.push(Math.floor(Math.random() * 100))} &gt;push&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">             &lt;Button color=&quot;primary&quot; style={{marginLeft: 8}} onClick={() =&gt; state.arr.pop()} &gt;pop&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">             &lt;Button color=&quot;primary&quot; style={{marginLeft: 8}} onClick={() =&gt; state.arr.shift()} &gt;shift&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">             &lt;Button color=&quot;primary&quot; style={{marginLeft: 8}} onClick={() =&gt; state.arr.unshift(Math.floor(Math.random() * 100))} &gt;unshift&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">             &lt;Button color=&quot;primary&quot; style={{marginLeft: 8}} onClick={() =&gt; state.arr.reverse()} &gt;reverse&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">             &lt;Button color=&quot;primary&quot; style={{marginLeft: 8}} onClick={() =&gt; state.arr.sort()} &gt;sort&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;div style={{fontWeight: &#39;bold&#39;, marginTop: 8}}&gt;计算属性：&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;div style={{marginTop: 8}}&gt;数量：{ state.bugsCount } 个&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;div style={{margin: &#39;8px 0&#39;}}&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">             &lt;form</span></span>\n<span class="line"><span style="color:#e1e4e8;">               onSubmit={(e) =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">                 state.bug ? state.addBug(state.bug) : state.addBug(&#39;domesy&#39;)</span></span>\n<span class="line"><span style="color:#e1e4e8;">                 state.bug = &#39;&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;">                 e.preventDefault();</span></span>\n<span class="line"><span style="color:#e1e4e8;">               }}</span></span>\n<span class="line"><span style="color:#e1e4e8;">             &gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">               &lt;input type=&quot;text&quot; value={state.bug} onChange={(e) =&gt; (state.bug = e.target.value)} /&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">               &lt;button type=&quot;submit&quot;  style={{marginLeft: 8}} &gt;增加&lt;/button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">               &lt;Button color=&quot;primary&quot; style={{marginLeft: 8}} onClick={() =&gt; state.bugs.pop()}&gt;删除&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">             &lt;/form&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;ul&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">             {</span></span>\n<span class="line"><span style="color:#e1e4e8;">               state.bugs.map((bug:any, index:number) =&gt; (</span></span>\n<span class="line"><span style="color:#e1e4e8;">                 &lt;li key={index}&gt;{bug}&lt;/li&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">               ))</span></span>\n<span class="line"><span style="color:#e1e4e8;">             }</span></span>\n<span class="line"><span style="color:#e1e4e8;">           &lt;/ul&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">        &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">      );</span></span>\n<span class="line"><span style="color:#e1e4e8;">    }</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    export default Index;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">    import { Button } from &#39;antd-mobile&#39;;</span></span>\n<span class="line"><span style="color:#24292e;">    import React from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#24292e;">    import { useReactive } from &#39;@/components&#39;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    const Index:React.FC&lt;any&gt; = (props)=&gt; {</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      const state = useReactive&lt;any&gt;({</span></span>\n<span class="line"><span style="color:#24292e;">        count: 0,</span></span>\n<span class="line"><span style="color:#24292e;">        name: &#39;小杜杜&#39;,</span></span>\n<span class="line"><span style="color:#24292e;">        flag: true,</span></span>\n<span class="line"><span style="color:#24292e;">        arr: [],</span></span>\n<span class="line"><span style="color:#24292e;">        bugs: [&#39;小杜杜&#39;, &#39;react&#39;, &#39;hook&#39;],</span></span>\n<span class="line"><span style="color:#24292e;">        addBug(bug:string) {</span></span>\n<span class="line"><span style="color:#24292e;">          this.bugs.push(bug);</span></span>\n<span class="line"><span style="color:#24292e;">        },</span></span>\n<span class="line"><span style="color:#24292e;">        get bugsCount() {</span></span>\n<span class="line"><span style="color:#24292e;">          return this.bugs.length;</span></span>\n<span class="line"><span style="color:#24292e;">        },</span></span>\n<span class="line"><span style="color:#24292e;">      })</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      return (</span></span>\n<span class="line"><span style="color:#24292e;">        &lt;div style={{padding: 20}}&gt;</span></span>\n<span class="line"><span style="color:#24292e;">          &lt;div style={{fontWeight: &#39;bold&#39;}}&gt;基本使用：&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;div style={{marginTop: 8}}&gt; 对数字进行操作：{state.count}&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;div style={{margin: &#39;8px 0&#39;, display: &#39;flex&#39;,justifyContent: &#39;flex-start&#39;}}&gt;</span></span>\n<span class="line"><span style="color:#24292e;">             &lt;Button color=&#39;primary&#39; onClick={() =&gt; state.count++ } &gt;加1&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">             &lt;Button color=&#39;primary&#39; style={{marginLeft: 8}} onClick={() =&gt; state.count-- } &gt;减1&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">             &lt;Button color=&#39;primary&#39; style={{marginLeft: 8}} onClick={() =&gt; state.count = 7 } &gt;设置为7&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;div style={{marginTop: 8}}&gt; 对字符串进行操作：{state.name}&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;div style={{margin: &#39;8px 0&#39;, display: &#39;flex&#39;,justifyContent: &#39;flex-start&#39;}}&gt;</span></span>\n<span class="line"><span style="color:#24292e;">             &lt;Button color=&#39;primary&#39; onClick={() =&gt; state.name = &#39;小杜杜&#39; } &gt;设置为小杜杜&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">             &lt;Button color=&#39;primary&#39; style={{marginLeft: 8}} onClick={() =&gt; state.name = &#39;Domesy&#39;} &gt;设置为Domesy&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;div style={{marginTop: 8}}&gt; 对布尔值进行操作：{JSON.stringify(state.flag)}&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;div style={{margin: &#39;8px 0&#39;, display: &#39;flex&#39;,justifyContent: &#39;flex-start&#39;}}&gt;</span></span>\n<span class="line"><span style="color:#24292e;">             &lt;Button color=&#39;primary&#39; onClick={() =&gt; state.flag = !state.flag } &gt;切换状态&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;div style={{marginTop: 8}}&gt; 对数组进行操作：{JSON.stringify(state.arr)}&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;div style={{margin: &#39;8px 0&#39;, display: &#39;flex&#39;,justifyContent: &#39;flex-start&#39;}}&gt;</span></span>\n<span class="line"><span style="color:#24292e;">             &lt;Button color=&quot;primary&quot; onClick={() =&gt; state.arr.push(Math.floor(Math.random() * 100))} &gt;push&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">             &lt;Button color=&quot;primary&quot; style={{marginLeft: 8}} onClick={() =&gt; state.arr.pop()} &gt;pop&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">             &lt;Button color=&quot;primary&quot; style={{marginLeft: 8}} onClick={() =&gt; state.arr.shift()} &gt;shift&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">             &lt;Button color=&quot;primary&quot; style={{marginLeft: 8}} onClick={() =&gt; state.arr.unshift(Math.floor(Math.random() * 100))} &gt;unshift&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">             &lt;Button color=&quot;primary&quot; style={{marginLeft: 8}} onClick={() =&gt; state.arr.reverse()} &gt;reverse&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">             &lt;Button color=&quot;primary&quot; style={{marginLeft: 8}} onClick={() =&gt; state.arr.sort()} &gt;sort&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;div style={{fontWeight: &#39;bold&#39;, marginTop: 8}}&gt;计算属性：&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;div style={{marginTop: 8}}&gt;数量：{ state.bugsCount } 个&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;div style={{margin: &#39;8px 0&#39;}}&gt;</span></span>\n<span class="line"><span style="color:#24292e;">             &lt;form</span></span>\n<span class="line"><span style="color:#24292e;">               onSubmit={(e) =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">                 state.bug ? state.addBug(state.bug) : state.addBug(&#39;domesy&#39;)</span></span>\n<span class="line"><span style="color:#24292e;">                 state.bug = &#39;&#39;;</span></span>\n<span class="line"><span style="color:#24292e;">                 e.preventDefault();</span></span>\n<span class="line"><span style="color:#24292e;">               }}</span></span>\n<span class="line"><span style="color:#24292e;">             &gt;</span></span>\n<span class="line"><span style="color:#24292e;">               &lt;input type=&quot;text&quot; value={state.bug} onChange={(e) =&gt; (state.bug = e.target.value)} /&gt;</span></span>\n<span class="line"><span style="color:#24292e;">               &lt;button type=&quot;submit&quot;  style={{marginLeft: 8}} &gt;增加&lt;/button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">               &lt;Button color=&quot;primary&quot; style={{marginLeft: 8}} onClick={() =&gt; state.bugs.pop()}&gt;删除&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">             &lt;/form&gt;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">           &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;ul&gt;</span></span>\n<span class="line"><span style="color:#24292e;">             {</span></span>\n<span class="line"><span style="color:#24292e;">               state.bugs.map((bug:any, index:number) =&gt; (</span></span>\n<span class="line"><span style="color:#24292e;">                 &lt;li key={index}&gt;{bug}&lt;/li&gt;</span></span>\n<span class="line"><span style="color:#24292e;">               ))</span></span>\n<span class="line"><span style="color:#24292e;">             }</span></span>\n<span class="line"><span style="color:#24292e;">           &lt;/ul&gt;</span></span>\n<span class="line"><span style="color:#24292e;">        &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">      );</span></span>\n<span class="line"><span style="color:#24292e;">    }</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    export default Index;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div><p>效果如下：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9571ffdbb94c478bbb34e8b37d9c454f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="useuse.gif"></p><h2 id="案例2-useeventlistener" tabindex="-1">案例2: useEventListener <a class="header-anchor" href="#案例2-useeventlistener" aria-label="Permalink to &quot;案例2: useEventListener&quot;">​</a></h2><p>缘由：我们监听各种事件的时候需要做监听，如：监听点击事件、键盘事件、滚动事件等，我们将其统一封装起来，方便后续调用</p><p>说白了就是在<code>addEventListener</code>的基础上进行封装，我们先来想想在此基础上需要什么？</p><p>首先，<code>useEventListener</code>的入参可分为三个</p><ul><li>第一个<code>event</code>是事件（如：click、keydown）</li><li>第二个回调函数（所以不需要出参）</li><li>第三个就是目标（是某个节点还是全局）</li></ul><p>在这里需要注意一点就是在<strong>销毁的时候需要移除对应的监听事件</strong></p><h3 id="代码-1" tabindex="-1">代码 <a class="header-anchor" href="#代码-1" aria-label="Permalink to &quot;代码&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">    import { useEffect } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    const useEventListener = (event: string, handler: (...e:any) =&gt; void, target: any = window) =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      useEffect(() =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">        const targetElement  = &#39;current&#39; in target ? target.current : window;</span></span>\n<span class="line"><span style="color:#e1e4e8;">        const useEventListener = (event: Event) =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">          return handler(event)</span></span>\n<span class="line"><span style="color:#e1e4e8;">        }</span></span>\n<span class="line"><span style="color:#e1e4e8;">        targetElement.addEventListener(event, useEventListener)</span></span>\n<span class="line"><span style="color:#e1e4e8;">        return () =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">          targetElement.removeEventListener(event, useEventListener)</span></span>\n<span class="line"><span style="color:#e1e4e8;">        }</span></span>\n<span class="line"><span style="color:#e1e4e8;">      }, [event])</span></span>\n<span class="line"><span style="color:#e1e4e8;">    };</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    export default useEventListener;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">    import { useEffect } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    const useEventListener = (event: string, handler: (...e:any) =&gt; void, target: any = window) =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      useEffect(() =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">        const targetElement  = &#39;current&#39; in target ? target.current : window;</span></span>\n<span class="line"><span style="color:#24292e;">        const useEventListener = (event: Event) =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">          return handler(event)</span></span>\n<span class="line"><span style="color:#24292e;">        }</span></span>\n<span class="line"><span style="color:#24292e;">        targetElement.addEventListener(event, useEventListener)</span></span>\n<span class="line"><span style="color:#24292e;">        return () =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">          targetElement.removeEventListener(event, useEventListener)</span></span>\n<span class="line"><span style="color:#24292e;">        }</span></span>\n<span class="line"><span style="color:#24292e;">      }, [event])</span></span>\n<span class="line"><span style="color:#24292e;">    };</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    export default useEventListener;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>注：这里把<code>target</code>默认设置成了<code>window</code>，至于为什么要这么写：<code>&#39;current&#39; in target</code>是因为我们用<code>useRef</code>拿到的值都是 <code>ref.current</code></p><h3 id="支持ssr-优化" tabindex="-1">支持SSR（优化） <a class="header-anchor" href="#支持ssr-优化" aria-label="Permalink to &quot;支持SSR（优化）&quot;">​</a></h3><p>在原本的ahooks代码中，会用到<code>useEffectWithTarget</code>，一开搞错了，以为这个是类似于<code>useCreation</code>的优化作用，其实不是，这么做的目的是为了支持<code>SSR</code></p><p>因为<code>SSR</code>的类型是 <code>() =&gt; HTMLElement</code>， 如果将这个作为<code>useEffect</code>的参数，那么就相当于<code>deps</code>不存在，也就是有其他变量改变时，<code>useEffect</code>都会执行，所以为了全面支持<code>target</code>动态变化，才会有这个<code>useEffectWithTarget</code>的诞生～</p><h3 id="详细代码" tabindex="-1">详细代码 <a class="header-anchor" href="#详细代码" aria-label="Permalink to &quot;详细代码&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">    import { useEffect } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    import type { DependencyList } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    import { useRef } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    import useLatest from &#39;../useLatest&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    import useUnmount from &#39;../useUnmount&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    const depsAreSame = (oldDeps: DependencyList, deps: DependencyList):boolean =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">      for(let i = 0; i &lt; oldDeps.length; i++) {</span></span>\n<span class="line"><span style="color:#e1e4e8;">        if(!Object.is(oldDeps[i], deps[i])) return false</span></span>\n<span class="line"><span style="color:#e1e4e8;">      }</span></span>\n<span class="line"><span style="color:#e1e4e8;">      return true</span></span>\n<span class="line"><span style="color:#e1e4e8;">    }</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    const useEffectTarget = (effect: () =&gt; void, deps:DependencyList, target: any) =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      const hasInitRef = useRef(false); // 一开始设置初始化</span></span>\n<span class="line"><span style="color:#e1e4e8;">      const elementRef = useRef&lt;(Element | null)[]&gt;([]);// 存储具体的值</span></span>\n<span class="line"><span style="color:#e1e4e8;">      const depsRef = useRef&lt;DependencyList&gt;([]); // 存储传递的deps</span></span>\n<span class="line"><span style="color:#e1e4e8;">      const unmountRef = useRef&lt;any&gt;(); // 存储对应的effect</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      // 初始化 组件的初始化和更新都会执行</span></span>\n<span class="line"><span style="color:#e1e4e8;">      useEffect(() =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">        const targetElement  = &#39;current&#39; in target ? target.current : window;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">        // 第一遍赋值</span></span>\n<span class="line"><span style="color:#e1e4e8;">        if(!hasInitRef.current){</span></span>\n<span class="line"><span style="color:#e1e4e8;">          hasInitRef.current = true;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">          elementRef.current = targetElement;</span></span>\n<span class="line"><span style="color:#e1e4e8;">          depsRef.current = deps;</span></span>\n<span class="line"><span style="color:#e1e4e8;">          unmountRef.current = effect();</span></span>\n<span class="line"><span style="color:#e1e4e8;">          return</span></span>\n<span class="line"><span style="color:#e1e4e8;">        }</span></span>\n<span class="line"><span style="color:#e1e4e8;">        // 校验变值: 目标的值不同， 依赖值改变</span></span>\n<span class="line"><span style="color:#e1e4e8;">        if(elementRef.current !== targetElement || !depsAreSame(deps, depsRef.current)){</span></span>\n<span class="line"><span style="color:#e1e4e8;">          //先执行对应的函数</span></span>\n<span class="line"><span style="color:#e1e4e8;">          unmountRef.current?.();</span></span>\n<span class="line"><span style="color:#e1e4e8;">          //重新进行赋值</span></span>\n<span class="line"><span style="color:#e1e4e8;">          elementRef.current = targetElement;</span></span>\n<span class="line"><span style="color:#e1e4e8;">          depsRef.current = deps; </span></span>\n<span class="line"><span style="color:#e1e4e8;">          unmountRef.current = effect();</span></span>\n<span class="line"><span style="color:#e1e4e8;">        }</span></span>\n<span class="line"><span style="color:#e1e4e8;">      })</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      useUnmount(() =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">        unmountRef.current?.();</span></span>\n<span class="line"><span style="color:#e1e4e8;">        hasInitRef.current = false;</span></span>\n<span class="line"><span style="color:#e1e4e8;">      })</span></span>\n<span class="line"><span style="color:#e1e4e8;">    }</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    const useEventListener = (event: string, handler: (...e:any) =&gt; void, target: any = window) =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">      const handlerRef = useLatest(handler);</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      useEffectTarget(() =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">        const targetElement  = &#39;current&#39; in target ? target.current : window;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">        //  防止没有 addEventListener 这个属性</span></span>\n<span class="line"><span style="color:#e1e4e8;">        if(!targetElement?.addEventListener) return;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">        const useEventListener = (event: Event) =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">          return handlerRef.current(event)</span></span>\n<span class="line"><span style="color:#e1e4e8;">        }</span></span>\n<span class="line"><span style="color:#e1e4e8;">        targetElement.addEventListener(event, useEventListener)</span></span>\n<span class="line"><span style="color:#e1e4e8;">        return () =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">          targetElement.removeEventListener(event, useEventListener)</span></span>\n<span class="line"><span style="color:#e1e4e8;">        }</span></span>\n<span class="line"><span style="color:#e1e4e8;">      }, [event], target)</span></span>\n<span class="line"><span style="color:#e1e4e8;">    };</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    export default useEventListener;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">    import { useEffect } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#24292e;">    import type { DependencyList } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#24292e;">    import { useRef } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#24292e;">    import useLatest from &#39;../useLatest&#39;;</span></span>\n<span class="line"><span style="color:#24292e;">    import useUnmount from &#39;../useUnmount&#39;;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    const depsAreSame = (oldDeps: DependencyList, deps: DependencyList):boolean =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">      for(let i = 0; i &lt; oldDeps.length; i++) {</span></span>\n<span class="line"><span style="color:#24292e;">        if(!Object.is(oldDeps[i], deps[i])) return false</span></span>\n<span class="line"><span style="color:#24292e;">      }</span></span>\n<span class="line"><span style="color:#24292e;">      return true</span></span>\n<span class="line"><span style="color:#24292e;">    }</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    const useEffectTarget = (effect: () =&gt; void, deps:DependencyList, target: any) =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      const hasInitRef = useRef(false); // 一开始设置初始化</span></span>\n<span class="line"><span style="color:#24292e;">      const elementRef = useRef&lt;(Element | null)[]&gt;([]);// 存储具体的值</span></span>\n<span class="line"><span style="color:#24292e;">      const depsRef = useRef&lt;DependencyList&gt;([]); // 存储传递的deps</span></span>\n<span class="line"><span style="color:#24292e;">      const unmountRef = useRef&lt;any&gt;(); // 存储对应的effect</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      // 初始化 组件的初始化和更新都会执行</span></span>\n<span class="line"><span style="color:#24292e;">      useEffect(() =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">        const targetElement  = &#39;current&#39; in target ? target.current : window;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">        // 第一遍赋值</span></span>\n<span class="line"><span style="color:#24292e;">        if(!hasInitRef.current){</span></span>\n<span class="line"><span style="color:#24292e;">          hasInitRef.current = true;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">          elementRef.current = targetElement;</span></span>\n<span class="line"><span style="color:#24292e;">          depsRef.current = deps;</span></span>\n<span class="line"><span style="color:#24292e;">          unmountRef.current = effect();</span></span>\n<span class="line"><span style="color:#24292e;">          return</span></span>\n<span class="line"><span style="color:#24292e;">        }</span></span>\n<span class="line"><span style="color:#24292e;">        // 校验变值: 目标的值不同， 依赖值改变</span></span>\n<span class="line"><span style="color:#24292e;">        if(elementRef.current !== targetElement || !depsAreSame(deps, depsRef.current)){</span></span>\n<span class="line"><span style="color:#24292e;">          //先执行对应的函数</span></span>\n<span class="line"><span style="color:#24292e;">          unmountRef.current?.();</span></span>\n<span class="line"><span style="color:#24292e;">          //重新进行赋值</span></span>\n<span class="line"><span style="color:#24292e;">          elementRef.current = targetElement;</span></span>\n<span class="line"><span style="color:#24292e;">          depsRef.current = deps; </span></span>\n<span class="line"><span style="color:#24292e;">          unmountRef.current = effect();</span></span>\n<span class="line"><span style="color:#24292e;">        }</span></span>\n<span class="line"><span style="color:#24292e;">      })</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      useUnmount(() =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">        unmountRef.current?.();</span></span>\n<span class="line"><span style="color:#24292e;">        hasInitRef.current = false;</span></span>\n<span class="line"><span style="color:#24292e;">      })</span></span>\n<span class="line"><span style="color:#24292e;">    }</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    const useEventListener = (event: string, handler: (...e:any) =&gt; void, target: any = window) =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">      const handlerRef = useLatest(handler);</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      useEffectTarget(() =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">        const targetElement  = &#39;current&#39; in target ? target.current : window;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">        //  防止没有 addEventListener 这个属性</span></span>\n<span class="line"><span style="color:#24292e;">        if(!targetElement?.addEventListener) return;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">        const useEventListener = (event: Event) =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">          return handlerRef.current(event)</span></span>\n<span class="line"><span style="color:#24292e;">        }</span></span>\n<span class="line"><span style="color:#24292e;">        targetElement.addEventListener(event, useEventListener)</span></span>\n<span class="line"><span style="color:#24292e;">        return () =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">          targetElement.removeEventListener(event, useEventListener)</span></span>\n<span class="line"><span style="color:#24292e;">        }</span></span>\n<span class="line"><span style="color:#24292e;">      }, [event], target)</span></span>\n<span class="line"><span style="color:#24292e;">    };</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    export default useEventListener;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br></div></div><ul><li>在这里只用<code>useEffect</code>是因为，在更新和初始化的情况下都需要使用</li><li>必须要防止没有 <code>addEventListener</code>这个属性的情况，监听的目标有可能没有加载出来</li></ul><h3 id="验证-1" tabindex="-1">验证 <a class="header-anchor" href="#验证-1" aria-label="Permalink to &quot;验证&quot;">​</a></h3><p>验证一下<code>useEventListener</code>是否能够正常的使用，顺变验证一下初始化、卸载的，代码：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">    import React, { useState, useRef } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    import { useEventListener } from &#39;@/components&#39;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    import { Button } from &#39;antd-mobile&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    const Index:React.FC&lt;any&gt; = (props)=&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      const [count, setCount] = useState&lt;number&gt;(0)</span></span>\n<span class="line"><span style="color:#e1e4e8;">      const [flag, setFlag] = useState&lt;boolean&gt;(true)</span></span>\n<span class="line"><span style="color:#e1e4e8;">      const [key, setKey] = useState&lt;string&gt;(&#39;&#39;)</span></span>\n<span class="line"><span style="color:#e1e4e8;">      const ref = useRef(null);</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      useEventListener(&#39;click&#39;, () =&gt; setCount(v =&gt; v +1), ref)</span></span>\n<span class="line"><span style="color:#e1e4e8;">      useEventListener(&#39;keydown&#39;, (ev) =&gt; setKey(ev.key));</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      return (</span></span>\n<span class="line"><span style="color:#e1e4e8;">        &lt;div style={{padding: 20}}&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">          &lt;Button color=&#39;primary&#39; onClick={() =&gt; {setFlag(v =&gt; !v)}}&gt;切换 {flag ? &#39;unmount&#39; : &#39;mount&#39;}&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">          {</span></span>\n<span class="line"><span style="color:#e1e4e8;">            flag &amp;&amp; &lt;div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">              &lt;div&gt;数字：{count}&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">              &lt;button ref={ref} &gt;加1&lt;/button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">              &lt;div&gt;监听键盘事件：{key}&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">            &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">          }</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">        &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">      );</span></span>\n<span class="line"><span style="color:#e1e4e8;">    }</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    export default Index;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">    import React, { useState, useRef } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#24292e;">    import { useEventListener } from &#39;@/components&#39;</span></span>\n<span class="line"><span style="color:#24292e;">    import { Button } from &#39;antd-mobile&#39;;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    const Index:React.FC&lt;any&gt; = (props)=&gt; {</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      const [count, setCount] = useState&lt;number&gt;(0)</span></span>\n<span class="line"><span style="color:#24292e;">      const [flag, setFlag] = useState&lt;boolean&gt;(true)</span></span>\n<span class="line"><span style="color:#24292e;">      const [key, setKey] = useState&lt;string&gt;(&#39;&#39;)</span></span>\n<span class="line"><span style="color:#24292e;">      const ref = useRef(null);</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      useEventListener(&#39;click&#39;, () =&gt; setCount(v =&gt; v +1), ref)</span></span>\n<span class="line"><span style="color:#24292e;">      useEventListener(&#39;keydown&#39;, (ev) =&gt; setKey(ev.key));</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      return (</span></span>\n<span class="line"><span style="color:#24292e;">        &lt;div style={{padding: 20}}&gt;</span></span>\n<span class="line"><span style="color:#24292e;">          &lt;Button color=&#39;primary&#39; onClick={() =&gt; {setFlag(v =&gt; !v)}}&gt;切换 {flag ? &#39;unmount&#39; : &#39;mount&#39;}&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">          {</span></span>\n<span class="line"><span style="color:#24292e;">            flag &amp;&amp; &lt;div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">              &lt;div&gt;数字：{count}&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">              &lt;button ref={ref} &gt;加1&lt;/button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">              &lt;div&gt;监听键盘事件：{key}&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">            &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">          }</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">        &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">      );</span></span>\n<span class="line"><span style="color:#24292e;">    }</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    export default Index;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>效果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9dbb36ddad2d41f9917b8db7355d283a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="useEvent.gif"></p><p>我们可以利用<code>useEventListener</code>这个钩子去封装其他钩子，如 鼠标悬停，长按事件，鼠标位置等，在这里在举一个鼠标悬停的小例子</p><h3 id="小例子-usehover" tabindex="-1">小例子 useHover <a class="header-anchor" href="#小例子-usehover" aria-label="Permalink to &quot;小例子 useHover&quot;">​</a></h3><p><strong>useHover</strong>：监听 DOM 元素是否有鼠标悬停</p><p>这个就很简单了，只需要通过 <code>useEventListener</code>来监听<code>mouseenter</code>和<code>mouseleave</code>即可，在返回布尔值就行了：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">    import { useState } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    import useEventListener  from &#39;../useEventListener&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    interface Options {</span></span>\n<span class="line"><span style="color:#e1e4e8;">      onEnter?: () =&gt; void;</span></span>\n<span class="line"><span style="color:#e1e4e8;">      onLeave?: () =&gt; void;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    }</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    const useHover = (target:any, options?:Options): boolean =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      const [flag, setFlag] = useState&lt;boolean&gt;(false)</span></span>\n<span class="line"><span style="color:#e1e4e8;">      const { onEnter, onLeave } = options || {};</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      useEventListener(&#39;mouseenter&#39;, () =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">        onEnter?.()</span></span>\n<span class="line"><span style="color:#e1e4e8;">        setFlag(true)</span></span>\n<span class="line"><span style="color:#e1e4e8;">      }, target)</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      useEventListener(&#39;mouseleave&#39;, () =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">        onLeave?.()</span></span>\n<span class="line"><span style="color:#e1e4e8;">        setFlag(false)</span></span>\n<span class="line"><span style="color:#e1e4e8;">      }, target)</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      return flag</span></span>\n<span class="line"><span style="color:#e1e4e8;">    };</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    export default useHover;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">    import { useState } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#24292e;">    import useEventListener  from &#39;../useEventListener&#39;;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    interface Options {</span></span>\n<span class="line"><span style="color:#24292e;">      onEnter?: () =&gt; void;</span></span>\n<span class="line"><span style="color:#24292e;">      onLeave?: () =&gt; void;</span></span>\n<span class="line"><span style="color:#24292e;">    }</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    const useHover = (target:any, options?:Options): boolean =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      const [flag, setFlag] = useState&lt;boolean&gt;(false)</span></span>\n<span class="line"><span style="color:#24292e;">      const { onEnter, onLeave } = options || {};</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      useEventListener(&#39;mouseenter&#39;, () =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">        onEnter?.()</span></span>\n<span class="line"><span style="color:#24292e;">        setFlag(true)</span></span>\n<span class="line"><span style="color:#24292e;">      }, target)</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      useEventListener(&#39;mouseleave&#39;, () =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">        onLeave?.()</span></span>\n<span class="line"><span style="color:#24292e;">        setFlag(false)</span></span>\n<span class="line"><span style="color:#24292e;">      }, target)</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      return flag</span></span>\n<span class="line"><span style="color:#24292e;">    };</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    export default useHover;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d77611b1d33647e689398e380f1fdb16~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="useHover.gif"></p><h2 id="案例3-有关时间的hooks" tabindex="-1">案例3: 有关时间的Hooks <a class="header-anchor" href="#案例3-有关时间的hooks" aria-label="Permalink to &quot;案例3: 有关时间的Hooks&quot;">​</a></h2><p>在这里主要介绍有关时间的三个hooks,分别是：<code>useTimeout</code>、<code>useInterval</code>和<code>useCountDown</code></p><h3 id="usetimeout" tabindex="-1">useTimeout <a class="header-anchor" href="#usetimeout" aria-label="Permalink to &quot;useTimeout&quot;">​</a></h3><p><strong>useTimeout</strong>：一段时间内，执行一次</p><p>传递参数只要函数和延迟时间即可，需要注意的是卸载的时候将定时器清除下就OK了</p><p>详细代码：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">    import { useEffect } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    import useLatest from &#39;../useLatest&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    const useTimeout = (fn:() =&gt; void, delay?: number): void =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      const fnRef = useLatest(fn)</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      useEffect(() =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">        if(!delay || delay &lt; 0) return;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">        const timer = setTimeout(() =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">          fnRef.current();</span></span>\n<span class="line"><span style="color:#e1e4e8;">        }, delay)</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">        return () =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">          clearTimeout(timer)</span></span>\n<span class="line"><span style="color:#e1e4e8;">        }</span></span>\n<span class="line"><span style="color:#e1e4e8;">      }, [delay])</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    };</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    export default useTimeout;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">    import { useEffect } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#24292e;">    import useLatest from &#39;../useLatest&#39;;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    const useTimeout = (fn:() =&gt; void, delay?: number): void =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      const fnRef = useLatest(fn)</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      useEffect(() =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">        if(!delay || delay &lt; 0) return;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">        const timer = setTimeout(() =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">          fnRef.current();</span></span>\n<span class="line"><span style="color:#24292e;">        }, delay)</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">        return () =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">          clearTimeout(timer)</span></span>\n<span class="line"><span style="color:#24292e;">        }</span></span>\n<span class="line"><span style="color:#24292e;">      }, [delay])</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    };</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    export default useTimeout;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>效果展示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38ea46cb005e4b7e92979bc56ffb76f9~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="img3.gif"></p><h3 id="useinterval" tabindex="-1">useInterval <a class="header-anchor" href="#useinterval" aria-label="Permalink to &quot;useInterval&quot;">​</a></h3><p><strong>useInterval</strong>: 每过一段时间内一直执行</p><p>大体上与<code>useTimeout</code>一样，多了一个是否要首次渲染的参数<code>immediate</code></p><p>详细代码：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">    import { useEffect } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    import useLatest from &#39;../useLatest&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    const useInterval = (fn:() =&gt; void, delay?: number, immediate?:boolean): void =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      const fnRef = useLatest(fn)</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      useEffect(() =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">        if(!delay || delay &lt; 0) return;</span></span>\n<span class="line"><span style="color:#e1e4e8;">        if(immediate) fnRef.current();</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">        const timer = setInterval(() =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">          fnRef.current();</span></span>\n<span class="line"><span style="color:#e1e4e8;">        }, delay)</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">        return () =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">          clearInterval(timer)</span></span>\n<span class="line"><span style="color:#e1e4e8;">        }</span></span>\n<span class="line"><span style="color:#e1e4e8;">      }, [delay])</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    };</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    export default useInterval;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">    import { useEffect } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#24292e;">    import useLatest from &#39;../useLatest&#39;;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    const useInterval = (fn:() =&gt; void, delay?: number, immediate?:boolean): void =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      const fnRef = useLatest(fn)</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      useEffect(() =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">        if(!delay || delay &lt; 0) return;</span></span>\n<span class="line"><span style="color:#24292e;">        if(immediate) fnRef.current();</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">        const timer = setInterval(() =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">          fnRef.current();</span></span>\n<span class="line"><span style="color:#24292e;">        }, delay)</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">        return () =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">          clearInterval(timer)</span></span>\n<span class="line"><span style="color:#24292e;">        }</span></span>\n<span class="line"><span style="color:#24292e;">      }, [delay])</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    };</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    export default useInterval;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>效果展示： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/47b323c0e8b04546a5a30f51b9eb3488~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="img4.gif"></p><h3 id="usecountdown" tabindex="-1">useCountDown <a class="header-anchor" href="#usecountdown" aria-label="Permalink to &quot;useCountDown&quot;">​</a></h3><p><strong>useCountDown</strong>：简单控制倒计时的钩子</p><p>跟之前一样我们先来想想这个钩子需要什么：</p><ul><li>我们要做倒计时的钩子首先需要一个目标时间（targetDate），控制时间变化的秒数（interval默认为1s），然后就是倒计时完成后所触发的函数（onEnd）</li><li>返参就更加一目了然了，返回的是两个时间差的数值（time），再详细点可以换算成对应的天、时、分等（formattedRes）</li></ul><h4 id="详细代码-1" tabindex="-1">详细代码 <a class="header-anchor" href="#详细代码-1" aria-label="Permalink to &quot;详细代码&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">    import { useState, useEffect, useMemo } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    import useLatest from &#39;../useLatest&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    import dayjs from &#39;dayjs&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    type DTime = Date | number | string | undefined;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    interface Options {</span></span>\n<span class="line"><span style="color:#e1e4e8;">      targetDate?: DTime;</span></span>\n<span class="line"><span style="color:#e1e4e8;">      interval?: number;</span></span>\n<span class="line"><span style="color:#e1e4e8;">      onEnd?: () =&gt; void;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    }</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    interface FormattedRes {</span></span>\n<span class="line"><span style="color:#e1e4e8;">      days: number;</span></span>\n<span class="line"><span style="color:#e1e4e8;">      hours: number;</span></span>\n<span class="line"><span style="color:#e1e4e8;">      minutes: number;</span></span>\n<span class="line"><span style="color:#e1e4e8;">      seconds: number;</span></span>\n<span class="line"><span style="color:#e1e4e8;">      milliseconds: number;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    }</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    const calcTime = (time: DTime) =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">      if(!time) return 0</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      const res = dayjs(time).valueOf() - new Date().getTime(); //计算差值</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      if(res &lt; 0) return 0</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      return res</span></span>\n<span class="line"><span style="color:#e1e4e8;">    }</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    const parseMs = (milliseconds: number): FormattedRes =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">      return {</span></span>\n<span class="line"><span style="color:#e1e4e8;">        days: Math.floor(milliseconds / 86400000),</span></span>\n<span class="line"><span style="color:#e1e4e8;">        hours: Math.floor(milliseconds / 3600000) % 24,</span></span>\n<span class="line"><span style="color:#e1e4e8;">        minutes: Math.floor(milliseconds / 60000) % 60,</span></span>\n<span class="line"><span style="color:#e1e4e8;">        seconds: Math.floor(milliseconds / 1000) % 60,</span></span>\n<span class="line"><span style="color:#e1e4e8;">        milliseconds: Math.floor(milliseconds) % 1000,</span></span>\n<span class="line"><span style="color:#e1e4e8;">      };</span></span>\n<span class="line"><span style="color:#e1e4e8;">    };</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    const useCountDown = (options?: Options) =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      const { targetDate, interval = 1000, onEnd } = options || {};</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      const [time, setTime] = useState(() =&gt;  calcTime(targetDate));</span></span>\n<span class="line"><span style="color:#e1e4e8;">      const onEndRef = useLatest(onEnd);</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      useEffect(() =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">        if(!targetDate) return setTime(0)</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">        setTime(calcTime(targetDate))</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">        const timer = setInterval(() =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">          const target = calcTime(targetDate);</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">          setTime(target);</span></span>\n<span class="line"><span style="color:#e1e4e8;">          if (target === 0) {</span></span>\n<span class="line"><span style="color:#e1e4e8;">            clearInterval(timer);</span></span>\n<span class="line"><span style="color:#e1e4e8;">            onEndRef.current?.();</span></span>\n<span class="line"><span style="color:#e1e4e8;">          }</span></span>\n<span class="line"><span style="color:#e1e4e8;">        }, interval);</span></span>\n<span class="line"><span style="color:#e1e4e8;">        return () =&gt; clearInterval(timer);</span></span>\n<span class="line"><span style="color:#e1e4e8;">      },[targetDate, interval])</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      const formattedRes = useMemo(() =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">        return parseMs(time);</span></span>\n<span class="line"><span style="color:#e1e4e8;">      }, [time]);</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      return [time, formattedRes] as const</span></span>\n<span class="line"><span style="color:#e1e4e8;">    };</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    export default useCountDown;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">    import { useState, useEffect, useMemo } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#24292e;">    import useLatest from &#39;../useLatest&#39;;</span></span>\n<span class="line"><span style="color:#24292e;">    import dayjs from &#39;dayjs&#39;;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    type DTime = Date | number | string | undefined;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    interface Options {</span></span>\n<span class="line"><span style="color:#24292e;">      targetDate?: DTime;</span></span>\n<span class="line"><span style="color:#24292e;">      interval?: number;</span></span>\n<span class="line"><span style="color:#24292e;">      onEnd?: () =&gt; void;</span></span>\n<span class="line"><span style="color:#24292e;">    }</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    interface FormattedRes {</span></span>\n<span class="line"><span style="color:#24292e;">      days: number;</span></span>\n<span class="line"><span style="color:#24292e;">      hours: number;</span></span>\n<span class="line"><span style="color:#24292e;">      minutes: number;</span></span>\n<span class="line"><span style="color:#24292e;">      seconds: number;</span></span>\n<span class="line"><span style="color:#24292e;">      milliseconds: number;</span></span>\n<span class="line"><span style="color:#24292e;">    }</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    const calcTime = (time: DTime) =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">      if(!time) return 0</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      const res = dayjs(time).valueOf() - new Date().getTime(); //计算差值</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      if(res &lt; 0) return 0</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      return res</span></span>\n<span class="line"><span style="color:#24292e;">    }</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    const parseMs = (milliseconds: number): FormattedRes =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">      return {</span></span>\n<span class="line"><span style="color:#24292e;">        days: Math.floor(milliseconds / 86400000),</span></span>\n<span class="line"><span style="color:#24292e;">        hours: Math.floor(milliseconds / 3600000) % 24,</span></span>\n<span class="line"><span style="color:#24292e;">        minutes: Math.floor(milliseconds / 60000) % 60,</span></span>\n<span class="line"><span style="color:#24292e;">        seconds: Math.floor(milliseconds / 1000) % 60,</span></span>\n<span class="line"><span style="color:#24292e;">        milliseconds: Math.floor(milliseconds) % 1000,</span></span>\n<span class="line"><span style="color:#24292e;">      };</span></span>\n<span class="line"><span style="color:#24292e;">    };</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    const useCountDown = (options?: Options) =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      const { targetDate, interval = 1000, onEnd } = options || {};</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      const [time, setTime] = useState(() =&gt;  calcTime(targetDate));</span></span>\n<span class="line"><span style="color:#24292e;">      const onEndRef = useLatest(onEnd);</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      useEffect(() =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">        if(!targetDate) return setTime(0)</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">        setTime(calcTime(targetDate))</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">        const timer = setInterval(() =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">          const target = calcTime(targetDate);</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">          setTime(target);</span></span>\n<span class="line"><span style="color:#24292e;">          if (target === 0) {</span></span>\n<span class="line"><span style="color:#24292e;">            clearInterval(timer);</span></span>\n<span class="line"><span style="color:#24292e;">            onEndRef.current?.();</span></span>\n<span class="line"><span style="color:#24292e;">          }</span></span>\n<span class="line"><span style="color:#24292e;">        }, interval);</span></span>\n<span class="line"><span style="color:#24292e;">        return () =&gt; clearInterval(timer);</span></span>\n<span class="line"><span style="color:#24292e;">      },[targetDate, interval])</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      const formattedRes = useMemo(() =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">        return parseMs(time);</span></span>\n<span class="line"><span style="color:#24292e;">      }, [time]);</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      return [time, formattedRes] as const</span></span>\n<span class="line"><span style="color:#24292e;">    };</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    export default useCountDown;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br></div></div><h4 id="验证-2" tabindex="-1">验证 <a class="header-anchor" href="#验证-2" aria-label="Permalink to &quot;验证&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">    import React, { useState } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    import { useCountDown } from &#39;@/components&#39;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    import { Button, Toast } from &#39;antd-mobile&#39;;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    const Index:React.FC&lt;any&gt; = (props)=&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      const [_, formattedRes] = useCountDown({</span></span>\n<span class="line"><span style="color:#e1e4e8;">        targetDate: &#39;2022-12-31 24:00:00&#39;,</span></span>\n<span class="line"><span style="color:#e1e4e8;">      });</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      const { days, hours, minutes, seconds, milliseconds } = formattedRes;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      const [count, setCount] = useState&lt;number&gt;();</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      const [countdown] = useCountDown({</span></span>\n<span class="line"><span style="color:#e1e4e8;">        targetDate: count,</span></span>\n<span class="line"><span style="color:#e1e4e8;">        onEnd: () =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">          Toast.show(&#39;结束&#39;)</span></span>\n<span class="line"><span style="color:#e1e4e8;">        },</span></span>\n<span class="line"><span style="color:#e1e4e8;">      });</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">      return (</span></span>\n<span class="line"><span style="color:#e1e4e8;">        &lt;div style={{padding: 20}}&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">          &lt;div&gt; 距离 2022-12-31 24:00:00 还有 {days} 天 {hours} 时 {minutes} 分 {seconds} 秒 {milliseconds} 毫秒&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">          &lt;div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">            &lt;p style={{marginTop: 12}}&gt;动态变化：&lt;/p&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">            &lt;Button color=&#39;primary&#39; disabled={countdown !== 0} onClick={() =&gt; setCount(Date.now() + 3000)}&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">              {countdown === 0 ? &#39;开始&#39; : `还有 ${Math.round(countdown / 1000)}s`}</span></span>\n<span class="line"><span style="color:#e1e4e8;">            &lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">            &lt;Button style={{marginLeft: 8}} onClick={() =&gt; setCount(undefined)}&gt;停止&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">          &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">        &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">      );</span></span>\n<span class="line"><span style="color:#e1e4e8;">    }</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">    export default Index;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">    import React, { useState } from &#39;react&#39;;</span></span>\n<span class="line"><span style="color:#24292e;">    import { useCountDown } from &#39;@/components&#39;</span></span>\n<span class="line"><span style="color:#24292e;">    import { Button, Toast } from &#39;antd-mobile&#39;;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    const Index:React.FC&lt;any&gt; = (props)=&gt; {</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      const [_, formattedRes] = useCountDown({</span></span>\n<span class="line"><span style="color:#24292e;">        targetDate: &#39;2022-12-31 24:00:00&#39;,</span></span>\n<span class="line"><span style="color:#24292e;">      });</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      const { days, hours, minutes, seconds, milliseconds } = formattedRes;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      const [count, setCount] = useState&lt;number&gt;();</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      const [countdown] = useCountDown({</span></span>\n<span class="line"><span style="color:#24292e;">        targetDate: count,</span></span>\n<span class="line"><span style="color:#24292e;">        onEnd: () =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">          Toast.show(&#39;结束&#39;)</span></span>\n<span class="line"><span style="color:#24292e;">        },</span></span>\n<span class="line"><span style="color:#24292e;">      });</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">      return (</span></span>\n<span class="line"><span style="color:#24292e;">        &lt;div style={{padding: 20}}&gt;</span></span>\n<span class="line"><span style="color:#24292e;">          &lt;div&gt; 距离 2022-12-31 24:00:00 还有 {days} 天 {hours} 时 {minutes} 分 {seconds} 秒 {milliseconds} 毫秒&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">          &lt;div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">            &lt;p style={{marginTop: 12}}&gt;动态变化：&lt;/p&gt;</span></span>\n<span class="line"><span style="color:#24292e;">            &lt;Button color=&#39;primary&#39; disabled={countdown !== 0} onClick={() =&gt; setCount(Date.now() + 3000)}&gt;</span></span>\n<span class="line"><span style="color:#24292e;">              {countdown === 0 ? &#39;开始&#39; : `还有 ${Math.round(countdown / 1000)}s`}</span></span>\n<span class="line"><span style="color:#24292e;">            &lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">            &lt;Button style={{marginLeft: 8}} onClick={() =&gt; setCount(undefined)}&gt;停止&lt;/Button&gt;</span></span>\n<span class="line"><span style="color:#24292e;">          &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">        &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">      );</span></span>\n<span class="line"><span style="color:#24292e;">    }</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">    export default Index;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h4 id="效果展示" tabindex="-1">效果展示 <a class="header-anchor" href="#效果展示" aria-label="Permalink to &quot;效果展示&quot;">​</a></h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f41eaef407564c86b27aac51c4539da2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="img5.gif"></p><h2 id="end" tabindex="-1">End <a class="header-anchor" href="#end" aria-label="Permalink to &quot;End&quot;">​</a></h2><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fahooks.js.org%2Fzh-CN%2Fhooks%2Fuse-request%2Findex" title="https://ahooks.js.org/zh-CN/hooks/use-request/index" target="_blank" rel="noreferrer">ahooks</a></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>简单的做下总结：</p><ul><li>一个优秀的hooks一定会具备<code>useMemo</code>、<code>useCallback</code>等api优化</li><li>制作自定义hooks遇到传递过来的值，优先考虑使用<code>useRef</code>，再考虑用<code>useState</code>，可以直接使用<code>useLatest</code>，防止拿到的值不是最新值</li><li>在封装的时候，应该将存放的值放入 <code>useRef</code>中，通过一个状态去设置他的初始化，在判断什么情况下来更新所对应的值，明确入参与出参的具体意义，如<code>useCreation</code>和<code>useEventListener</code></li></ul>',83);const b=s(y,[["render",function(s,o,t,c,r,y){const b=n("ArticleMetadata"),m=n("ClientOnly");return a(),l("div",null,[i,p(m,null,{default:e((()=>[p(b)])),_:1}),E,p(m,null,{default:e((()=>[p(b)])),_:1}),u])}]]);export{r as __pageData,b as default};
