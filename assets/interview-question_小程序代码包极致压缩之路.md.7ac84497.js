import{_ as a,C as e,o as t,c as s,H as r,w as n,k as i,a as o,Q as p}from"./chunks/framework.80346561.js";const l=JSON.parse('{"title":"小程序代码包极致压缩之路","description":"","frontmatter":{"createTime":"2022/11/27","tag":"性能优化,westore"},"headers":[],"relativePath":"interview-question/小程序代码包极致压缩之路.md","filePath":"s/前端面试题/小程序/小程序代码包极致压缩之路.md","lastUpdated":1696495218000}'),c={name:"interview-question/小程序代码包极致压缩之路.md"},d=i("h1",{id:"小程序代码包极致压缩之路",tabindex:"-1"},[o("小程序代码包极致压缩之路 "),i("a",{class:"header-anchor",href:"#小程序代码包极致压缩之路","aria-label":'Permalink to "小程序代码包极致压缩之路"'},"​")],-1),h=p('<h2 id="影响小程序代码包大小的因素" tabindex="-1">影响小程序代码包大小的因素 <a class="header-anchor" href="#影响小程序代码包大小的因素" aria-label="Permalink to &quot;影响小程序代码包大小的因素&quot;">​</a></h2><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>业务代码</td><td>这是项目的基础，一般业务没有变更的情况下，很难减少</td></tr><tr><td>公共代码</td><td>如第三方公共库</td></tr><tr><td>无用代码</td><td>功能已废弃但未删除的代码</td></tr><tr><td>图片</td><td>保存在本地的图片</td></tr><tr><td>样式</td><td>特别是废弃的样式</td></tr><tr><td>wxml</td><td>结构越复杂，生成的代码空间越大</td></tr><tr><td>文件路径</td><td>页面/组件的路径最终都是代码的一部分</td></tr></tbody></table><h2 id="优化手段-基础" tabindex="-1">优化手段 -- 基础 <a class="header-anchor" href="#优化手段-基础" aria-label="Permalink to &quot;优化手段 -- 基础&quot;">​</a></h2><h3 id="_1、开启代码压缩" tabindex="-1">1、开启代码压缩 <a class="header-anchor" href="#_1、开启代码压缩" aria-label="Permalink to &quot;1、开启代码压缩&quot;">​</a></h3><p>这一步没啥成本，但效果很明显 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dcbb472c444f41cab62af1eaa1ff47de~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="image.png"></p><h3 id="_2、分包" tabindex="-1">2、分包 <a class="header-anchor" href="#_2、分包" aria-label="Permalink to &quot;2、分包&quot;">​</a></h3><p>这是最有效的手段，将非必须存在于主包的代码拆分到相应的分包中，分包按功能尽可能拆分的小一些；非主包用到的东西不允许放主包，一律放各个分包。</p><h3 id="_3、删除无用代码-包括无用样式" tabindex="-1">3、删除无用代码(包括无用样式) <a class="header-anchor" href="#_3、删除无用代码-包括无用样式" aria-label="Permalink to &quot;3、删除无用代码(包括无用样式)&quot;">​</a></h3><p>废弃的代码及时删除，包括js、wxml和样式，特别是app.wxss内的样式</p><h3 id="_4、本地图片替换成cdn图片" tabindex="-1">4、本地图片替换成CDN图片 <a class="header-anchor" href="#_4、本地图片替换成cdn图片" aria-label="Permalink to &quot;4、本地图片替换成CDN图片&quot;">​</a></h3><p>除了本地必须的图片，如报错兜底、logo等，其他一律替换成CDN图片</p><h3 id="_5、wxml结构精简" tabindex="-1">5、wxml结构精简 <a class="header-anchor" href="#_5、wxml结构精简" aria-label="Permalink to &quot;5、wxml结构精简&quot;">​</a></h3><p>wxml的内容基本以原始文本的形式存在于打包后的代码中，其结构越复杂，最终生成的代码越大，通过精简wxml的结构，可以有效降低代码包的大小。</p><h2 id="优化手段-进阶" tabindex="-1">优化手段 -- 进阶 <a class="header-anchor" href="#优化手段-进阶" aria-label="Permalink to &quot;优化手段 -- 进阶&quot;">​</a></h2><p>常规手段用完之后基本已经到极限了，很难再进一步降低大小，这个时候必须得借助工程化的手段，才能达成压缩代码的目的。</p><h3 id="_1、文件路径压缩" tabindex="-1">1、文件路径压缩 <a class="header-anchor" href="#_1、文件路径压缩" aria-label="Permalink to &quot;1、文件路径压缩&quot;">​</a></h3><p>因为文件路径最终会原样打包到代码中，对于代码量很大的项目来说，替换成更短的路径也能省不少空间。组件越多、代码目录层级越深，最终的效果越明显。</p><p><strong>实现步骤如下：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">1、将组件挪动到根目录下--这种情况下路劲最短</span></span>\n<span class="line"><span style="color:#e1e4e8;">2、组件重命名，取一个更短的名字，如Table.js -&gt; 0.js</span></span>\n<span class="line"><span style="color:#e1e4e8;">3、修改引用该组件的页面/组件配置，将其改成新的路劲</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1、将组件挪动到根目录下--这种情况下路劲最短</span></span>\n<span class="line"><span style="color:#24292e;">2、组件重命名，取一个更短的名字，如Table.js -&gt; 0.js</span></span>\n<span class="line"><span style="color:#24292e;">3、修改引用该组件的页面/组件配置，将其改成新的路劲</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>【示例】</strong> <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26ed194501b3484d9c71793dfce36b4a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="image.png"> 编译后：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e15dd87a1f1f4fe2b557fe8dfae89dbe~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="image.png"></p><h3 id="_2、原子css" tabindex="-1">2、原子css <a class="header-anchor" href="#_2、原子css" aria-label="Permalink to &quot;2、原子css&quot;">​</a></h3><p>原子css的基本原则，决定了其基础库的大小是固定的，即使同样的css规则被使用了很多次，但其声明只有一次，唯一的弊端是会导致wxml变大，但总体来说代码包大小会下降很多。</p><p><strong>【示例】</strong> 很明显原子css的写法代码量少了很多，而且还省了class命名的空间 <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07b9a23e4470450484b95213b19207d6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="image.png"></p><h3 id="_3、类名压缩" tabindex="-1">3、类名压缩 <a class="header-anchor" href="#_3、类名压缩" aria-label="Permalink to &quot;3、类名压缩&quot;">​</a></h3><p>尽管采用原子css后，代码体积下降了多，但之前为了阅读的友好，命名仍然有些长，可以采用短命名替换，通过编译手段进一步降低代码的体积，而不影响到业务功能。</p><p><strong>【压缩前】</strong> <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/081912e508cf402b89ffc7379c63d206~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="image.png"></p><p><strong>【压缩后】</strong> <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cff33b95c5d640869cf002fb3e68fd0a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="image.png"></p><h2 id="终极手段" tabindex="-1">终极手段 <a class="header-anchor" href="#终极手段" aria-label="Permalink to &quot;终极手段&quot;">​</a></h2><p>理想的方式代码包按需加载，而不是整体加载，特别是在我们这种场景下，绝大部分的组件虽然加载了但并不会被用上，因此官方提供了分包加载的方式：<strong>分包异步化</strong>(<a href="https://link.juejin.cn/?target=https%3A%2F%2Fdevelopers.weixin.qq.com%2Fminiprogram%2Fdev%2Fframework%2Fsubpackages%2Fasync.html" title="https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/async.html" target="_blank" rel="noreferrer">参考资料</a>)</p><p><strong>【分包异步化】</strong></p><p>在小程序中，不同的分包对应不同的下载单元；因此，除了非独立分包可以依赖主包外，分包之间不能互相使用自定义组件或进行 <code>require</code>。「分包异步化」特性将允许通过一些配置和新的接口，使部分跨分包的内容可以等待下载后异步使用，从而一定程度上解决这个限制。</p><h3 id="看起来很美好" tabindex="-1">看起来很美好 <a class="header-anchor" href="#看起来很美好" aria-label="Permalink to &quot;看起来很美好&quot;">​</a></h3><p>为什么说看起来很美好呢，是因为我们的小程序需要支持微信、企业微信的移动端和PC端，目前来说PC端支持的不是特别好，需要升级到一定版本之后才行，特别是企业微信坑很多，不知道还有什么奇怪的问题。由于分包异步化是提前声明的，并不能动态的控制开关，如果在不支持的版本上会直接报错，因此综合考虑之后，只能放弃这种方式，等后续功能稳定之后再考虑。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>基础：开启代码压缩、分包、删除无用代码(包括无用样式)、本地图片替换成CDN图片、wxml结构精简 进阶：文件路径压缩、原子css、类名压缩</p>',36);const m=a(c,[["render",function(a,i,o,p,l,c){const m=e("ArticleMetadata"),b=e("ClientOnly");return t(),s("div",null,[d,r(b,null,{default:n((()=>[r(m)])),_:1}),h])}]]);export{l as __pageData,m as default};
