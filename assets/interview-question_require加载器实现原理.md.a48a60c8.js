import{_ as s,C as n,o as a,c as l,H as p,w as o,k as e,a as c,Q as r}from"./chunks/framework.bc643b65.js";const t=JSON.parse('{"title":"require加载器实现原理","description":"","frontmatter":{"createTime":"2022/11/07","tag":"js,面试题"},"headers":[],"relativePath":"interview-question/require加载器实现原理.md","filePath":"s/前端面试题/node/require加载器实现原理.md","lastUpdated":1696495218000}'),E={name:"interview-question/require加载器实现原理.md"},y=e("h1",{id:"require加载器实现原理",tabindex:"-1"},[c("require加载器实现原理 "),e("a",{class:"header-anchor",href:"#require加载器实现原理","aria-label":'Permalink to "require加载器实现原理"'},"​")],-1),i=r('<h2 id="_1-概述" tabindex="-1">1. 概述 <a class="header-anchor" href="#_1-概述" aria-label="Permalink to &quot;1\\. 概述&quot;">​</a></h2><p>人们常说<code>node</code>并不是一门新的编程语言，他只是<code>javascript</code>的运行时，运行时你可以简单地理解为运行<code>javascript</code>的环境。在大多数情况下会在浏览器中去运行<code>javascript</code>，有了<code>node</code>的出现，可以在<code>node</code>中去运行<code>javascript</code>，这意味着哪里安装了<code>node</code>或者浏览器，就可以在哪里运行<code>javascript</code>。</p><h2 id="_2-node模块化的实现" tabindex="-1">2. node模块化的实现 <a class="header-anchor" href="#_2-node模块化的实现" aria-label="Permalink to &quot;2\\. node模块化的实现&quot;">​</a></h2><p><code>node</code>中是自带模块化机制的，每个文件就是一个单独的模块，并且它遵循的是<code>CommonJS</code>规范，也就是使用<code>require</code>的方式导入模块，通过<code>module.export</code>的方式导出模块。</p><p><code>node</code>模块的运行机制也很简单，其实就是在每一个模块外层包裹了一层函数，有了函数的包裹就可以实现代码间的作用域隔离。</p><p>你可能会说，我在写代码的时候并没有包裹函数呀，是的的确如此，这一层函数是<code>node</code>自动实现的，可以来测试一下。</p><p>新建一个<code>js</code>文件，在第一行打印一个并不存在的变量，比如打印<code>window</code>，在<code>node</code>中是没有<code>window</code>的。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">console.log(window);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">console.log(window);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过<code>node</code>执行该文件，会发现报错信息如下。(请使用系统默认<code>cmd</code>执行命令)。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">require</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__filename</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__dirname</span><span style="color:#E1E4E8;">) { console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(window);</span></span>\n<span class="line"><span style="color:#B392F0;">ReferenceError</span><span style="color:#E1E4E8;">: window is not defined</span></span>\n<span class="line"><span style="color:#E1E4E8;">    at Object.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">anonymous</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Users</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">choice</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Desktop</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">node</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">main.js:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">75</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    at Module.</span><span style="color:#B392F0;">_compile</span><span style="color:#E1E4E8;"> (internal</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cjs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">loader.js:</span><span style="color:#79B8FF;">689</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    at Object.Module._extensions..</span><span style="color:#B392F0;">js</span><span style="color:#E1E4E8;"> (internal</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cjs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">loader.js:</span><span style="color:#79B8FF;">700</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    at Module.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;"> (internal</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cjs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">loader.js:</span><span style="color:#79B8FF;">599</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    at </span><span style="color:#B392F0;">tryModuleLoad</span><span style="color:#E1E4E8;"> (internal</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cjs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">loader.js:</span><span style="color:#79B8FF;">538</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    at Function.Module.</span><span style="color:#B392F0;">_load</span><span style="color:#E1E4E8;"> (internal</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cjs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">loader.js:</span><span style="color:#79B8FF;">530</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    at Function.Module.</span><span style="color:#B392F0;">runMain</span><span style="color:#E1E4E8;"> (internal</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cjs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">loader.js:</span><span style="color:#79B8FF;">742</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    at </span><span style="color:#B392F0;">startup</span><span style="color:#E1E4E8;"> (internal</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bootstrap</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">node.js:</span><span style="color:#79B8FF;">279</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    at </span><span style="color:#B392F0;">bootstrapNodeJSCore</span><span style="color:#E1E4E8;"> (internal</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bootstrap</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">node.js:</span><span style="color:#79B8FF;">752</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">exports</span><span style="color:#24292E;">, </span><span style="color:#E36209;">require</span><span style="color:#24292E;">, </span><span style="color:#E36209;">module</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__filename</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__dirname</span><span style="color:#24292E;">) { console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(window);</span></span>\n<span class="line"><span style="color:#6F42C1;">ReferenceError</span><span style="color:#24292E;">: window is not defined</span></span>\n<span class="line"><span style="color:#24292E;">    at Object.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">anonymous</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Users</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">choice</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Desktop</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">node</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">main.js:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">75</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">    at Module.</span><span style="color:#6F42C1;">_compile</span><span style="color:#24292E;"> (internal</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cjs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">loader.js:</span><span style="color:#005CC5;">689</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">    at Object.Module._extensions..</span><span style="color:#6F42C1;">js</span><span style="color:#24292E;"> (internal</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cjs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">loader.js:</span><span style="color:#005CC5;">700</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">    at Module.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;"> (internal</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cjs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">loader.js:</span><span style="color:#005CC5;">599</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">    at </span><span style="color:#6F42C1;">tryModuleLoad</span><span style="color:#24292E;"> (internal</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cjs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">loader.js:</span><span style="color:#005CC5;">538</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">    at Function.Module.</span><span style="color:#6F42C1;">_load</span><span style="color:#24292E;"> (internal</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cjs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">loader.js:</span><span style="color:#005CC5;">530</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">    at Function.Module.</span><span style="color:#6F42C1;">runMain</span><span style="color:#24292E;"> (internal</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cjs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">loader.js:</span><span style="color:#005CC5;">742</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">    at </span><span style="color:#6F42C1;">startup</span><span style="color:#24292E;"> (internal</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bootstrap</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">node.js:</span><span style="color:#005CC5;">279</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">19</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">    at </span><span style="color:#6F42C1;">bootstrapNodeJSCore</span><span style="color:#24292E;"> (internal</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bootstrap</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">node.js:</span><span style="color:#005CC5;">752</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可以看到报错的顶层有一个自执行的函数，, 函数中包含<code>exports</code>, <code>require</code>, <code>module</code>, <code>__filename</code>, <code>__dirname</code>这些常用的全局变量。</p><p>我在之前的《前端模块化发展历程》一文中介绍过。自执行函数也是前端模块化的实现方案之一，在早期前端没有模块化系统的时代，自执行函数可以很好的解决命名空间的问题，并且模块依赖的其他模块都可以通过参数传递进来。<code>cmd</code>和<code>amd</code>规范也都是依赖自执行函数实现的。</p><p>在模块系统中，每个文件就是一个模块，每个模块外面会自动套一个函数，并且定义了导出方式 <code>module.exports</code>或者<code>exports</code>，同时也定义了导入方式<code>require</code>。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> moduleA </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">})();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> moduleA </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_3-require加载模块" tabindex="-1">3. require加载模块 <a class="header-anchor" href="#_3-require加载模块" aria-label="Permalink to &quot;3\\. require加载模块&quot;">​</a></h2><p><code>require</code>依赖<code>node</code>中的<code>fs</code>模块来加载模块文件，<code>fs.readFile</code>读取到的是一个字符串。</p><p>在<code>javascrpt</code>中可以通过<code>eval</code>或者<code>new Function</code>的方式来将一个字符串转换成<code>js</code>代码来运行。</p><h3 id="_1-eval" tabindex="-1">1. eval <a class="header-anchor" href="#_1-eval" aria-label="Permalink to &quot;1\\. eval&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;yd&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;const a = 123; console.log(name)&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(str); </span><span style="color:#6A737D;">// yd;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;yd&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;const a = 123; console.log(name)&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(str); </span><span style="color:#6A737D;">// yd;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-new-function" tabindex="-1">2. new Function <a class="header-anchor" href="#_2-new-function" aria-label="Permalink to &quot;2\\. new Function&quot;">​</a></h3><p><code>new Function</code>接收的是一个要执行的字符串，返回的是一个新的函数，调用这个新的函数字符串就会执行了。如果这个函数需要传递参数，可以在<code>new Function</code>的时候依次传入参数，最后传入的是要执行的字符串。比如这里传入参数<code>b</code>，要执行的字符串<code>str</code>。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;let a = 1; return a + b&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, str);</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fun</span><span style="color:#E1E4E8;">(b, str)); </span><span style="color:#6A737D;">// 4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;let a = 1; return a + b&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fun</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, str);</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(b, str)); </span><span style="color:#6A737D;">// 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>可以看到<code>eval</code>和<code>Function</code>实例化都可以用来执行<code>javascript</code>字符串，似乎他们都可以来实现<code>require</code>模块加载。不过在<code>node</code>中并没有选用他们来实现模块化，原因也很简单因为他们都有一个致命的问题，就是都容易被不属于他们的变量所影响。</p><p>如下<code>str</code>字符串中并没有定义a，但是确可以使用上面定义的<code>a</code>变量，这显然是不对的，在模块化机制中，<code>str</code>字符串应该具有自身独立的运行空间，自身不存在的变量是不可以直接使用的。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;console.log(a)&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(str);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">(str);</span></span>\n<span class="line"><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;console.log(a)&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(str);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">func</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">(str);</span></span>\n<span class="line"><span style="color:#6F42C1;">func</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>node</code>存在一个<code>vm</code>虚拟环境的概念，用来运行额外的<code>js</code>文件，他可以保证<code>javascript</code>执行的独立性，不会被外部所影响。</p><h3 id="_3-vm-内置模块" tabindex="-1">3. vm 内置模块 <a class="header-anchor" href="#_3-vm-内置模块" aria-label="Permalink to &quot;3\\. vm 内置模块&quot;">​</a></h3><p>虽然外部定义了<code>hello</code>，但是<code>str</code>是一个独立的模块，并不在<code>hello</code>变量，所以会直接报错。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 引入vm模块， 不需要安装，node 自建模块</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;vm&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;yd&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;console.log(hello)&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">wm.</span><span style="color:#B392F0;">runInThisContext</span><span style="color:#E1E4E8;">(str); </span><span style="color:#6A737D;">// 报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 引入vm模块， 不需要安装，node 自建模块</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;vm&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;yd&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;console.log(hello)&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">wm.</span><span style="color:#6F42C1;">runInThisContext</span><span style="color:#24292E;">(str); </span><span style="color:#6A737D;">// 报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>所以<code>node</code>执行<code>javascript</code>模块时可以采用<code>vm</code>来实现。就可以保证模块的独立性了。</p><h2 id="_4-require代码实现" tabindex="-1">4. require代码实现 <a class="header-anchor" href="#_4-require代码实现" aria-label="Permalink to &quot;4\\. require代码实现&quot;">​</a></h2><p>介绍r<code>equire</code>代码实现之前先来回顾两个<code>node</code>模块的用法，因为下面会用得到。</p><h3 id="_1-path模块" tabindex="-1">1. path模块 <a class="header-anchor" href="#_1-path模块" aria-label="Permalink to &quot;1\\. path模块&quot;">​</a></h3><p>用于处理文件路径。</p><p>basename: 基础路径, 有文件路径就不是基础路径，基础路劲是<code>1.js</code></p><p>extname: 获取扩展名</p><p>dirname: 父级路劲</p><p>join: 拼接路径</p><p>resolve: 当前文件夹的绝对路径，注意使用的时候不要在结尾添加<code>/</code></p><p>__dirname: 当前文件所在文件夹的路径</p><p>__filename: 当前文件的绝对路径</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;s&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">basename</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;1.js&#39;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">extname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2.txt&#39;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">dirname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2.txt&#39;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a/b/c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;d/e/f&#39;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// a/b/c/d/e/</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2.txt&#39;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;s&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">basename</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;1.js&#39;</span><span style="color:#24292E;">));</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">extname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;2.txt&#39;</span><span style="color:#24292E;">));</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">dirname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;2.txt&#39;</span><span style="color:#24292E;">));</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a/b/c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;d/e/f&#39;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// a/b/c/d/e/</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;2.txt&#39;</span><span style="color:#24292E;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-fs模块" tabindex="-1">2. fs模块 <a class="header-anchor" href="#_2-fs模块" aria-label="Permalink to &quot;2\\. fs模块&quot;">​</a></h3><p>用于操作文件或者文件夹，比如文件的读写，新增，删除等。常用方法有<code>readFile</code>和<code>readFileSync</code>，分别是异步读取文件和同步读取文件。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./name.txt&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;utf8&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 如果不传入编码，出来的是二进制</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(buffer);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./name.txt&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;utf8&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 如果不传入编码，出来的是二进制</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(buffer);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>fs.access: 判断是否存在，<code>node10</code>提供的，<code>exists</code>方法已经被废弃, 原因是不符合<code>node</code>规范，所以改为采用<code>access</code>来判断文件是否存在。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">accessSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./name.txt&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(e) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 文件不存在</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">accessSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./name.txt&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(e) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 文件不存在</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_5-手动实现require模块加载器" tabindex="-1">5. 手动实现require模块加载器 <a class="header-anchor" href="#_5-手动实现require模块加载器" aria-label="Permalink to &quot;5\\. 手动实现require模块加载器&quot;">​</a></h2><p>首先导入依赖的模块<code>path</code>，<code>fs</code>, <code>vm</code>, 并且创建一个<code>Require</code>函数，这个函数接收一个<code>modulePath</code>参数，表示要导入的文件路径。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 导入依赖</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 路径操作</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 文件读取</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;vm&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 文件执行</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 定义导入类，参数为模块路径</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Require</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">modulePath</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 导入依赖</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 路径操作</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 文件读取</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;vm&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 文件执行</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 定义导入类，参数为模块路径</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Require</span><span style="color:#24292E;">(</span><span style="color:#E36209;">modulePath</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在<code>Require</code>中获取到模块的绝对路径，方便使用<code>fs</code>加载模块，这里读取模块内容使用<code>new Module</code>来抽象，使用<code>tryModuleLoad</code>来加载模块内容，<code>Module</code>和<code>tryModuleLoad</code>稍后实现，<code>Require</code>的返回值应该是模块的内容，也就是<code>module.exports</code>。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 定义导入类，参数为模块路径</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Require</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">modulePath</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取当前要加载的绝对路径</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> absPathname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, modulePath);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建模块，新建Module实例</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">(absPathname);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 加载当前模块</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">tryModuleLoad</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 返回exports对象</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 定义导入类，参数为模块路径</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Require</span><span style="color:#24292E;">(</span><span style="color:#E36209;">modulePath</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取当前要加载的绝对路径</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> absPathname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, modulePath);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建模块，新建Module实例</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">(absPathname);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加载当前模块</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">tryModuleLoad</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 返回exports对象</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>Module</code>的实现很简单，就是给模块创建一个<code>exports</code>对象，<code>tryModuleLoad</code>执行的时候将内容加入到<code>exports</code>中，<code>id</code>就是模块的绝对路径。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 定义模块, 添加文件id标识和exports属性</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 读取到的文件内容会放在exports中</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 定义模块, 添加文件id标识和exports属性</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">(</span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取到的文件内容会放在exports中</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>之前说过<code>node</code>模块是运行在一个函数中，这里给<code>Module</code>挂载静态属性<code>wrapper</code>，里面定义一下这个函数的字符串，<code>wrapper</code>是一个数组，数组的第一个元素就是函数的参数部分，其中有<code>exports</code>，<code>module</code>，<code>Require</code>，<code>__dirname</code>，<code>__filename</code>, 都是模块中常用的全局变量。注意这里传入的<code>Require</code>参数是定义的Require。</p><p>第二个参数就是函数的结束部分。两部分都是字符串，使用的时候将他们包裹在模块的字符串外部就可以了。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Module.wrapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;(function(exports, module, Require, __dirname, __filename) {&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;})&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Module.wrapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;(function(exports, module, Require, __dirname, __filename) {&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;})&quot;</span></span>\n<span class="line"><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>_extensions</code>用于针对不同的模块扩展名使用不同的加载方式，比如<code>JSON</code>和<code>javascript</code>加载方式肯定是不同的。<code>JSON</code>使用<code>JSON.parse</code>来运行。</p><p><code>javascript</code>使用<code>vm.runInThisContext</code>来运行，可以看到<code>fs.readFileSync</code>传入的是<code>module.id</code>也就是<code>Module</code>定义时候<code>id</code>存储的是模块的绝对路径，读取到的<code>content</code>是一个字符串，使用<code>Module.wrapper</code>来包裹一下就相当于在这个模块外部又包裹了一个函数，也就实现了私有作用域。</p><p>使用<code>call</code>来执行<code>fn</code>函数，第一个参数改变运行的<code>this</code>传入<code>module.exports</code>，后面的参数就是函数外面包裹参数<code>exports</code>, <code>module</code>, <code>Require</code>, <code>__dirname</code>, <code>__filename</code>。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Module._extensions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;.js&#39;</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">content</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;utf8&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fnStr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Module.wrapper[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> content </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Module.wrapper[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.</span><span style="color:#B392F0;">runInThisContext</span><span style="color:#E1E4E8;">(fnStr);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        fn.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, Require,_filename,_dirname);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;.json&#39;</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">json</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;utf8&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(json); </span><span style="color:#6A737D;">// 把文件的结果放在exports属性上</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Module._extensions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;.js&#39;</span><span style="color:#24292E;">(</span><span style="color:#E36209;">module</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">content</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;utf8&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fnStr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Module.wrapper[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> content </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Module.wrapper[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.</span><span style="color:#6F42C1;">runInThisContext</span><span style="color:#24292E;">(fnStr);</span></span>\n<span class="line"><span style="color:#24292E;">        fn.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, Require,_filename,_dirname);</span></span>\n<span class="line"><span style="color:#24292E;">    },</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;.json&#39;</span><span style="color:#24292E;">(</span><span style="color:#E36209;">module</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">json</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;utf8&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(json); </span><span style="color:#6A737D;">// 把文件的结果放在exports属性上</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>tryModuleLoad</code>函数接收的是模块对象，通过p<code>ath.extname</code>来获取模块的后缀名，然后使用<code>Module._extensions</code>来加载模块。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 定义模块加载方法</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tryModuleLoad</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取扩展名</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">extension</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">extname</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过后缀加载当前模块</span></span>\n<span class="line"><span style="color:#E1E4E8;">    Module._extensions[extension](</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 定义模块加载方法</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryModuleLoad</span><span style="color:#24292E;">(</span><span style="color:#E36209;">module</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取扩展名</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">extension</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">extname</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过后缀加载当前模块</span></span>\n<span class="line"><span style="color:#24292E;">    Module._extensions[extension](</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>至此<code>Require</code>加载机制基本就写完了。<code>Require</code>加载模块的时候传入模块名称，在<code>Require</code>方法中使用<code>path.resolve(__dirname, modulePath)</code>获取到文件的绝对路径。然后通过new Module实例化的方式创建<code>module</code>对象，将模块的绝对路径存储在<code>module</code>的<code>id</code>属性中，在<code>module</code>中创建<code>exports</code>属性为一个<code>json</code>对象。</p><p>使用<code>tryModuleLoad</code>方法去加载模块，<code>tryModuleLoad</code>中使用<code>path.extname</code>获取到文件的扩展名，然后根据扩展名来执行对应的模块加载机制。</p><p>最终将加载到的模块挂载<code>module.exports</code>中。<code>tryModuleLoad</code>执行完毕之后<code>module.exports</code>已经存在了，直接返回就可以了。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 导入依赖</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 路径操作</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 文件读取</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;vm&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 文件执行</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 定义导入类，参数为模块路径</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Require</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">modulePath</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取当前要加载的绝对路径</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> absPathname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, modulePath);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建模块，新建Module实例</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">(absPathname);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 加载当前模块</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">tryModuleLoad</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 返回exports对象</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 定义模块, 添加文件id标识和exports属性</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 读取到的文件内容会放在exports中</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 定义包裹模块内容的函数</span></span>\n<span class="line"><span style="color:#E1E4E8;">Module.wrapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;(function(exports, module, Require, __dirname, __filename) {&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;})&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#6A737D;">// 定义扩展名，不同的扩展名，加载方式不同，实现js和json</span></span>\n<span class="line"><span style="color:#E1E4E8;">Module._extensions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;.js&#39;</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">content</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;utf8&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fnStr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Module.wrapper[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> content </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Module.wrapper[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.</span><span style="color:#B392F0;">runInThisContext</span><span style="color:#E1E4E8;">(fnStr);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        fn.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, Require,_filename,_dirname);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;.json&#39;</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">json</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;utf8&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(json); </span><span style="color:#6A737D;">// 把文件的结果放在exports属性上</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 定义模块加载方法</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tryModuleLoad</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取扩展名</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">extension</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">extname</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过后缀加载当前模块</span></span>\n<span class="line"><span style="color:#E1E4E8;">    Module._extensions[extension](</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 导入依赖</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 路径操作</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 文件读取</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;vm&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 文件执行</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 定义导入类，参数为模块路径</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Require</span><span style="color:#24292E;">(</span><span style="color:#E36209;">modulePath</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取当前要加载的绝对路径</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> absPathname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, modulePath);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建模块，新建Module实例</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">(absPathname);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加载当前模块</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">tryModuleLoad</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 返回exports对象</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 定义模块, 添加文件id标识和exports属性</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">(</span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取到的文件内容会放在exports中</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 定义包裹模块内容的函数</span></span>\n<span class="line"><span style="color:#24292E;">Module.wrapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;(function(exports, module, Require, __dirname, __filename) {&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;})&quot;</span></span>\n<span class="line"><span style="color:#24292E;">]</span></span>\n<span class="line"><span style="color:#6A737D;">// 定义扩展名，不同的扩展名，加载方式不同，实现js和json</span></span>\n<span class="line"><span style="color:#24292E;">Module._extensions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;.js&#39;</span><span style="color:#24292E;">(</span><span style="color:#E36209;">module</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">content</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;utf8&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fnStr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Module.wrapper[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> content </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Module.wrapper[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.</span><span style="color:#6F42C1;">runInThisContext</span><span style="color:#24292E;">(fnStr);</span></span>\n<span class="line"><span style="color:#24292E;">        fn.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, Require,_filename,_dirname);</span></span>\n<span class="line"><span style="color:#24292E;">    },</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;.json&#39;</span><span style="color:#24292E;">(</span><span style="color:#E36209;">module</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">json</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;utf8&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(json); </span><span style="color:#6A737D;">// 把文件的结果放在exports属性上</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 定义模块加载方法</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryModuleLoad</span><span style="color:#24292E;">(</span><span style="color:#E36209;">module</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取扩展名</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">extension</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">extname</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过后缀加载当前模块</span></span>\n<span class="line"><span style="color:#24292E;">    Module._extensions[extension](</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h2 id="_6-给模块添加缓存" tabindex="-1">6. 给模块添加缓存 <a class="header-anchor" href="#_6-给模块添加缓存" aria-label="Permalink to &quot;6\\. 给模块添加缓存&quot;">​</a></h2><p>添加缓存也比较简单，就是文件加载的时候将文件放入缓存在，再去加载模块时先看缓存中是否存在，如果存在直接使用，如果不存在再去重新嘉爱，加载之后再放入缓存。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 定义导入类，参数为模块路径</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Require</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">modulePath</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取当前要加载的绝对路径</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> absPathname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, modulePath);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从缓存中读取，如果存在，直接返回结果</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Module._cache[absPathname]) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Module._cache[absPathname].exports;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建模块，新建Module实例</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">(absPathname);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加缓存</span></span>\n<span class="line"><span style="color:#E1E4E8;">    Module._cache[absPathname] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 加载当前模块</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">tryModuleLoad</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 返回exports对象</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 定义导入类，参数为模块路径</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Require</span><span style="color:#24292E;">(</span><span style="color:#E36209;">modulePath</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取当前要加载的绝对路径</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> absPathname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, modulePath);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从缓存中读取，如果存在，直接返回结果</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Module._cache[absPathname]) {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Module._cache[absPathname].exports;</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建模块，新建Module实例</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">(absPathname);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加缓存</span></span>\n<span class="line"><span style="color:#24292E;">    Module._cache[absPathname] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加载当前模块</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">tryModuleLoad</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 返回exports对象</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="_7-省略模块后缀名" tabindex="-1">7. 省略模块后缀名 <a class="header-anchor" href="#_7-省略模块后缀名" aria-label="Permalink to &quot;7\\. 省略模块后缀名&quot;">​</a></h2><p>自动给模块添加后缀名，实现省略后缀名加载模块，其实也就是如果文件没有后缀名的时候遍历一下所有的后缀名看一下文件是否存在。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 定义导入类，参数为模块路径</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Require</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">modulePath</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取当前要加载的绝对路径</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> absPathname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, modulePath);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取所有后缀名</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">extNames</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(Module._extensions);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 存储原始文件路径</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">oldPath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> absPathname;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findExt</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">absPathname</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> extNames.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> throw </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;文件不存在&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            fs.</span><span style="color:#B392F0;">accessSync</span><span style="color:#E1E4E8;">(absPathname);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> absPathname;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(e) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ext</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> extNames[index</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">findExt</span><span style="color:#E1E4E8;">(oldPath </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ext);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 递归追加后缀名，判断文件是否存在</span></span>\n<span class="line"><span style="color:#E1E4E8;">    absPathname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findExt</span><span style="color:#E1E4E8;">(absPathname);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从缓存中读取，如果存在，直接返回结果</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Module._cache[absPathname]) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Module._cache[absPathname].exports;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建模块，新建Module实例</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">(absPathname);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加缓存</span></span>\n<span class="line"><span style="color:#E1E4E8;">    Module._cache[absPathname] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 加载当前模块</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">tryModuleLoad</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 返回exports对象</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 定义导入类，参数为模块路径</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Require</span><span style="color:#24292E;">(</span><span style="color:#E36209;">modulePath</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取当前要加载的绝对路径</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> absPathname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, modulePath);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取所有后缀名</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">extNames</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(Module._extensions);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 存储原始文件路径</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">oldPath</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> absPathname;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findExt</span><span style="color:#24292E;">(</span><span style="color:#E36209;">absPathname</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> extNames.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> throw </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;文件不存在&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">        }</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">            fs.</span><span style="color:#6F42C1;">accessSync</span><span style="color:#24292E;">(absPathname);</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> absPathname;</span></span>\n<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(e) {</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ext</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> extNames[index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">];</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">findExt</span><span style="color:#24292E;">(oldPath </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ext);</span></span>\n<span class="line"><span style="color:#24292E;">        }</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 递归追加后缀名，判断文件是否存在</span></span>\n<span class="line"><span style="color:#24292E;">    absPathname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findExt</span><span style="color:#24292E;">(absPathname);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从缓存中读取，如果存在，直接返回结果</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Module._cache[absPathname]) {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Module._cache[absPathname].exports;</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建模块，新建Module实例</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">(absPathname);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加缓存</span></span>\n<span class="line"><span style="color:#24292E;">    Module._cache[absPathname] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加载当前模块</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">tryModuleLoad</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 返回exports对象</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h2 id="_8-整理实现步骤" tabindex="-1">8. 整理实现步骤 <a class="header-anchor" href="#_8-整理实现步骤" aria-label="Permalink to &quot;8\\. 整理实现步骤&quot;">​</a></h2><h3 id="_1-导入相关模块-创建一个require方法" tabindex="-1">1. 导入相关模块，创建一个Require方法 <a class="header-anchor" href="#_1-导入相关模块-创建一个require方法" aria-label="Permalink to &quot;1\\. 导入相关模块，创建一个Require方法&quot;">​</a></h3><h3 id="_2-抽离通过module-load方法-用于加载模块" tabindex="-1">2. 抽离通过Module._load方法，用于加载模块 <a class="header-anchor" href="#_2-抽离通过module-load方法-用于加载模块" aria-label="Permalink to &quot;2\\. 抽离通过Module.\\_load方法，用于加载模块&quot;">​</a></h3><h3 id="_3-module-resolvefilename-根据相对路径-转换成绝对路径" tabindex="-1">3. Module.resolveFilename 根据相对路径，转换成绝对路径 <a class="header-anchor" href="#_3-module-resolvefilename-根据相对路径-转换成绝对路径" aria-label="Permalink to &quot;3\\. Module.resolveFilename 根据相对路径，转换成绝对路径&quot;">​</a></h3><h3 id="_4-缓存模块-module-cache-同一个模块不要重复加载-提升性能" tabindex="-1">4. 缓存模块 Module._cache，同一个模块不要重复加载，提升性能 <a class="header-anchor" href="#_4-缓存模块-module-cache-同一个模块不要重复加载-提升性能" aria-label="Permalink to &quot;4\\. 缓存模块 Module.\\_cache，同一个模块不要重复加载，提升性能&quot;">​</a></h3><h3 id="_5-创建模块-id-保存的内容是-exports-相当于this" tabindex="-1">5. 创建模块 id: 保存的内容是 exports = {}相当于this <a class="header-anchor" href="#_5-创建模块-id-保存的内容是-exports-相当于this" aria-label="Permalink to &quot;5\\. 创建模块 id: 保存的内容是 exports = {}相当于this&quot;">​</a></h3><h3 id="_6-利用trymoduleload-module-filename-尝试加载模块" tabindex="-1">6. 利用tryModuleLoad(module, filename) 尝试加载模块 <a class="header-anchor" href="#_6-利用trymoduleload-module-filename-尝试加载模块" aria-label="Permalink to &quot;6\\. 利用tryModuleLoad(module, filename) 尝试加载模块&quot;">​</a></h3><h3 id="_7-module-extensions使用读取文件" tabindex="-1">7. Module._extensions使用读取文件 <a class="header-anchor" href="#_7-module-extensions使用读取文件" aria-label="Permalink to &quot;7\\. Module.\\_extensions使用读取文件&quot;">​</a></h3><h3 id="_8-module-wrap-把读取到的js包裹一个函数" tabindex="-1">8. Module.wrap: 把读取到的js包裹一个函数 <a class="header-anchor" href="#_8-module-wrap-把读取到的js包裹一个函数" aria-label="Permalink to &quot;8\\. Module.wrap: 把读取到的js包裹一个函数&quot;">​</a></h3><h3 id="_9-将拿到的字符串使用runinthiscontext运行字符串" tabindex="-1">9. 将拿到的字符串使用runInThisContext运行字符串 <a class="header-anchor" href="#_9-将拿到的字符串使用runinthiscontext运行字符串" aria-label="Permalink to &quot;9\\. 将拿到的字符串使用runInThisContext运行字符串&quot;">​</a></h3><h3 id="_10-让字符串执行并将this改编成exports" tabindex="-1">10. 让字符串执行并将this改编成exports <a class="header-anchor" href="#_10-让字符串执行并将this改编成exports" aria-label="Permalink to &quot;10\\. 让字符串执行并将this改编成exports&quot;">​</a></h3>',84);const d=s(E,[["render",function(s,e,c,r,t,E){const d=n("ArticleMetadata"),u=n("ClientOnly");return a(),l("div",null,[y,p(u,null,{default:o((()=>[p(d)])),_:1}),i])}]]);export{t as __pageData,d as default};
