import{_ as s,C as n,o as a,c as l,H as p,w as o,k as e,a as r,Q as c}from"./chunks/framework.f92cd432.js";const t=JSON.parse('{"title":"浅拷贝与深拷贝","description":"","frontmatter":{"createTime":"2022/11/16","tags":"js,面试题"},"headers":[],"relativePath":"interview-question/浅拷贝与深拷贝.md","filePath":"全部文档/前端面试题/js/浅拷贝与深拷贝.md","lastUpdated":1696860910000}'),E={name:"interview-question/浅拷贝与深拷贝.md"},y=e("h1",{id:"浅拷贝与深拷贝",tabindex:"-1"},[r("浅拷贝与深拷贝 "),e("a",{class:"header-anchor",href:"#浅拷贝与深拷贝","aria-label":'Permalink to "浅拷贝与深拷贝"'},"​")],-1),i=c('<h2 id="浅拷贝与深拷贝-1" tabindex="-1">浅拷贝与深拷贝 <a class="header-anchor" href="#浅拷贝与深拷贝-1" aria-label="Permalink to &quot;浅拷贝与深拷贝&quot;">​</a></h2><ul><li><p>浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以<strong>如果其中一个对象改变了这个地址，就会影响到另一个对象</strong>。</p></li><li><p>深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且<strong>修改新对象不会影响原对象</strong>。</p></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {b: {c: {}};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">var a2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shallowClone</span><span style="color:#E1E4E8;">(a1); </span><span style="color:#6A737D;">// 浅拷贝方法</span></span>\n<span class="line"><span style="color:#E1E4E8;">a2.b.c </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> a1.b.c </span><span style="color:#6A737D;">// true 新旧对象还是共享同一块内存</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">var a3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deepClone</span><span style="color:#E1E4E8;">(a3); </span><span style="color:#6A737D;">// 深拷贝方法</span></span>\n<span class="line"><span style="color:#E1E4E8;">a3.b.c </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> a1.b.c </span><span style="color:#6A737D;">// false 新对象跟原对象不共享内存</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {b: {c: {}};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">var a2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shallowClone</span><span style="color:#24292E;">(a1); </span><span style="color:#6A737D;">// 浅拷贝方法</span></span>\n<span class="line"><span style="color:#24292E;">a2.b.c </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> a1.b.c </span><span style="color:#6A737D;">// true 新旧对象还是共享同一块内存</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">var a3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deepClone</span><span style="color:#24292E;">(a3); </span><span style="color:#6A737D;">// 深拷贝方法</span></span>\n<span class="line"><span style="color:#24292E;">a3.b.c </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> a1.b.c </span><span style="color:#6A737D;">// false 新对象跟原对象不共享内存</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>借助<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FConardLi" title="https://github.com/ConardLi" target="_blank" rel="noreferrer">ConardLi大佬</a>以下两张图片，帮我们更好的理解两者的含义：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/1/170965259fb768fd~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/1/1709652a7948d1b8~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>总而言之，浅拷贝只复制指向某个对象的指针，而不复制对象本身，<strong>新旧对象还是共享同一块内存</strong>。但深拷贝会另外创造一个一模一样的对象，<strong>新对象跟原对象不共享内存</strong>，修改新对象不会改到原对象。</p><h2 id="赋值和深-浅拷贝的区别" tabindex="-1">赋值和深/浅拷贝的区别 <a class="header-anchor" href="#赋值和深-浅拷贝的区别" aria-label="Permalink to &quot;赋值和深/浅拷贝的区别&quot;">​</a></h2><p>这三者的区别如下，不过比较的前提都是<strong>针对引用类型</strong>：</p><ul><li><p>当我们把一个对象赋值给一个新的变量时，<strong>赋的其实是该对象的在栈中的地址，而不是堆中的数据</strong>。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。</p></li><li><p>浅拷贝：重新在堆中创建内存，拷贝前后对象的基本数据类型互不影响，但拷贝前后对象的引用类型因共享同一块内存，会相互影响。</p></li><li><p>深拷贝：从堆内存中开辟一个新的区域存放新对象，对对象中的子对象进行递归拷贝,拷贝前后的两个对象互不影响。</p></li></ul><p>我们先来看下面的例子，对比赋值与深/浅拷贝得到的对象修改后对原始对象的影响：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 对象赋值</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    name : </span><span style="color:#9ECBFF;">&#39;浪里行舟&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    arr : [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">],</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj1;</span></span>\n<span class="line"><span style="color:#E1E4E8;">obj2.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;阿浪&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">obj2.arr[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">] ;</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;obj1&#39;</span><span style="color:#E1E4E8;">,obj1) </span><span style="color:#6A737D;">// obj1 { name: &#39;阿浪&#39;, arr: [ 1, [ 5, 6, 7 ], 4 ] }</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;obj2&#39;</span><span style="color:#E1E4E8;">,obj2) </span><span style="color:#6A737D;">// obj2 { name: &#39;阿浪&#39;, arr: [ 1, [ 5, 6, 7 ], 4 ] }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 对象赋值</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    name : </span><span style="color:#032F62;">&#39;浪里行舟&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    arr : [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">],</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">],</span></span>\n<span class="line"><span style="color:#24292E;">};</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj1;</span></span>\n<span class="line"><span style="color:#24292E;">obj2.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;阿浪&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">obj2.arr[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">] ;</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;obj1&#39;</span><span style="color:#24292E;">,obj1) </span><span style="color:#6A737D;">// obj1 { name: &#39;阿浪&#39;, arr: [ 1, [ 5, 6, 7 ], 4 ] }</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;obj2&#39;</span><span style="color:#24292E;">,obj2) </span><span style="color:#6A737D;">// obj2 { name: &#39;阿浪&#39;, arr: [ 1, [ 5, 6, 7 ], 4 ] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 浅拷贝</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    name : </span><span style="color:#9ECBFF;">&#39;浪里行舟&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    arr : [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">],</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj3</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">shallowClone</span><span style="color:#E1E4E8;">(obj1)</span></span>\n<span class="line"><span style="color:#E1E4E8;">obj3.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;阿浪&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">obj3.arr[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">] ; </span><span style="color:#6A737D;">// 新旧对象还是共享同一块内存</span></span>\n<span class="line"><span style="color:#6A737D;">// 这是个浅拷贝的方法</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shallowClone</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> source) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (source.</span><span style="color:#B392F0;">hasOwnProperty</span><span style="color:#E1E4E8;">(i)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            target[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> source[i];</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> target;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;obj1&#39;</span><span style="color:#E1E4E8;">,obj1) </span><span style="color:#6A737D;">// obj1 { name: &#39;浪里行舟&#39;, arr: [ 1, [ 5, 6, 7 ], 4 ] }</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;obj3&#39;</span><span style="color:#E1E4E8;">,obj3) </span><span style="color:#6A737D;">// obj3 { name: &#39;阿浪&#39;, arr: [ 1, [ 5, 6, 7 ], 4 ] }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 浅拷贝</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    name : </span><span style="color:#032F62;">&#39;浪里行舟&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    arr : [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">],</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">],</span></span>\n<span class="line"><span style="color:#24292E;">};</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj3</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">shallowClone</span><span style="color:#24292E;">(obj1)</span></span>\n<span class="line"><span style="color:#24292E;">obj3.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;阿浪&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">obj3.arr[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">] ; </span><span style="color:#6A737D;">// 新旧对象还是共享同一块内存</span></span>\n<span class="line"><span style="color:#6A737D;">// 这是个浅拷贝的方法</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shallowClone</span><span style="color:#24292E;">(</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> source) {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (source.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(i)) {</span></span>\n<span class="line"><span style="color:#24292E;">            target[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> source[i];</span></span>\n<span class="line"><span style="color:#24292E;">        }</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> target;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;obj1&#39;</span><span style="color:#24292E;">,obj1) </span><span style="color:#6A737D;">// obj1 { name: &#39;浪里行舟&#39;, arr: [ 1, [ 5, 6, 7 ], 4 ] }</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;obj3&#39;</span><span style="color:#24292E;">,obj3) </span><span style="color:#6A737D;">// obj3 { name: &#39;阿浪&#39;, arr: [ 1, [ 5, 6, 7 ], 4 ] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 深拷贝</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    name : </span><span style="color:#9ECBFF;">&#39;浪里行舟&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    arr : [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">],</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj4</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">deepClone</span><span style="color:#E1E4E8;">(obj1)</span></span>\n<span class="line"><span style="color:#E1E4E8;">obj4.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;阿浪&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">obj4.arr[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">] ; </span><span style="color:#6A737D;">// 新对象跟原对象不共享内存</span></span>\n<span class="line"><span style="color:#6A737D;">// 这是个深拷贝的方法</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deepClone</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (obj </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> obj; </span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (obj </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">(obj);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (obj </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">(obj);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;object&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> obj;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> cloneObj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> obj.</span><span style="color:#B392F0;">constructor</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> obj) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (obj.</span><span style="color:#B392F0;">hasOwnProperty</span><span style="color:#E1E4E8;">(key)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 实现一个递归拷贝</span></span>\n<span class="line"><span style="color:#E1E4E8;">        cloneObj[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deepClone</span><span style="color:#E1E4E8;">(obj[key]);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cloneObj;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;obj1&#39;</span><span style="color:#E1E4E8;">,obj1) </span><span style="color:#6A737D;">// obj1 { name: &#39;浪里行舟&#39;, arr: [ 1, [ 2, 3 ], 4 ] }</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;obj4&#39;</span><span style="color:#E1E4E8;">,obj4) </span><span style="color:#6A737D;">// obj4 { name: &#39;阿浪&#39;, arr: [ 1, [ 5, 6, 7 ], 4 ] }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 深拷贝</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    name : </span><span style="color:#032F62;">&#39;浪里行舟&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    arr : [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">],</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">],</span></span>\n<span class="line"><span style="color:#24292E;">};</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj4</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">deepClone</span><span style="color:#24292E;">(obj1)</span></span>\n<span class="line"><span style="color:#24292E;">obj4.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;阿浪&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">obj4.arr[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">] ; </span><span style="color:#6A737D;">// 新对象跟原对象不共享内存</span></span>\n<span class="line"><span style="color:#6A737D;">// 这是个深拷贝的方法</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deepClone</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj; </span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">(obj);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">(obj);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;object&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> cloneObj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> obj.</span><span style="color:#6F42C1;">constructor</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> obj) {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(key)) {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 实现一个递归拷贝</span></span>\n<span class="line"><span style="color:#24292E;">        cloneObj[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deepClone</span><span style="color:#24292E;">(obj[key]);</span></span>\n<span class="line"><span style="color:#24292E;">      }</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cloneObj;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;obj1&#39;</span><span style="color:#24292E;">,obj1) </span><span style="color:#6A737D;">// obj1 { name: &#39;浪里行舟&#39;, arr: [ 1, [ 2, 3 ], 4 ] }</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;obj4&#39;</span><span style="color:#24292E;">,obj4) </span><span style="color:#6A737D;">// obj4 { name: &#39;阿浪&#39;, arr: [ 1, [ 5, 6, 7 ], 4 ] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>上面例子中，obj1是原始对象，obj2是赋值操作得到的对象，obj3浅拷贝得到的对象，obj4深拷贝得到的对象，通过下面的表格，我们可以很清晰看到他们对原始数据的影响：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/23/167da74d45d3103b~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><h2 id="浅拷贝的实现方式" tabindex="-1">浅拷贝的实现方式 <a class="header-anchor" href="#浅拷贝的实现方式" aria-label="Permalink to &quot;浅拷贝的实现方式&quot;">​</a></h2><h4 id="_1-object-assign" tabindex="-1">1.Object.assign() <a class="header-anchor" href="#_1-object-assign" aria-label="Permalink to &quot;1.Object.assign()&quot;">​</a></h4><p>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { person: {name: </span><span style="color:#9ECBFF;">&quot;kobe&quot;</span><span style="color:#E1E4E8;">, age: </span><span style="color:#79B8FF;">41</span><span style="color:#E1E4E8;">},sports:</span><span style="color:#9ECBFF;">&#39;basketball&#39;</span><span style="color:#E1E4E8;"> };</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">({}, obj1);</span></span>\n<span class="line"><span style="color:#E1E4E8;">obj2.person.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;wade&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">obj2.sports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;football&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj1); </span><span style="color:#6A737D;">// { person: { name: &#39;wade&#39;, age: 41 }, sports: &#39;basketball&#39; }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { person: {name: </span><span style="color:#032F62;">&quot;kobe&quot;</span><span style="color:#24292E;">, age: </span><span style="color:#005CC5;">41</span><span style="color:#24292E;">},sports:</span><span style="color:#032F62;">&#39;basketball&#39;</span><span style="color:#24292E;"> };</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({}, obj1);</span></span>\n<span class="line"><span style="color:#24292E;">obj2.person.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;wade&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">obj2.sports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;football&#39;</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj1); </span><span style="color:#6A737D;">// { person: { name: &#39;wade&#39;, age: 41 }, sports: &#39;basketball&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-函数库lodash的-clone方法" tabindex="-1">2.函数库lodash的_.clone方法 <a class="header-anchor" href="#_2-函数库lodash的-clone方法" aria-label="Permalink to &quot;2.函数库lodash的\\_.clone方法&quot;">​</a></h4><p>该函数库也有提供_.clone用来做 Shallow Copy,后面我们会再介绍利用这个库实现深拷贝。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;lodash&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    b: { f: { g: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> } },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    c: [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _.</span><span style="color:#B392F0;">clone</span><span style="color:#E1E4E8;">(obj1);</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj1.b.f </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> obj2.b.f);</span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lodash&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    b: { f: { g: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> } },</span></span>\n<span class="line"><span style="color:#24292E;">    c: [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>\n<span class="line"><span style="color:#24292E;">};</span></span>\n<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _.</span><span style="color:#6F42C1;">clone</span><span style="color:#24292E;">(obj1);</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj1.b.f </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> obj2.b.f);</span><span style="color:#6A737D;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_3-展开运算符" tabindex="-1">3.展开运算符 <a class="header-anchor" href="#_3-展开运算符" aria-label="Permalink to &quot;3.展开运算符&quot;">​</a></h4><p>展开运算符是一个 es6 / es2015特性，它提供了一种非常方便的方式来执行浅拷贝，这与 Object.assign ()的功能相同。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { name: </span><span style="color:#9ECBFF;">&#39;Kobe&#39;</span><span style="color:#E1E4E8;">, address:{x:</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,y:</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">}}</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj2</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> obj1}</span></span>\n<span class="line"><span style="color:#E1E4E8;">obj1.address.x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">obj1.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;wade&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;obj2&#39;</span><span style="color:#E1E4E8;">,obj2) </span><span style="color:#6A737D;">// obj2 { name: &#39;Kobe&#39;, address: { x: 200, y: 100 } }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&#39;Kobe&#39;</span><span style="color:#24292E;">, address:{x:</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,y:</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">}}</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj2</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> obj1}</span></span>\n<span class="line"><span style="color:#24292E;">obj1.address.x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">obj1.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;wade&#39;</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;obj2&#39;</span><span style="color:#24292E;">,obj2) </span><span style="color:#6A737D;">// obj2 { name: &#39;Kobe&#39;, address: { x: 200, y: 100 } }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_4-array-prototype-concat" tabindex="-1">4.Array.prototype.concat() <a class="header-anchor" href="#_4-array-prototype-concat" aria-label="Permalink to &quot;4.Array.prototype.concat()&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    username: </span><span style="color:#9ECBFF;">&#39;kobe&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }];</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">();    </span></span>\n<span class="line"><span style="color:#E1E4E8;">arr2[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">].username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;wade&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arr); </span><span style="color:#6A737D;">//[ 1, 3, { username: &#39;wade&#39; } ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, {</span></span>\n<span class="line"><span style="color:#24292E;">    username: </span><span style="color:#032F62;">&#39;kobe&#39;</span></span>\n<span class="line"><span style="color:#24292E;">    }];</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">();    </span></span>\n<span class="line"><span style="color:#24292E;">arr2[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">].username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;wade&#39;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr); </span><span style="color:#6A737D;">//[ 1, 3, { username: &#39;wade&#39; } ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_5-array-prototype-slice" tabindex="-1">5.Array.prototype.slice() <a class="header-anchor" href="#_5-array-prototype-slice" aria-label="Permalink to &quot;5.Array.prototype.slice()&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    username: </span><span style="color:#9ECBFF;">&#39; kobe&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }];</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">arr3[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">].username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;wade&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arr); </span><span style="color:#6A737D;">// [ 1, 3, { username: &#39;wade&#39; } ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, {</span></span>\n<span class="line"><span style="color:#24292E;">    username: </span><span style="color:#032F62;">&#39; kobe&#39;</span></span>\n<span class="line"><span style="color:#24292E;">    }];</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">arr3[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">].username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;wade&#39;</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr); </span><span style="color:#6A737D;">// [ 1, 3, { username: &#39;wade&#39; } ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="深拷贝的实现方式" tabindex="-1">深拷贝的实现方式 <a class="header-anchor" href="#深拷贝的实现方式" aria-label="Permalink to &quot;深拷贝的实现方式&quot;">​</a></h2><h4 id="_1-json-parse-json-stringify" tabindex="-1">1.JSON.parse(JSON.stringify()) <a class="header-anchor" href="#_1-json-parse-json-stringify" aria-label="Permalink to &quot;1.JSON.parse(JSON.stringify())&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    username: </span><span style="color:#9ECBFF;">&#39; kobe&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}];</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(arr));</span></span>\n<span class="line"><span style="color:#E1E4E8;">arr4[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">].username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;duncan&#39;</span><span style="color:#E1E4E8;">; </span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arr, arr4)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, {</span></span>\n<span class="line"><span style="color:#24292E;">    username: </span><span style="color:#032F62;">&#39; kobe&#39;</span></span>\n<span class="line"><span style="color:#24292E;">}];</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(arr));</span></span>\n<span class="line"><span style="color:#24292E;">arr4[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">].username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;duncan&#39;</span><span style="color:#24292E;">; </span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr, arr4)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/7/30/164e6d5f642d440a~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>这也是利用JSON.stringify将对象转成JSON字符串，再用JSON.parse把字符串解析成对象，一去一来，新的对象产生了，而且对象会开辟新的栈，实现深拷贝。</p><p><strong>这种方法虽然可以实现数组或对象深拷贝,但不能处理函数和正则</strong>，因为这两者基于JSON.stringify和JSON.parse处理后，得到的正则就不再是正则（变为空对象），得到的函数就不再是函数（变为null）了。</p><p>比如下面的例子：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    username: </span><span style="color:#9ECBFF;">&#39; kobe&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">},</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){}];</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(arr));</span></span>\n<span class="line"><span style="color:#E1E4E8;">arr4[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">].username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;duncan&#39;</span><span style="color:#E1E4E8;">; </span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arr, arr4)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, {</span></span>\n<span class="line"><span style="color:#24292E;">    username: </span><span style="color:#032F62;">&#39; kobe&#39;</span></span>\n<span class="line"><span style="color:#24292E;">},</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){}];</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(arr));</span></span>\n<span class="line"><span style="color:#24292E;">arr4[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">].username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;duncan&#39;</span><span style="color:#24292E;">; </span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr, arr4)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/7/30/164e6daa14a1f8be~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><h4 id="_2-函数库lodash的-clonedeep方法" tabindex="-1">2.函数库lodash的_.cloneDeep方法 <a class="header-anchor" href="#_2-函数库lodash的-clonedeep方法" aria-label="Permalink to &quot;2.函数库lodash的\\_.cloneDeep方法&quot;">​</a></h4><p>该函数库也有提供_.cloneDeep用来做 Deep Copy</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;lodash&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    b: { f: { g: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> } },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    c: [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _.</span><span style="color:#B392F0;">cloneDeep</span><span style="color:#E1E4E8;">(obj1);</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj1.b.f </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> obj2.b.f);</span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lodash&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    b: { f: { g: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> } },</span></span>\n<span class="line"><span style="color:#24292E;">    c: [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>\n<span class="line"><span style="color:#24292E;">};</span></span>\n<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _.</span><span style="color:#6F42C1;">cloneDeep</span><span style="color:#24292E;">(obj1);</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj1.b.f </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> obj2.b.f);</span><span style="color:#6A737D;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3-jquery-extend-方法" tabindex="-1">3.jQuery.extend()方法 <a class="header-anchor" href="#_3-jquery-extend-方法" aria-label="Permalink to &quot;3.jQuery.extend()方法&quot;">​</a></h3><p>jquery 有提供一個<code>$.extend</code>可以用来做 Deep Copy</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$.</span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(deepCopy, target, object1, [objectN])</span><span style="color:#6A737D;">//第一个参数为true,就是深拷贝</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$.</span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">(deepCopy, target, object1, [objectN])</span><span style="color:#6A737D;">//第一个参数为true,就是深拷贝</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> $ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;jquery&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    b: { f: { g: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> } },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    c: [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $.</span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, {}, obj1);</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj1.b.f </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> obj2.b.f); </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> $ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;jquery&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    b: { f: { g: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> } },</span></span>\n<span class="line"><span style="color:#24292E;">    c: [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>\n<span class="line"><span style="color:#24292E;">};</span></span>\n<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $.</span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, {}, obj1);</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj1.b.f </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> obj2.b.f); </span><span style="color:#6A737D;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_4-手写递归方法" tabindex="-1">4.手写递归方法 <a class="header-anchor" href="#_4-手写递归方法" aria-label="Permalink to &quot;4.手写递归方法&quot;">​</a></h4><p>递归方法实现深度克隆原理：<strong>遍历对象、数组直到里边都是基本数据类型，然后再去复制，就是深度拷贝</strong>。</p><p>有种特殊情况需注意就是对象存在<strong>循环引用</strong>的情况，即对象的属性直接的引用了自身的情况，解决循环引用问题，我们可以额外开辟一个存储空间，来存储当前对象和拷贝对象的对应关系，当需要拷贝当前对象时，先去存储空间中找，有没有拷贝过这个对象，如果有的话直接返回，如果没有的话继续拷贝，这样就巧妙化解的循环引用的问题。关于这块如有疑惑，请仔细阅读<code>ConardLi大佬</code><a href="https://link.juejin.cn/?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000020255831" title="https://segmentfault.com/a/1190000020255831" target="_blank" rel="noreferrer">如何写出一个惊艳面试官的深拷贝?</a>这篇文章。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deepClone</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">hash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WeakMap</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (obj </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> obj; </span><span style="color:#6A737D;">// 如果是null或者undefined我就不进行拷贝操作</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (obj </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">(obj);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (obj </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">(obj);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;object&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> obj;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是对象的话就要进行深拷贝</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hash.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(obj)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> hash.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(obj);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> cloneObj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> obj.</span><span style="color:#B392F0;">constructor</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span></span>\n<span class="line"><span style="color:#E1E4E8;">  hash.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(obj, cloneObj);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> obj) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (obj.</span><span style="color:#B392F0;">hasOwnProperty</span><span style="color:#E1E4E8;">(key)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 实现一个递归拷贝</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cloneObj[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deepClone</span><span style="color:#E1E4E8;">(obj[key], hash);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cloneObj;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { name: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, address: { x: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> } };</span></span>\n<span class="line"><span style="color:#E1E4E8;">obj.o </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj; </span><span style="color:#6A737D;">// 对象存在循环引用的情况</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deepClone</span><span style="color:#E1E4E8;">(obj);</span></span>\n<span class="line"><span style="color:#E1E4E8;">obj.address.x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(d);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deepClone</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">, </span><span style="color:#E36209;">hash</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WeakMap</span><span style="color:#24292E;">()) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj; </span><span style="color:#6A737D;">// 如果是null或者undefined我就不进行拷贝操作</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">(obj);</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">(obj);</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;object&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是对象的话就要进行深拷贝</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hash.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(obj)) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> hash.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(obj);</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> cloneObj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> obj.</span><span style="color:#6F42C1;">constructor</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span></span>\n<span class="line"><span style="color:#24292E;">  hash.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(obj, cloneObj);</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> obj) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(key)) {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 实现一个递归拷贝</span></span>\n<span class="line"><span style="color:#24292E;">      cloneObj[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deepClone</span><span style="color:#24292E;">(obj[key], hash);</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cloneObj;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, address: { x: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> } };</span></span>\n<span class="line"><span style="color:#24292E;">obj.o </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj; </span><span style="color:#6A737D;">// 对象存在循环引用的情况</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deepClone</span><span style="color:#24292E;">(obj);</span></span>\n<span class="line"><span style="color:#24292E;">obj.address.x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(d);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div>',50);const b=s(E,[["render",function(s,e,r,c,t,E){const b=n("ArticleMetadata"),F=n("ClientOnly");return a(),l("div",null,[y,p(F,null,{default:o((()=>[p(b)])),_:1}),i])}]]);export{t as __pageData,b as default};
