import{d as s,u as n,a0 as a,a1 as l,o as e,c as p,k as o,t,l as r,a as c,F as i,D as y,_ as E,p as d,m as u,Q as m,H as b,K as h,g,C as F,b as f,w as v,j as C,x as k,O as A,s as q,a2 as S,a3 as D,a4 as B,a5 as x,a6 as w,a7 as j,a8 as P,a9 as z,aa as T,ab as O,U as N,y as W,ac as I,ad as M,ae as L,af as _}from"./chunks/framework.f92cd432.js";import{t as Z}from"./chunks/theme.42c73e8c.js";
/*! medium-zoom 1.0.8 | MIT License | https://github.com/francoischalifour/medium-zoom */var H=Object.assign||function(s){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var l in a)Object.prototype.hasOwnProperty.call(a,l)&&(s[l]=a[l])}return s},$=function(s){return"IMG"===s.tagName},J=function(s){return s&&1===s.nodeType},R=function(s){return".svg"===(s.currentSrc||s.src).substr(-4).toLowerCase()},V=function(s){try{return Array.isArray(s)?s.filter($):function(s){return NodeList.prototype.isPrototypeOf(s)}(s)?[].slice.call(s).filter($):J(s)?[s].filter($):"string"==typeof s?[].slice.call(document.querySelectorAll(s)).filter($):[]}catch(n){throw new TypeError("The provided selector is invalid.\nExpects a CSS selector, a Node element, a NodeList or an array.\nSee: https://github.com/francoischalifour/medium-zoom")}},G=function(s,n){var a=H({bubbles:!1,cancelable:!1,detail:void 0},n);if("function"==typeof window.CustomEvent)return new CustomEvent(s,a);var l=document.createEvent("CustomEvent");return l.initCustomEvent(s,a.bubbles,a.cancelable,a.detail),l};!function(s,n){void 0===n&&(n={});var a=n.insertAt;if(s&&"undefined"!=typeof document){var l=document.head||document.getElementsByTagName("head")[0],e=document.createElement("style");e.type="text/css","top"===a&&l.firstChild?l.insertBefore(e,l.firstChild):l.appendChild(e),e.styleSheet?e.styleSheet.cssText=s:e.appendChild(document.createTextNode(s))}}(".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}");const Y=function s(n){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=window.Promise||function(s){function n(){}s(n,n)},e=function(){for(var s=arguments.length,n=Array(s),a=0;a<s;a++)n[a]=arguments[a];var l=n.reduce((function(s,n){return[].concat(s,V(n))}),[]);return l.filter((function(s){return-1===r.indexOf(s)})).forEach((function(s){r.push(s),s.classList.add("medium-zoom-image")})),c.forEach((function(s){var n=s.type,a=s.listener,e=s.options;l.forEach((function(s){s.addEventListener(n,a,e)}))})),m},p=function(){var s=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).target,n=function(){var s={width:document.documentElement.clientWidth,height:document.documentElement.clientHeight,left:0,top:0,right:0,bottom:0},n=void 0,a=void 0;if(E.container)if(E.container instanceof Object)n=(s=H({},s,E.container)).width-s.left-s.right-2*E.margin,a=s.height-s.top-s.bottom-2*E.margin;else{var l=(J(E.container)?E.container:document.querySelector(E.container)).getBoundingClientRect(),e=l.width,p=l.height,o=l.left,t=l.top;s=H({},s,{width:e,height:p,left:o,top:t})}n=n||s.width-2*E.margin,a=a||s.height-2*E.margin;var r=d.zoomedHd||d.original,c=R(r)?n:r.naturalWidth||n,i=R(r)?a:r.naturalHeight||a,y=r.getBoundingClientRect(),u=y.top,m=y.left,b=y.width,h=y.height,g=Math.min(Math.max(b,c),n)/b,F=Math.min(Math.max(h,i),a)/h,f=Math.min(g,F),v="scale("+f+") translate3d("+((n-b)/2-m+E.margin+s.left)/f+"px, "+((a-h)/2-u+E.margin+s.top)/f+"px, 0)";d.zoomed.style.transform=v,d.zoomedHd&&(d.zoomedHd.style.transform=v)};return new l((function(a){if(s&&-1===r.indexOf(s))a(m);else{if(d.zoomed)a(m);else{if(s)d.original=s;else{if(!(r.length>0))return void a(m);var l=r;d.original=l[0]}if(d.original.dispatchEvent(G("medium-zoom:open",{detail:{zoom:m}})),y=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,i=!0,d.zoomed=function(s){var n=s.getBoundingClientRect(),a=n.top,l=n.left,e=n.width,p=n.height,o=s.cloneNode(),t=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,r=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;return o.removeAttribute("id"),o.style.position="absolute",o.style.top=a+t+"px",o.style.left=l+r+"px",o.style.width=e+"px",o.style.height=p+"px",o.style.transform="",o}(d.original),document.body.appendChild(u),E.template){var e=J(E.template)?E.template:document.querySelector(E.template);d.template=document.createElement("div"),d.template.appendChild(e.content.cloneNode(!0)),document.body.appendChild(d.template)}if(d.original.parentElement&&"PICTURE"===d.original.parentElement.tagName&&d.original.currentSrc&&(d.zoomed.src=d.original.currentSrc),document.body.appendChild(d.zoomed),window.requestAnimationFrame((function(){document.body.classList.add("medium-zoom--opened")})),d.original.classList.add("medium-zoom-image--hidden"),d.zoomed.classList.add("medium-zoom-image--opened"),d.zoomed.addEventListener("click",o),d.zoomed.addEventListener("transitionend",(function s(){i=!1,d.zoomed.removeEventListener("transitionend",s),d.original.dispatchEvent(G("medium-zoom:opened",{detail:{zoom:m}})),a(m)})),d.original.getAttribute("data-zoom-src")){d.zoomedHd=d.zoomed.cloneNode(),d.zoomedHd.removeAttribute("srcset"),d.zoomedHd.removeAttribute("sizes"),d.zoomedHd.removeAttribute("loading"),d.zoomedHd.src=d.zoomed.getAttribute("data-zoom-src"),d.zoomedHd.onerror=function(){clearInterval(p),console.warn("Unable to reach the zoom image target "+d.zoomedHd.src),d.zoomedHd=null,n()};var p=setInterval((function(){d.zoomedHd.complete&&(clearInterval(p),d.zoomedHd.classList.add("medium-zoom-image--opened"),d.zoomedHd.addEventListener("click",o),document.body.appendChild(d.zoomedHd),n())}),10)}else if(d.original.hasAttribute("srcset")){d.zoomedHd=d.zoomed.cloneNode(),d.zoomedHd.removeAttribute("sizes"),d.zoomedHd.removeAttribute("loading");var t=d.zoomedHd.addEventListener("load",(function(){d.zoomedHd.removeEventListener("load",t),d.zoomedHd.classList.add("medium-zoom-image--opened"),d.zoomedHd.addEventListener("click",o),document.body.appendChild(d.zoomedHd),n()}))}else n()}}}))},o=function(){return new l((function(s){if(!i&&d.original){i=!0,document.body.classList.remove("medium-zoom--opened"),d.zoomed.style.transform="",d.zoomedHd&&(d.zoomedHd.style.transform=""),d.template&&(d.template.style.transition="opacity 150ms",d.template.style.opacity=0),d.original.dispatchEvent(G("medium-zoom:close",{detail:{zoom:m}})),d.zoomed.addEventListener("transitionend",(function n(){d.original.classList.remove("medium-zoom-image--hidden"),document.body.removeChild(d.zoomed),d.zoomedHd&&document.body.removeChild(d.zoomedHd),document.body.removeChild(u),d.zoomed.classList.remove("medium-zoom-image--opened"),d.template&&document.body.removeChild(d.template),i=!1,d.zoomed.removeEventListener("transitionend",n),d.original.dispatchEvent(G("medium-zoom:closed",{detail:{zoom:m}})),d.original=null,d.zoomed=null,d.zoomedHd=null,d.template=null,s(m)}))}else s(m)}))},t=function(){var s=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).target;return d.original?o():p({target:s})},r=[],c=[],i=!1,y=0,E=a,d={original:null,zoomed:null,zoomedHd:null,template:null};"[object Object]"===Object.prototype.toString.call(n)?E=n:(n||"string"==typeof n)&&e(n);var u=function(s){var n=document.createElement("div");return n.classList.add("medium-zoom-overlay"),n.style.background=s,n}((E=H({margin:0,background:"#fff",scrollOffset:40,container:null,template:null},E)).background);document.addEventListener("click",(function(s){var n=s.target;n!==u?-1!==r.indexOf(n)&&t({target:n}):o()})),document.addEventListener("keyup",(function(s){var n=s.key||s.keyCode;"Escape"!==n&&"Esc"!==n&&27!==n||o()})),document.addEventListener("scroll",(function(){if(!i&&d.original){var s=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;Math.abs(y-s)>E.scrollOffset&&setTimeout(o,150)}})),window.addEventListener("resize",o);var m={open:p,close:o,toggle:t,update:function(){var s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=s;if(s.background&&(u.style.background=s.background),s.container&&s.container instanceof Object&&(n.container=H({},E.container,s.container)),s.template){var a=J(s.template)?s.template:document.querySelector(s.template);n.template=a}return E=H({},E,n),r.forEach((function(s){s.dispatchEvent(G("medium-zoom:update",{detail:{zoom:m}}))})),m},clone:function(){return s(H({},E,arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}))},attach:e,detach:function(){for(var s=arguments.length,n=Array(s),a=0;a<s;a++)n[a]=arguments[a];d.zoomed&&o();var l=n.length>0?n.reduce((function(s,n){return[].concat(s,V(n))}),[]):r;return l.forEach((function(s){s.classList.remove("medium-zoom-image"),s.dispatchEvent(G("medium-zoom:detach",{detail:{zoom:m}}))})),r=r.filter((function(s){return-1===l.indexOf(s)})),m},on:function(s,n){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return r.forEach((function(l){l.addEventListener("medium-zoom:"+s,n,a)})),c.push({type:"medium-zoom:"+s,listener:n,options:a}),m},off:function(s,n){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return r.forEach((function(l){l.removeEventListener("medium-zoom:"+s,n,a)})),c=c.filter((function(a){return!(a.type==="medium-zoom:"+s&&a.listener.toString()===n.toString())})),m},getOptions:function(){return E},getImages:function(){return r},getZoomedImage:function(){return d.original}};return m};var U="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function X(s){return s&&s.__esModule&&Object.prototype.hasOwnProperty.call(s,"default")?s.default:s}var K={exports:{}};const Q=X(K.exports=function(){var s=1e3,n=6e4,a=36e5,l="millisecond",e="second",p="minute",o="hour",t="day",r="week",c="month",i="quarter",y="year",E="date",d="Invalid Date",u=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,m=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,b={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(s){var n=["th","st","nd","rd"],a=s%100;return"["+s+(n[(a-20)%10]||n[a]||n[0])+"]"}},h=function(s,n,a){var l=String(s);return!l||l.length>=n?s:""+Array(n+1-l.length).join(a)+s},g={s:h,z:function(s){var n=-s.utcOffset(),a=Math.abs(n),l=Math.floor(a/60),e=a%60;return(n<=0?"+":"-")+h(l,2,"0")+":"+h(e,2,"0")},m:function s(n,a){if(n.date()<a.date())return-s(a,n);var l=12*(a.year()-n.year())+(a.month()-n.month()),e=n.clone().add(l,c),p=a-e<0,o=n.clone().add(l+(p?-1:1),c);return+(-(l+(a-e)/(p?e-o:o-e))||0)},a:function(s){return s<0?Math.ceil(s)||0:Math.floor(s)},p:function(s){return{M:c,y:y,w:r,d:t,D:E,h:o,m:p,s:e,ms:l,Q:i}[s]||String(s||"").toLowerCase().replace(/s$/,"")},u:function(s){return void 0===s}},F="en",f={};f[F]=b;var v="$isDayjsObject",C=function(s){return s instanceof S||!(!s||!s[v])},k=function s(n,a,l){var e;if(!n)return F;if("string"==typeof n){var p=n.toLowerCase();f[p]&&(e=p),a&&(f[p]=a,e=p);var o=n.split("-");if(!e&&o.length>1)return s(o[0])}else{var t=n.name;f[t]=n,e=t}return!l&&e&&(F=e),e||!l&&F},A=function(s,n){if(C(s))return s.clone();var a="object"==typeof n?n:{};return a.date=s,a.args=arguments,new S(a)},q=g;q.l=k,q.i=C,q.w=function(s,n){return A(s,{locale:n.$L,utc:n.$u,x:n.$x,$offset:n.$offset})};var S=function(){function b(s){this.$L=k(s.locale,null,!0),this.parse(s),this.$x=this.$x||s.x||{},this[v]=!0}var h=b.prototype;return h.parse=function(s){this.$d=function(s){var n=s.date,a=s.utc;if(null===n)return new Date(NaN);if(q.u(n))return new Date;if(n instanceof Date)return new Date(n);if("string"==typeof n&&!/Z$/i.test(n)){var l=n.match(u);if(l){var e=l[2]-1||0,p=(l[7]||"0").substring(0,3);return a?new Date(Date.UTC(l[1],e,l[3]||1,l[4]||0,l[5]||0,l[6]||0,p)):new Date(l[1],e,l[3]||1,l[4]||0,l[5]||0,l[6]||0,p)}}return new Date(n)}(s),this.init()},h.init=function(){var s=this.$d;this.$y=s.getFullYear(),this.$M=s.getMonth(),this.$D=s.getDate(),this.$W=s.getDay(),this.$H=s.getHours(),this.$m=s.getMinutes(),this.$s=s.getSeconds(),this.$ms=s.getMilliseconds()},h.$utils=function(){return q},h.isValid=function(){return!(this.$d.toString()===d)},h.isSame=function(s,n){var a=A(s);return this.startOf(n)<=a&&a<=this.endOf(n)},h.isAfter=function(s,n){return A(s)<this.startOf(n)},h.isBefore=function(s,n){return this.endOf(n)<A(s)},h.$g=function(s,n,a){return q.u(s)?this[n]:this.set(a,s)},h.unix=function(){return Math.floor(this.valueOf()/1e3)},h.valueOf=function(){return this.$d.getTime()},h.startOf=function(s,n){var a=this,l=!!q.u(n)||n,i=q.p(s),d=function(s,n){var e=q.w(a.$u?Date.UTC(a.$y,n,s):new Date(a.$y,n,s),a);return l?e:e.endOf(t)},u=function(s,n){return q.w(a.toDate()[s].apply(a.toDate("s"),(l?[0,0,0,0]:[23,59,59,999]).slice(n)),a)},m=this.$W,b=this.$M,h=this.$D,g="set"+(this.$u?"UTC":"");switch(i){case y:return l?d(1,0):d(31,11);case c:return l?d(1,b):d(0,b+1);case r:var F=this.$locale().weekStart||0,f=(m<F?m+7:m)-F;return d(l?h-f:h+(6-f),b);case t:case E:return u(g+"Hours",0);case o:return u(g+"Minutes",1);case p:return u(g+"Seconds",2);case e:return u(g+"Milliseconds",3);default:return this.clone()}},h.endOf=function(s){return this.startOf(s,!1)},h.$set=function(s,n){var a,r=q.p(s),i="set"+(this.$u?"UTC":""),d=(a={},a[t]=i+"Date",a[E]=i+"Date",a[c]=i+"Month",a[y]=i+"FullYear",a[o]=i+"Hours",a[p]=i+"Minutes",a[e]=i+"Seconds",a[l]=i+"Milliseconds",a)[r],u=r===t?this.$D+(n-this.$W):n;if(r===c||r===y){var m=this.clone().set(E,1);m.$d[d](u),m.init(),this.$d=m.set(E,Math.min(this.$D,m.daysInMonth())).$d}else d&&this.$d[d](u);return this.init(),this},h.set=function(s,n){return this.clone().$set(s,n)},h.get=function(s){return this[q.p(s)]()},h.add=function(l,i){var E,d=this;l=Number(l);var u=q.p(i),m=function(s){var n=A(d);return q.w(n.date(n.date()+Math.round(s*l)),d)};if(u===c)return this.set(c,this.$M+l);if(u===y)return this.set(y,this.$y+l);if(u===t)return m(1);if(u===r)return m(7);var b=(E={},E[p]=n,E[o]=a,E[e]=s,E)[u]||1,h=this.$d.getTime()+l*b;return q.w(h,this)},h.subtract=function(s,n){return this.add(-1*s,n)},h.format=function(s){var n=this,a=this.$locale();if(!this.isValid())return a.invalidDate||d;var l=s||"YYYY-MM-DDTHH:mm:ssZ",e=q.z(this),p=this.$H,o=this.$m,t=this.$M,r=a.weekdays,c=a.months,i=a.meridiem,y=function(s,a,e,p){return s&&(s[a]||s(n,l))||e[a].slice(0,p)},E=function(s){return q.s(p%12||12,s,"0")},u=i||function(s,n,a){var l=s<12?"AM":"PM";return a?l.toLowerCase():l};return l.replace(m,(function(s,l){return l||function(s){switch(s){case"YY":return String(n.$y).slice(-2);case"YYYY":return q.s(n.$y,4,"0");case"M":return t+1;case"MM":return q.s(t+1,2,"0");case"MMM":return y(a.monthsShort,t,c,3);case"MMMM":return y(c,t);case"D":return n.$D;case"DD":return q.s(n.$D,2,"0");case"d":return String(n.$W);case"dd":return y(a.weekdaysMin,n.$W,r,2);case"ddd":return y(a.weekdaysShort,n.$W,r,3);case"dddd":return r[n.$W];case"H":return String(p);case"HH":return q.s(p,2,"0");case"h":return E(1);case"hh":return E(2);case"a":return u(p,o,!0);case"A":return u(p,o,!1);case"m":return String(o);case"mm":return q.s(o,2,"0");case"s":return String(n.$s);case"ss":return q.s(n.$s,2,"0");case"SSS":return q.s(n.$ms,3,"0");case"Z":return e}return null}(s)||e.replace(":","")}))},h.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},h.diff=function(l,E,d){var u,m=this,b=q.p(E),h=A(l),g=(h.utcOffset()-this.utcOffset())*n,F=this-h,f=function(){return q.m(m,h)};switch(b){case y:u=f()/12;break;case c:u=f();break;case i:u=f()/3;break;case r:u=(F-g)/6048e5;break;case t:u=(F-g)/864e5;break;case o:u=F/a;break;case p:u=F/n;break;case e:u=F/s;break;default:u=F}return d?u:q.a(u)},h.daysInMonth=function(){return this.endOf(c).$D},h.$locale=function(){return f[this.$L]},h.locale=function(s,n){if(!s)return this.$L;var a=this.clone(),l=k(s,n,!0);return l&&(a.$L=l),a},h.clone=function(){return q.w(this.$d,this)},h.toDate=function(){return new Date(this.valueOf())},h.toJSON=function(){return this.isValid()?this.toISOString():null},h.toISOString=function(){return this.$d.toISOString()},h.toString=function(){return this.$d.toUTCString()},b}(),D=S.prototype;return A.prototype=D,[["$ms",l],["$s",e],["$m",p],["$H",o],["$W",t],["$M",c],["$y",y],["$D",E]].forEach((function(s){D[s[1]]=function(n){return this.$g(n,s[0],s[1])}})),A.extend=function(s,n){return s.$i||(s(n,S,A),s.$i=!0),A},A.locale=k,A.isDayjs=C,A.unix=function(s){return A(1e3*s)},A.en=f[F],A.Ls=f,A.p={},A}()),ss={class:"text-center mt-3 mb-8 text-1.25 border-b-1 border-b-gray"},ns={class:"mr-2.5"},as={class:"mr-2.5"},ls={class:"tag-a cursor-pointer"},es={class:"mr-2.5"},ps=["title"],os=E(s({__name:"ArticleMetadata",props:{article:Object},setup(s){var E,d,u,m,b,h;const{frontmatter:g}=n(),F=a({author:(null==(E=null==g?void 0:g.value)?void 0:E.userName)||"大湿兄",link:null==(d=null==g?void 0:g.value)?void 0:d.link,date:Q((null==(u=null==g?void 0:g.value)?void 0:u.createTime)||new Date).format("YYYY-MM-DD"),tags:null==(b=null==(m=null==g?void 0:g.value)?void 0:m.tags)?void 0:b.split(","),category:null==(h=g.value)?void 0:h.category}),{author:f,date:v,tags:C,category:k}=l(F);return(s,n)=>(e(),p("div",ss,[o("span",ns,t(r(v)),1),o("span",as,[c(" 分类： "),o("a",ls,t(r(k))+" ",1)]),o("span",es,[c(" 标签： "),(e(!0),p(i,null,y(r(C),((s,n)=>(e(),p("span",{key:n},[o("a",{class:"tag-a cursor-pointer",title:s},t(s)+" ",9,ps)])))),128))])]))}}),[["__scopeId","data-v-f49d1c2f"]]),ts=JSON.parse('[{"title":"CSS新世界 pdf下载","link":"article/CSS新世界","category":"学习资源","excerpt":"","preview":"/book/cssxinshijie.png","tags":["CSS电子书"],"date":"2023/10/09","intro":"《CSS新世界》是“CSS世界三部曲”的最后一部。这是一本关于CSS的进阶读物，专门讲CSS3及其之后版本的新特性。在《CSS新世界》中，作者结合自己多年的从业经验，讲解CSS基础知识，并充分考虑前端开发者的需求，以CSS新特性的历史背景为线索，去粗取精，注重细节，深入浅出地介绍了上百个CSS新特性。此外，作者专门还为《CSS新世界》开发了配套网站，用于书中实例效果的在线展示和问题答疑。","userName":"大湿兄"},{"link":"article/前端css基础","excerpt":"<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88c7fcb02e824109aa35ddb1199432e0~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<h2 id=\\"基础\\" tabindex=\\"-1\\">基础 <a class=\\"header-anchor\\" href=\\"#基础\\" aria-label=\\"Permalink to &quot;基础&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"语法\\" tabindex=\\"-1\\">语法 <a class=\\"header-anchor\\" href=\\"#语法\\" aria-label=\\"Permalink to &quot;语法&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>CSS 的核心功能是将 CSS 属性设定为特定的值。一个属性与值的键值对被称为<strong>声明</strong>（declaration）。</p>\\n<div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">color: red;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">color: red;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br></div></div><p>而如果将一个或者多个声明用 <code>{}</code> 包裹起来后，那就组成了一个<strong>声明块</strong>（declaration block）。</p>\\n<div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">color</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">red</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">text-align</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">center</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">color</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">red</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">text-align</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">center</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br></div></div><p>声明块如果需要作用到对应的 HTML 元素，那还需要加上<strong>选择器</strong>。选择器和声明块组成了<strong>CSS 规则集</strong>（CSS ruleset），常简称为 CSS 规则。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc35c91eb2d64ca1aa829d2f070a2d6f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #85E89D\\">span</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">color</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">red</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">text-align</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">center</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #22863A\\">span</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">color</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">red</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">text-align</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">center</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br></div></div><blockquote>\\n<p>规则集中最后一条声明可以省略分号，但是并不建议这么做，因为容易出错。</p>\\n</blockquote>\\n<p>CSS 中的<strong>注释</strong>：</p>\\n<div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">/* 单行注释 */</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">    多行</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">    注释</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">*/</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">/* 单行注释 */</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">/*</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">    多行</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">    注释</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">*/</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br></div></div><p>在 CSS 文件中，除了注释、CSS 规则集以及 @规则 外，定义的一些别的东西都将被浏览器忽略。</p>\\n<h3 id=\\"规则\\" tabindex=\\"-1\\">@规则 <a class=\\"header-anchor\\" href=\\"#规则\\" aria-label=\\"Permalink to &quot;@规则&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>CSS 规则是样式表的主体，通常样式表会包括大量的规则列表。但有时候也需要在样式表中包括其他的一些信息，比如字符集，导入其它的外部样式表，字体等，这些需要专门的语句表示。</p>\\n<p>而 @规则 就是这样的语句。CSS 里包含了以下 @规则：</p>\\n<ul>\\n<li><a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2F%40namespace\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@namespace\\" target=\\"_blank\\" rel=\\"noreferrer\\">@namespace</a> 告诉 CSS 引擎必须考虑XML命名空间。</li>\\n<li><a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2F%40media\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media\\" target=\\"_blank\\" rel=\\"noreferrer\\">@media</a>, 如果满足媒体查询的条件则条件规则组里的规则生效。</li>\\n<li><a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2F%40page\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@page\\" target=\\"_blank\\" rel=\\"noreferrer\\">@page</a>, 描述打印文档时布局的变化.</li>\\n<li><a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2F%40font-face\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@font-face\\" target=\\"_blank\\" rel=\\"noreferrer\\">@font-face</a>, 描述将下载的外部的字体。</li>\\n<li><a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2F%40keyframes\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@keyframes\\" target=\\"_blank\\" rel=\\"noreferrer\\">@keyframes</a>, 描述 CSS 动画的关键帧。</li>\\n<li><a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2F%40document\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@document\\" target=\\"_blank\\" rel=\\"noreferrer\\">@document</a>, 如果文档样式表满足给定条件则条件规则组里的规则生效。 (推延至 CSS Level 4 规范)</li>\\n</ul>\\n<p>除了以上这几个之外，下面还将对几个比较生涩的 @规则 进行介绍。</p>\\n<h4 id=\\"charset\\" tabindex=\\"-1\\">@charset <a class=\\"header-anchor\\" href=\\"#charset\\" aria-label=\\"Permalink to &quot;@charset&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p><a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2F%40charset\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@charset\\" target=\\"_blank\\" rel=\\"noreferrer\\">@charset</a> 用于定义样式表使用的字符集。它必须是样式表中的第一个元素。如果有多个 <code>@charset</code> 被声明，只有第一个会被使用，而且不能在HTML元素或HTML页面的 <code>&lt;style&gt;</code> 元素内使用。</p>\\n<p>注意：值必须是双引号包裹，且和</p>\\n<div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #F97583\\">@charset</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&quot;UTF-8&quot;</span><span style=\\"color: #E1E4E8\\">;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #D73A49\\">@charset</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&quot;UTF-8&quot;</span><span style=\\"color: #24292E\\">;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><p>平时写样式文件都没写 @charset 规则，那这个 CSS 文件到底是用的什么字符编码的呢？</p>\\n<p>某个样式表文件到底用的是什么字符编码，浏览器有一套识别顺序（优先级由高到低）：</p>\\n<ul>\\n<li>\\n<p>文件开头的 <a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FByte_order_mark\\" title=\\"https://en.wikipedia.org/wiki/Byte_order_mark\\" target=\\"_blank\\" rel=\\"noreferrer\\">Byte order mark</a> 字符值，不过一般编辑器并不能看到文件头里的 BOM 值；</p>\\n</li>\\n<li>\\n<p>HTTP 响应头里的 <code>content-type</code> 字段包含的 <code>charset</code> 所指定的值，比如：</p>\\n</li>\\n</ul>\\n<div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">Content-Type: text/css; charset=</span><span style=\\"color: #85E89D\\">utf-8</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">Content-Type: text/css; charset=</span><span style=\\"color: #22863A\\">utf-8</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><ul>\\n<li>\\n<p>CSS 文件头里定义的 @charset 规则里指定的字符编码；</p>\\n</li>\\n<li>\\n<p><code>&lt;link&gt;</code> 标签里的 charset 属性，该条已在 HTML5 中废除；</p>\\n</li>\\n<li>\\n<p>默认是 <code>UTF-8</code>。</p>\\n</li>\\n</ul>\\n<h4 id=\\"import\\" tabindex=\\"-1\\">@import <a class=\\"header-anchor\\" href=\\"#import\\" aria-label=\\"Permalink to &quot;@import&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p><a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2F%40import\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@import\\" target=\\"_blank\\" rel=\\"noreferrer\\">@import</a> 用于告诉 CSS 引擎引入一个外部样式表。</p>\\n<p>link 和 @import 都能导入一个样式文件，它们有什么区别嘛？</p>\\n<ul>\\n<li>link 是 HTML 标签，除了能导入 CSS 外，还能导入别的资源，比如图片、脚本和字体等；而 @import 是 CSS 的语法，只能用来导入 CSS；</li>\\n<li>link 导入的样式会在页面加载时同时加载，@import 导入的样式需等页面加载完成后再加载；</li>\\n<li>link 没有兼容性问题，@import 不兼容 ie5 以下；</li>\\n<li>link 可以通过 JS 操作 DOM 动态引入样式表改变样式，而@import不可以。</li>\\n</ul>\\n<h4 id=\\"supports\\" tabindex=\\"-1\\">@supports <a class=\\"header-anchor\\" href=\\"#supports\\" aria-label=\\"Permalink to &quot;@supports&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p><a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2F%40supports\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@supports\\" target=\\"_blank\\" rel=\\"noreferrer\\">@supports</a> 用于查询特定的 CSS 是否生效，可以结合 not、and 和 or 操作符进行后续的操作。</p>\\n<div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">/* 如果支持自定义属性，则把 body 颜色设置为变量 varName 指定的颜色 */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">@supports</span><span style=\\"color: #E1E4E8\\"> (</span><span style=\\"color: #FFAB70\\">--foo</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">green</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #85E89D\\">body</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #79B8FF\\">color</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">var</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">--varName</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">/* 如果支持自定义属性，则把 body 颜色设置为变量 varName 指定的颜色 */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">@supports</span><span style=\\"color: #24292E\\"> (</span><span style=\\"color: #E36209\\">--foo</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">green</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #22863A\\">body</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #005CC5\\">color</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">var</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">--varName</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br></div></div><h3 id=\\"层叠性\\" tabindex=\\"-1\\">层叠性 <a class=\\"header-anchor\\" href=\\"#层叠性\\" aria-label=\\"Permalink to &quot;层叠性&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>层叠样式表，这里的层叠怎么理解呢？其实它是 CSS 中的核心特性之一，用于合并来自多个源的属性值的算法。比如说针对某个 HTML 标签，有许多的 CSS 声明都能作用到的时候，那最后谁应该起作用呢？层叠性说的大概就是这个。</p>\\n<p>针对不同源的样式，将按照如下的顺序进行层叠，越往下优先级越高：</p>\\n<ul>\\n<li>用户代理样式表中的声明(例如，浏览器的默认样式，在没有设置其他样式时使用)。</li>\\n<li>~用户样式表中的常规声明(由用户设置的自定义样式。由于 Chrome 在很早的时候就放弃了用户样式表的功能，所以这里将不再考虑它的排序。)~。</li>\\n<li>作者样式表中的常规声明(这些是我们 Web 开发人员设置的样式)。</li>\\n<li>作者样式表中的 !important 声明。</li>\\n<li>~用户样式表中的 !important 声明S~。</li>\\n</ul>\\n<p>理解层叠性的时候需要结合 CSS 选择器的优先级以及继承性来理解。比如针对同一个选择器，定义在后面的声明会覆盖前面的；作者定义的样式会比默认继承的样式优先级更高。</p>\\n<h3 id=\\"选择器\\" tabindex=\\"-1\\">选择器 <a class=\\"header-anchor\\" href=\\"#选择器\\" aria-label=\\"Permalink to &quot;选择器&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>CSS 选择器无疑是其核心之一，对于基础选择器以及一些常用伪类必须掌握。下面列出了常用的选择器。 想要获取更多选择器的用法可以看 <a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2FCSS_Selectors\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors\\" target=\\"_blank\\" rel=\\"noreferrer\\">MDN CSS Selectors</a>。</p>\\n<h4 id=\\"基础选择器\\" tabindex=\\"-1\\">基础选择器 <a class=\\"header-anchor\\" href=\\"#基础选择器\\" aria-label=\\"Permalink to &quot;基础选择器&quot;\\">&ZeroWidthSpace;</a></h4>\\n<ul>\\n<li>标签选择器：<code>h1</code></li>\\n<li>类选择器：<code>.checked</code></li>\\n<li>ID 选择器：<code>#picker</code></li>\\n<li>通配选择器：<code>*</code></li>\\n</ul>\\n<p><strong>属性选择器</strong></p>\\n<ul>\\n<li><code>[attr]</code>：指定属性的元素；</li>\\n<li><code>[attr=val]</code>：属性等于指定值的元素；</li>\\n<li><code>[attr*=val]</code>：属性包含指定值的元素；</li>\\n<li><code>[attr^=val]</code> ：属性以指定值开头的元素；</li>\\n<li><code>[attr$=val]</code>：属性以指定值结尾的元素；</li>\\n<li><code>[attr~=val]</code>：属性包含指定值(完整单词)的元素(不推荐使用)；</li>\\n<li><code>[attr|=val]</code>：属性以指定值(完整单词)开头的元素(不推荐使用)；</li>\\n</ul>\\n<h4 id=\\"组合选择器\\" tabindex=\\"-1\\">组合选择器 <a class=\\"header-anchor\\" href=\\"#组合选择器\\" aria-label=\\"Permalink to &quot;组合选择器&quot;\\">&ZeroWidthSpace;</a></h4>\\n<ul>\\n<li>相邻兄弟选择器：<code>A + B</code></li>\\n<li>普通兄弟选择器：<code>A ~ B</code></li>\\n<li>子选择器：<code>A &gt; B</code></li>\\n<li>后代选择器：<code>A B</code></li>\\n</ul>\\n<h4 id=\\"伪类\\" tabindex=\\"-1\\">伪类 <a class=\\"header-anchor\\" href=\\"#伪类\\" aria-label=\\"Permalink to &quot;伪类&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p><strong>条件伪类</strong></p>\\n<ul>\\n<li><code>:lang()</code>：基于元素语言来匹配页面元素；</li>\\n<li><code>:dir()</code>：匹配特定文字书写方向的元素；</li>\\n<li><code>:has()</code>：匹配包含指定元素的元素；</li>\\n<li><code>:is()</code>：匹配指定选择器列表里的元素；</li>\\n<li><code>:not()</code>：用来匹配不符合一组选择器的元素；</li>\\n</ul>\\n<p><strong>行为伪类</strong></p>\\n<ul>\\n<li><code>:active</code>：鼠标激活的元素；</li>\\n<li><code>:hover</code>： 鼠标悬浮的元素；</li>\\n<li><code>::selection</code>：鼠标选中的元素；</li>\\n</ul>\\n<p><strong>状态伪类</strong></p>\\n<ul>\\n<li><code>:target</code>：当前锚点的元素；</li>\\n<li><code>:link</code>：未访问的链接元素；</li>\\n<li><code>:visited</code>：已访问的链接元素；</li>\\n<li><code>:focus</code>：输入聚焦的表单元素；</li>\\n<li><code>:required</code>：输入必填的表单元素；</li>\\n<li><code>:valid</code>：输入合法的表单元素；</li>\\n<li><code>:invalid</code>：输入非法的表单元素；</li>\\n<li><code>:in-range</code>：输入范围以内的表单元素；</li>\\n<li><code>:out-of-range</code>：输入范围以外的表单元素；</li>\\n<li><code>:checked</code>：选项选中的表单元素；</li>\\n<li><code>:optional</code>：选项可选的表单元素；</li>\\n<li><code>:enabled</code>：事件启用的表单元素；</li>\\n<li><code>:disabled</code>：事件禁用的表单元素；</li>\\n<li><code>:read-only</code>：只读的表单元素；</li>\\n<li><code>:read-write</code>：可读可写的表单元素；</li>\\n<li><code>:blank</code>：输入为空的表单元素；</li>\\n<li><code>:current()</code>：浏览中的元素；</li>\\n<li><code>:past()</code>：已浏览的元素；</li>\\n<li><code>:future()</code>：未浏览的元素；</li>\\n</ul>\\n<p><strong>结构伪类</strong></p>\\n<ul>\\n<li><code>:root</code>：文档的根元素；</li>\\n<li><code>:empty</code>：无子元素的元素；</li>\\n<li><code>:first-letter</code>：元素的首字母；</li>\\n<li><code>:first-line</code>：元素的首行；</li>\\n<li><code>:nth-child(n)</code>：元素中指定顺序索引的元素；</li>\\n<li><code>:nth-last-child(n)</code>：元素中指定逆序索引的元素；；</li>\\n<li><code>:first-child</code> ：元素中为首的元素；</li>\\n<li><code>:last-child</code> ：元素中为尾的元素；</li>\\n<li><code>:only-child</code>：父元素仅有该元素的元素；</li>\\n<li><code>:nth-of-type(n)</code> ：标签中指定顺序索引的标签；</li>\\n<li><code>:nth-last-of-type(n)</code>：标签中指定逆序索引的标签；</li>\\n<li><code>:first-of-type</code> ：标签中为首的标签；</li>\\n<li><code>:last-of-type</code>：标签中为尾标签；</li>\\n<li><code>:only-of-type</code>：父元素仅有该标签的标签；</li>\\n</ul>\\n<h4 id=\\"伪元素\\" tabindex=\\"-1\\">伪元素 <a class=\\"header-anchor\\" href=\\"#伪元素\\" aria-label=\\"Permalink to &quot;伪元素&quot;\\">&ZeroWidthSpace;</a></h4>\\n<ul>\\n<li><code>::before</code>：在元素前插入内容；</li>\\n<li><code>::after</code>：在元素后插入内容；</li>\\n</ul>\\n<h3 id=\\"优先级\\" tabindex=\\"-1\\">优先级 <a class=\\"header-anchor\\" href=\\"#优先级\\" aria-label=\\"Permalink to &quot;优先级&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b226c55b87c426c840d2c70d51d3511~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<p>优先级就是分配给指定的 CSS 声明的一个权重，它由匹配的选择器中的每一种选择器类型的数值决定。为了记忆，可以把权重分成如下几个等级，数值越大的权重越高：</p>\\n<ul>\\n<li>10000：!important；</li>\\n<li>01000：内联样式；</li>\\n<li>00100：ID 选择器；</li>\\n<li>00010：类选择器、伪类选择器、属性选择器；</li>\\n<li>00001：元素选择器、伪元素选择器；</li>\\n<li>00000：通配选择器、后代选择器、兄弟选择器；</li>\\n</ul>\\n<p>可以看到内联样式（通过元素中 style 属性定义的样式）的优先级大于任何选择器；而给属性值加上 !important 又可以把优先级提至最高，就是因为它的优先级最高，所以需要谨慎使用它，以下有些使用注意事项：</p>\\n<ul>\\n<li>一定要优先考虑使用样式规则的优先级来解决问题而不是 !important；</li>\\n<li>只有在需要覆盖全站或外部 CSS 的特定页面中使用 !important；</li>\\n<li>永远不要在你的插件中使用 !important；</li>\\n<li>永远不要在全站范围的 CSS 代码中使用 !important；</li>\\n</ul>\\n<h3 id=\\"继承性\\" tabindex=\\"-1\\">继承性 <a class=\\"header-anchor\\" href=\\"#继承性\\" aria-label=\\"Permalink to &quot;继承性&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8bd1604b143463eb121c1f46d71c652~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<p>在 CSS 中有一个很重要的特性就是子元素会继承父元素对应属性计算后的值。比如页面根元素 html 的文本颜色默认是黑色的，页面中的所有其他元素都将继承这个颜色，当申明了如下样式后，H1 文本将变成橙色。</p>\\n<div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #85E89D\\">body</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">color</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">orange</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #85E89D\\">h1</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">color</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">inherit</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #22863A\\">body</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">color</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">orange</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #22863A\\">h1</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">color</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">inherit</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br></div></div><p>设想一下，如果 CSS 中不存在继承性，那么我们就需要为不同文本的标签都设置一下 color，这样一来的后果就是 CSS 的文件大小就会无限增大。</p>\\n<p>CSS 属性很多，但并不是所有的属性默认都是能继承父元素对应属性的，那哪些属性存在默认继承的行为呢？一定是那些不会影响到页面布局的属性，可以分为如下几类：</p>\\n<ul>\\n<li>字体相关：<code>font-family</code>、<code>font-style</code>、<code>font-size</code>、<code>font-weight</code> 等；</li>\\n<li>文本相关：<code>text-align</code>、<code>text-indent</code>、<code>text-decoration</code>、<code>text-shadow</code>、<code>letter-spacing</code>、<code>word-spacing</code>、<code>white-space</code>、<code>line-height</code>、<code>color</code> 等；</li>\\n<li>列表相关：<code>list-style</code>、<code>list-style-image</code>、<code>list-style-type</code>、<code>list-style-position</code> 等；</li>\\n<li>其他属性：<code>visibility</code>、<code>cursor</code> 等；</li>\\n</ul>\\n<p>对于其他默认不继承的属性也可以通过以下几个属性值来控制继承行为：</p>\\n<ul>\\n<li><code>inherit</code>：继承父元素对应属性的计算值；</li>\\n<li><code>initial</code>：应用该属性的默认值，比如 color 的默认值是 <code>#000</code>；</li>\\n<li><code>unset</code>：如果属性是默认可以继承的，则取 <code>inherit</code> 的效果，否则同 <code>initial</code>；</li>\\n<li><code>revert</code>：效果等同于 <code>unset</code>，兼容性差。</li>\\n</ul>\\n<h3 id=\\"文档流\\" tabindex=\\"-1\\">文档流 <a class=\\"header-anchor\\" href=\\"#文档流\\" aria-label=\\"Permalink to &quot;文档流&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>在 CSS 的世界中，会把内容按照从左到右、从上到下的顺序进行排列显示。正常情况下会把页面分割成一行一行的显示，而每行又可能由多列组成，所以从视觉上看起来就是从上到下从左到右，而这就是 CSS 中的流式布局，又叫文档流。文档流就像水一样，能够自适应所在的容器，一般它有如下几个特性：</p>\\n<ul>\\n<li>块级元素默认会占满整行，所以多个块级盒子之间是从上到下排列的；</li>\\n<li>内联元素默认会在一行里一列一列的排布，当一行放不下的时候，会自动切换到下一行继续按照列排布；</li>\\n</ul>\\n<p><strong>如何脱离文档流呢？</strong></p>\\n<p>脱流文档流指节点脱流正常文档流后，在正常文档流中的其他节点将忽略该节点并填补其原先空间。文档一旦脱流，计算其父节点高度时不会将其高度纳入，脱流节点不占据空间。有两种方式可以让元素脱离文档流：浮动和定位。</p>\\n<ul>\\n<li>使用浮动（float）会将元素脱离文档流，移动到容器左/右侧边界或者是另一个浮动元素旁边，该浮动元素之前占用的空间将被别的元素填补，另外浮动之后所占用的区域不会和别的元素之间发生重叠；</li>\\n<li>使用绝对定位（<code>position: absolute;</code>）或者固定定位（<code>position: fixed;</code>）也会使得元素脱离文档流，且空出来的位置将自动被后续节点填补。</li>\\n</ul>\\n<h3 id=\\"盒模型\\" tabindex=\\"-1\\">盒模型 <a class=\\"header-anchor\\" href=\\"#盒模型\\" aria-label=\\"Permalink to &quot;盒模型&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>在 CSS 中任何元素都可以看成是一个盒子，而一个盒子是由 4 部分组成的：内容（content）、内边距（padding）、边框（border）和外边距（margin）。</p>\\n<p>盒模型有 2 种：标准盒模型和 IE 盒模型，本别是由 W3C 和 IExplore 制定的标准。</p>\\n<p>如果给某个元素设置如下样式：</p>\\n<div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">.box</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">width</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">200</span><span style=\\"color: #F97583\\">px</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">height</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">200</span><span style=\\"color: #F97583\\">px</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">padding</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">10</span><span style=\\"color: #F97583\\">px</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">border</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #F97583\\">px</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">solid</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">#eee</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">margin</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">10</span><span style=\\"color: #F97583\\">px</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">.box</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">width</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">200</span><span style=\\"color: #D73A49\\">px</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">height</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">200</span><span style=\\"color: #D73A49\\">px</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">padding</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">10</span><span style=\\"color: #D73A49\\">px</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">border</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #D73A49\\">px</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">solid</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">#eee</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">margin</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">10</span><span style=\\"color: #D73A49\\">px</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br></div></div><p>标准盒模型认为：盒子的实际尺寸 = 内容（设置的宽/高） + 内边距 + 边框</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4b9dddb310540f78a19ea0f7da92938~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<p>所以 <code>.box</code> 元素内容的宽度就为 <code>200px</code>，而实际的宽度则是 <code>width</code> + <code>padding-left</code> + <code>padding-right</code> + <code>border-left-width</code> + <code>border-right-width</code> = 200 + 10 + 10 + 1 + 1 = 222。</p>\\n<p>IE 盒模型认为：盒子的实际尺寸 = 设置的宽/高 = 内容 + 内边距 + 边框</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/302fcd74518b44b4adfe50b02dc3aed3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<p><code>.box</code> 元素所占用的实际宽度为 <code>200px</code>，而内容的真实宽度则是 <code>width</code> - <code>padding-left</code> - <code>padding-right</code> - <code>border-left-width</code> - <code>border-right-width</code> = 200 - 10 - 10 - 1 - 1 = 178。</p>\\n<p>现在高版本的浏览器基本上默认都是使用标准盒模型，而像 IE6 这种老古董才是默认使用 IE 盒模型的。</p>\\n<p>在 CSS3 中新增了一个属性 <code>box-sizing</code>，允许开发者来指定盒子使用什么标准，它有 2 个值：</p>\\n<ul>\\n<li><code>content-box</code>：标准盒模型；</li>\\n<li><code>border-box</code>：IE 盒模型；</li>\\n</ul>\\n<h3 id=\\"视觉格式化模型\\" tabindex=\\"-1\\">视觉格式化模型 <a class=\\"header-anchor\\" href=\\"#视觉格式化模型\\" aria-label=\\"Permalink to &quot;视觉格式化模型&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>视觉格式化模型（Visual formatting model）是用来处理和在视觉媒体上显示文档时使用的计算规则。CSS 中一切皆盒子，而视觉格式化模型简单来理解就是规定这些盒子应该怎么样放置到页面中去，这个模型在计算的时候会依赖到很多的因素，比如：盒子尺寸、盒子类型、定位方案（是浮动还是定位）、兄弟元素或者子元素以及一些别的因素。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ee9c7946b76427eb6dab179f0520c2f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"Visual formatting model\\"></p>\\n<p>从上图中可以看到视觉格式化模型涉及到的内容很多，有兴趣深入研究的可以结合上图看这个 W3C 的文档 <a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fwww.w3.org%2FTR%2FCSS2%2Fvisuren.html\\" title=\\"https://www.w3.org/TR/CSS2/visuren.html\\" target=\\"_blank\\" rel=\\"noreferrer\\">Visual formatting model</a>。所以这里就简单介绍下盒子类型。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f659e9524584a42bf22ffbccac8251b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<p>盒子类型由 display 决定，同时给一个元素设置 display 后，将会决定这个盒子的 2 个显示类型（display type）：</p>\\n<ul>\\n<li>outer display type（对外显示）：决定了该元素本身是如何布局的，即参与何种格式化上下文；</li>\\n<li>inner display type（对内显示）：其实就相当于把该元素当成了容器，规定了其内部子元素是如何布局的，参与何种格式化上下文；</li>\\n</ul>\\n<h4 id=\\"outer-display-type\\" tabindex=\\"-1\\">outer display type <a class=\\"header-anchor\\" href=\\"#outer-display-type\\" aria-label=\\"Permalink to &quot;outer display type&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>对外显示方面，盒子类型可以分成 2 类：block-level box（块级盒子） 和 inline-level box（行内级盒子）。</p>\\n<p>依据上图可以列出都有哪些块级和行内级盒子：</p>\\n<ul>\\n<li>块级盒子：display 为 block、list-item、table、flex、grid、flow-root 等；</li>\\n<li>行内级盒子：display 为 inline、inline-block、inline-table 等；</li>\\n</ul>\\n<p>所有块级盒子都会参与 BFC，呈现垂直排列；而所有行内级盒子都参会 IFC，呈现水平排列。</p>\\n<p>除此之外，block、inline 和 inline-block 还有什么更具体的区别呢？</p>\\n<p><strong>block</strong></p>\\n<ul>\\n<li>占满一行，默认继承父元素的宽度；多个块元素将从上到下进行排列；</li>\\n<li>设置 width/height 将会生效；</li>\\n<li>设置 padding 和 margin 将会生效；</li>\\n</ul>\\n<p><strong>inline</strong></p>\\n<ul>\\n<li>不会占满一行，宽度随着内容而变化；多个 inline 元素将按照从左到右的顺序在一行里排列显示，如果一行显示不下，则自动换行；</li>\\n<li>设置 width/height 将不会生效；</li>\\n<li>设置竖直方向上的 padding 和 margin 将不会生效；</li>\\n</ul>\\n<p><strong>inline-block</strong></p>\\n<ul>\\n<li>是行内块元素，不单独占满一行，可以看成是能够在一行里进行左右排列的块元素；</li>\\n<li>设置 width/height 将会生效；</li>\\n<li>设置 padding 和 margin 将会生效；</li>\\n</ul>\\n<h4 id=\\"inner-display-type\\" tabindex=\\"-1\\">inner display type <a class=\\"header-anchor\\" href=\\"#inner-display-type\\" aria-label=\\"Permalink to &quot;inner display type&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>对内方面，其实就是把元素当成了容器，里面包裹着文本或者其他子元素。container box 的类型依据 display 的值不同，分为 4 种：</p>\\n<ul>\\n<li>block container：建立 BFC 或者 IFC；</li>\\n<li>flex container：建立 FFC；</li>\\n<li>grid container：建立 GFC;</li>\\n<li>ruby container：接触不多，不做介绍。</li>\\n</ul>\\n<p>值得一提的是如果把 img 这种替换元素（replaced element）申明为 block 是不会产生 container box 的，因为替换元素比如 img 设计的初衷就仅仅是通过 src 把内容替换成图片，完全没考虑过会把它当成容器。</p>\\n<p>参考：</p>\\n<ul>\\n<li><a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fyachen168.github.io%2Farticle%2Fdisplay.html\\" title=\\"https://yachen168.github.io/article/display.html\\" target=\\"_blank\\" rel=\\"noreferrer\\">CSS 原理 - 你所不知道的 display</a></li>\\n<li><a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fithelp.ithome.com.tw%2Farticles%2F10223896%3Fsc%3Dpt\\" title=\\"https://ithelp.ithome.com.tw/articles/10223896?sc=pt\\" target=\\"_blank\\" rel=\\"noreferrer\\">格式化上下文</a></li>\\n</ul>\\n<h3 id=\\"格式化上下文\\" tabindex=\\"-1\\">格式化上下文 <a class=\\"header-anchor\\" href=\\"#格式化上下文\\" aria-label=\\"Permalink to &quot;格式化上下文&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>格式化上下文（Formatting Context）是 CSS2.1 规范中的一个概念，大概说的是页面中的一块渲染区域，规定了渲染区域内部的子元素是如何排版以及相互作用的。</p>\\n<p>不同类型的盒子有不同格式化上下文，大概有这 4 类：</p>\\n<ul>\\n<li>BFC (Block Formatting Context) 块级格式化上下文；</li>\\n<li>IFC (Inline Formatting Context) 行内格式化上下文；</li>\\n<li>FFC (Flex Formatting Context) 弹性格式化上下文；</li>\\n<li>GFC (Grid Formatting Context) 格栅格式化上下文；</li>\\n</ul>\\n<p>其中 BFC 和 IFC 在 CSS 中扮演着非常重要的角色，因为它们直接影响了网页布局，所以需要深入理解其原理。</p>\\n<h4 id=\\"bfc\\" tabindex=\\"-1\\">BFC <a class=\\"header-anchor\\" href=\\"#bfc\\" aria-label=\\"Permalink to &quot;BFC&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>块格式化上下文，它是一个独立的渲染区域，只有块级盒子参与，它规定了内部的块级盒子如何布局，并且与这个区域外部毫不相干。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a73e2276d8b41f0a905361f151157e2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图来源于 yachen168\\"></p>\\n<p><strong>BFC 渲染规则</strong></p>\\n<ul>\\n<li>内部的盒子会在垂直方向，一个接一个地放置；</li>\\n<li>盒子垂直方向的距离由 margin 决定，属于同一个 BFC 的两个相邻盒子的 margin 会发生重叠；</li>\\n<li>每个元素的 margin 的左边，与包含块 border 的左边相接触(对于从左往右的格式化，否则相反)，即使存在浮动也是如此；</li>\\n<li>BFC 的区域不会与 float 盒子重叠；</li>\\n<li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\\n<li>计算 BFC 的高度时，浮动元素也参与计算。</li>\\n</ul>\\n<p><strong>如何创建 BFC？</strong></p>\\n<ul>\\n<li>根元素：html</li>\\n<li>非溢出的可见元素：overflow 不为 visible</li>\\n<li>设置浮动：float 属性不为 none</li>\\n<li>设置定位：position 为 absolute 或 fixed</li>\\n<li>定义成块级的非块级元素：display: inline-block/table-cell/table-caption/flex/inline-flex/grid/inline-grid</li>\\n</ul>\\n<p><strong>BFC 应用场景</strong></p>\\n<p>1、 自适应两栏布局</p>\\n<p>应用原理：BFC 的区域不会和浮动区域重叠，所以就可以把侧边栏固定宽度且左浮动，而对右侧内容触发 BFC，使得它的宽度自适应该行剩余宽度。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc555b773b304ec2af61a8fcbb9bafcb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\"> class=&quot;layout&quot;</span><span style=\\"color: #F97583\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    &lt;</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\"> class=&quot;aside&quot;</span><span style=\\"color: #F97583\\">&gt;</span><span style=\\"color: #E1E4E8\\">aside&lt;/</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #F97583\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    &lt;</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\"> class=&quot;main&quot;</span><span style=\\"color: #F97583\\">&gt;</span><span style=\\"color: #E1E4E8\\">main&lt;/</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #F97583\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;/</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #F97583\\">&gt;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\"> class=&quot;layout&quot;</span><span style=\\"color: #D73A49\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    &lt;</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\"> class=&quot;aside&quot;</span><span style=\\"color: #D73A49\\">&gt;</span><span style=\\"color: #24292E\\">aside&lt;/</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #D73A49\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    &lt;</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\"> class=&quot;main&quot;</span><span style=\\"color: #D73A49\\">&gt;</span><span style=\\"color: #24292E\\">main&lt;/</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #D73A49\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;/</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #D73A49\\">&gt;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br></div></div><div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">.aside</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">float</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">left</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">width</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">100</span><span style=\\"color: #F97583\\">px</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">.main</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    &lt;!</span><span style=\\"color: #79B8FF\\">--</span><span style=\\"color: #E1E4E8\\"> 触发 </span><span style=\\"color: #79B8FF\\">BFC</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">--</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">overflow</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">auto</span><span style=\\"color: #E1E4E8\\">;</span><span style=\\"color: #79B8FF\\">BFCoverflow</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">.aside</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">float</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">left</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">width</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">100</span><span style=\\"color: #D73A49\\">px</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">.main</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    &lt;!</span><span style=\\"color: #005CC5\\">--</span><span style=\\"color: #24292E\\"> 触发 </span><span style=\\"color: #005CC5\\">BFC</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">--</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">overflow</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">auto</span><span style=\\"color: #24292E\\">;</span><span style=\\"color: #005CC5\\">BFCoverflow</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br></div></div><p>2、清除内部浮动</p>\\n<p>浮动造成的问题就是父元素高度坍塌，所以清除浮动需要解决的问题就是让父元素的高度恢复正常。而用 BFC 清除浮动的原理就是：计算 BFC 的高度时，浮动元素也参与计算。只要触发父元素的 BFC 即可。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1b790fa15ca4e3599aa53a8d1c2e973~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">.parent</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">overflow</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">hidden</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">.parent</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">overflow</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">hidden</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br></div></div><p>3、 防止垂直 margin 合并</p>\\n<p>BFC 渲染原理之一：同一个 BFC 下的垂直 margin 会发生合并。所以如果让 2 个元素不在同一个 BFC 中即可阻止垂直 margin 合并。那如何让 2 个相邻的兄弟元素不在同一个 BFC 中呢？可以给其中一个元素外面包裹一层，然后触发其包裹层的 BFC，这样一来 2 个元素就不会在同一个 BFC 中了。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e533424631140d5b8bbb48266303709~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\"> class=&quot;layout&quot;</span><span style=\\"color: #F97583\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    &lt;</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\"> class=&quot;a&quot;</span><span style=\\"color: #F97583\\">&gt;</span><span style=\\"color: #E1E4E8\\">a&lt;/</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #F97583\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    &lt;</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\"> class=&quot;</span><span style=\\"color: #85E89D\\">contain-b</span><span style=\\"color: #E1E4E8\\">&quot;</span><span style=\\"color: #F97583\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        &lt;</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\"> class=&quot;b&quot;</span><span style=\\"color: #F97583\\">&gt;</span><span style=\\"color: #E1E4E8\\">b&lt;/</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #F97583\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    &lt;/</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #F97583\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;/</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #F97583\\">&gt;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\"> class=&quot;layout&quot;</span><span style=\\"color: #D73A49\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    &lt;</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\"> class=&quot;a&quot;</span><span style=\\"color: #D73A49\\">&gt;</span><span style=\\"color: #24292E\\">a&lt;/</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #D73A49\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    &lt;</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\"> class=&quot;</span><span style=\\"color: #22863A\\">contain-b</span><span style=\\"color: #24292E\\">&quot;</span><span style=\\"color: #D73A49\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        &lt;</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\"> class=&quot;b&quot;</span><span style=\\"color: #D73A49\\">&gt;</span><span style=\\"color: #24292E\\">b&lt;/</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #D73A49\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    &lt;/</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #D73A49\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;/</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #D73A49\\">&gt;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br></div></div><div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">.demo3</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">.a</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">.demo3</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">.b</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">border</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #F97583\\">px</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">solid</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">#999</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">margin</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">10</span><span style=\\"color: #F97583\\">px</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">.contain-b</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">overflow</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">hidden</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">.demo3</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">.a</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">.demo3</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">.b</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">border</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #D73A49\\">px</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">solid</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">#999</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">margin</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">10</span><span style=\\"color: #D73A49\\">px</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">.contain-b</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">overflow</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">hidden</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br></div></div><p>针对以上 3 个 示例 ，可以结合这个 <a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fcodepen.io%2Fbulandent%2Fpen%2FeYBVpEm\\" title=\\"https://codepen.io/bulandent/pen/eYBVpEm\\" target=\\"_blank\\" rel=\\"noreferrer\\">BFC 应用示例</a> 配合观看更佳。</p>\\n<p>参考：<a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fyachen168.github.io%2Farticle%2FFormatting-context.html\\" title=\\"https://yachen168.github.io/article/Formatting-context.html\\" target=\\"_blank\\" rel=\\"noreferrer\\">CSS 原理 - Formatting Context</a></p>\\n<h4 id=\\"ifc\\" tabindex=\\"-1\\">IFC <a class=\\"header-anchor\\" href=\\"#ifc\\" aria-label=\\"Permalink to &quot;IFC&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>IFC 的形成条件非常简单，块级元素中仅包含内联级别元素，需要注意的是当IFC中有块级元素插入时，会产生两个匿名块将父元素分割开来，产生两个 IFC。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5cee1281ae5f44a69abc94fb9fa760fd~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<p><strong>IFC 渲染规则</strong></p>\\n<ul>\\n<li>子元素在水平方向上一个接一个排列，在垂直方向上将以容器顶部开始向下排列；</li>\\n<li>节点无法声明宽高，其中 margin 和 padding 在水平方向有效在垂直方向无效；</li>\\n<li>节点在垂直方向上以不同形式对齐；</li>\\n<li>能把在一行上的框都完全包含进去的一个矩形区域，被称为该行的线盒（line box）。线盒的宽度是由包含块（containing box）和与其中的浮动来决定；</li>\\n<li>IFC 中的 line box 一般左右边贴紧其包含块，但 float 元素会优先排列。</li>\\n<li>IFC 中的 line box 高度由 line-height 计算规则来确定，同个 IFC 下的多个 line box 高度可能会不同；</li>\\n<li>当内联级盒子的总宽度少于包含它们的 line box 时，其水平渲染规则由 text-align 属性值来决定；</li>\\n<li>当一个内联盒子超过父元素的宽度时，它会被分割成多盒子，这些盒子分布在多个 line box 中。如果子元素未设置强制换行的情况下，inline box 将不可被分割，将会溢出父元素。</li>\\n</ul>\\n<p>针对如上的 IFC 渲染规则，你是不是可以分析下下面这段代码的 IFC 环境是怎么样的呢？</p>\\n<div class=\\"language-html vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">html</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;</span><span style=\\"color: #85E89D\\">p</span><span style=\\"color: #E1E4E8\\">&gt;It can get &lt;</span><span style=\\"color: #85E89D\\">strong</span><span style=\\"color: #E1E4E8\\">&gt;very complicated&lt;/</span><span style=\\"color: #FDAEB7; font-style: italic\\">storng</span><span style=\\"color: #E1E4E8\\">&gt; once you start looking into it.&lt;/</span><span style=\\"color: #85E89D\\">p</span><span style=\\"color: #E1E4E8\\">&gt;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;</span><span style=\\"color: #22863A\\">p</span><span style=\\"color: #24292E\\">&gt;It can get &lt;</span><span style=\\"color: #22863A\\">strong</span><span style=\\"color: #24292E\\">&gt;very complicated&lt;/</span><span style=\\"color: #B31D28; font-style: italic\\">storng</span><span style=\\"color: #24292E\\">&gt; once you start looking into it.&lt;/</span><span style=\\"color: #22863A\\">p</span><span style=\\"color: #24292E\\">&gt;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d357e140d61c4635a13771067758862b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<p>对应上面这样一串 HTML 分析如下：</p>\\n<ul>\\n<li>p 标签是一个 block container，对内将产生一个 IFC；</li>\\n<li>由于一行没办法显示完全，所以产生了 2 个线盒（line box）；线盒的宽度就继承了 p 的宽度；高度是由里面的内联盒子的 line-height 决定；</li>\\n<li>It can get：匿名的内联盒子；</li>\\n<li>very complicated：strong 标签产生的内联盒子；</li>\\n<li>once you start：匿名的内联盒子；</li>\\n<li>looking into it.：匿名的内联盒子。</li>\\n</ul>\\n<p>参考：<a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fwww.w3.org%2FTR%2FCSS2%2Fvisuren.html%23inline-formatting\\" title=\\"https://www.w3.org/TR/CSS2/visuren.html#inline-formatting\\" target=\\"_blank\\" rel=\\"noreferrer\\">Inline formatting contexts</a></p>\\n<p><strong>IFC 应用场景</strong></p>\\n<ul>\\n<li>水平居中：当一个块要在环境中水平居中时，设置其为 inline-block 则会在外层产生 IFC，通过 text-align 则可以使其水平居中。</li>\\n<li>垂直居中：创建一个 IFC，用其中一个元素撑开父元素的高度，然后设置其 vertical-align: middle，其他行内元素则可以在此父元素下垂直居中。</li>\\n</ul>\\n<p>偷个懒，demo 和图我就不做了。</p>\\n<h3 id=\\"层叠上下文\\" tabindex=\\"-1\\">层叠上下文 <a class=\\"header-anchor\\" href=\\"#层叠上下文\\" aria-label=\\"Permalink to &quot;层叠上下文&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>在电脑显示屏幕上的显示的页面其实是一个三维的空间，水平方向是 X 轴，竖直方向是 Y 轴，而屏幕到眼睛的方向可以看成是 Z 轴。众 HTML 元素依据自己定义的属性的优先级在 Z 轴上按照一定的顺序排开，而这其实就是层叠上下文所要描述的东西。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9fe12ffcbbe547dbbabc0c74488c30c9~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"-w566\\"></p>\\n<p>我们对层叠上下文的第一印象可能要来源于 z-index，认为它的值越大，距离屏幕观察者就越近，那么层叠等级就越高，事实确实是这样的，但层叠上下文的内容远非仅仅如此：</p>\\n<ul>\\n<li>z-index 能够在层叠上下文中对元素的堆叠顺序其作用是必须配合定位才可以；</li>\\n<li>除了 z-index 之外，一个元素在 Z 轴上的显示顺序还受层叠等级和层叠顺序影响；</li>\\n</ul>\\n<p>在看层叠等级和层叠顺序之前，我们先来看下如何产生一个层叠上下文，特定的 HTML 元素或者 CSS 属性产生层叠上下文，MDN 中给出了这么一个列表，符合以下任一条件的元素都会产生层叠上下文：</p>\\n<ul>\\n<li>html 文档根元素</li>\\n<li>声明 position: absolute/relative 且 z-index 值不为 auto 的元素；</li>\\n<li>声明 position: fixed/sticky 的元素；</li>\\n<li>flex 容器的子元素，且 z-index 值不为 auto；</li>\\n<li>grid 容器的子元素，且 z-index 值不为 auto；</li>\\n<li>opacity 属性值小于 1 的元素；</li>\\n<li>mix-blend-mode 属性值不为 normal 的元素；</li>\\n<li>以下任意属性值不为 none 的元素：\\n<ul>\\n<li>transform</li>\\n<li>filter</li>\\n<li>perspective</li>\\n<li>clip-path</li>\\n<li>mask / mask-image / mask-border</li>\\n</ul>\\n</li>\\n<li>isolation 属性值为 isolate 的元素；</li>\\n<li>-webkit-overflow-scrolling 属性值为 touch 的元素；</li>\\n<li>will-change 值设定了任一属性而该属性在 non-initial 值时会创建层叠上下文的元素；</li>\\n<li>contain 属性值为 layout、paint 或包含它们其中之一的合成值（比如 contain: strict、contain: content）的元素。</li>\\n</ul>\\n<p><strong>层叠等级</strong></p>\\n<p>层叠等级指节点在三维空间 Z 轴上的上下顺序。它分两种情况：</p>\\n<ul>\\n<li>在同一个层叠上下文中，它描述定义的是该层叠上下文中的层叠上下文元素在 Z 轴上的上下顺序；</li>\\n<li>在其他普通元素中，它描述定义的是这些普通元素在 Z 轴上的上下顺序；</li>\\n</ul>\\n<p>普通节点的层叠等级优先由其所在的层叠上下文决定，层叠等级的比较只有在当前层叠上下文中才有意义，脱离当前层叠上下文的比较就变得无意义了。</p>\\n<p><strong>层叠顺序</strong></p>\\n<p>在同一个层叠上下文中如果有多个元素，那么他们之间的层叠顺序是怎么样的呢？</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21043848687d42c6b46d6cf9c59c17ff~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<p>以下这个列表越往下层叠优先级越高，视觉上的效果就是越容易被用户看到（不会被其他元素覆盖）：</p>\\n<ul>\\n<li>层叠上下文的 border 和 background</li>\\n<li>z-index &lt; 0 的子节点</li>\\n<li>标准流内块级非定位的子节点</li>\\n<li>浮动非定位的子节点</li>\\n<li>标准流内行内非定位的子节点</li>\\n<li>z-index: auto/0 的子节点</li>\\n<li>z-index &gt; 0的子节点</li>\\n</ul>\\n<p><strong>如何比较两个元素的层叠等级？</strong></p>\\n<ul>\\n<li>在同一个层叠上下文中，比较两个元素就是按照上图的介绍的层叠顺序进行比较。</li>\\n<li>如果不在同一个层叠上下文中的时候，那就需要比较两个元素分别所处的层叠上下文的等级。</li>\\n<li>如果两个元素都在同一个层叠上下文，且层叠顺序相同，则在 HTML 中定义越后面的层叠等级越高。</li>\\n</ul>\\n<p>参考：<a href=\\"https://juejin.cn/post/6844903667175260174\\" title=\\"https://juejin.cn/post/6844903667175260174\\" target=\\"_blank\\" rel=\\"noreferrer\\">彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index</a></p>\\n<h3 id=\\"值和单位\\" tabindex=\\"-1\\">值和单位 <a class=\\"header-anchor\\" href=\\"#值和单位\\" aria-label=\\"Permalink to &quot;值和单位&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>CSS 的声明是由属性和值组成的，而值的类型有许多种：</p>\\n<ul>\\n<li>数值：长度值 ，用于指定例如元素 width、border-width、font-size 等属性的值；</li>\\n<li>百分比：可以用于指定尺寸或长度，例如取决于父容器的 width、height 或默认的 font-size；</li>\\n<li>颜色：用于指定 background-color、color 等；</li>\\n<li>坐标位置：以屏幕的左上角为坐标原点定位元素的位置，比如常见的 background-position、top、right、bottom 和 left 等属性；</li>\\n<li>函数：用于指定资源路径或背景图片的渐变，比如 url()、linear-gradient() 等；</li>\\n</ul>\\n<p>而还有些值是需要带单位的，比如 width: 100px，这里的 px 就是表示长度的单位，长度单位除了 px 外，比较常用的还有 em、rem、vw/vh 等。那他们有什么区别呢？又应该在什么时候使用它们呢？</p>\\n<h4 id=\\"px\\" tabindex=\\"-1\\">px <a class=\\"header-anchor\\" href=\\"#px\\" aria-label=\\"Permalink to &quot;px&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>屏幕分辨率是指在屏幕的横纵方向上的像素点数量，比如分辨率 1920×1080 意味着水平方向含有 1920 个像素数，垂直方向含有 1080 个像素数。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7469f30a44fb4211bb7860eb82787819~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<p>而 px 表示的是 CSS 中的像素，在 CSS 中它是绝对的长度单位，也是最基础的单位，其他长度单位会自动被浏览器换算成 px。但是对于设备而言，它其实又是相对的长度单位，比如宽高都为 2px，在正常的屏幕下，其实就是 4 个像素点，而在设备像素比(devicePixelRatio) 为 2 的 Retina 屏幕下，它就有 16 个像素点。所以屏幕尺寸一致的情况下，屏幕分辨率越高，显示效果就越细腻。</p>\\n<p>讲到这里，还有一些相关的概念需要理清下：</p>\\n<p><strong>设备像素（Device pixels）</strong></p>\\n<p>设备屏幕的物理像素，表示的是屏幕的横纵有多少像素点；和屏幕分辨率是差不多的意思。</p>\\n<p><strong>设备像素比（DPR）</strong></p>\\n<p>设备像素比表示 1 个 CSS 像素等于几个物理像素。</p>\\n<p>计算公式：DPR = 物理像素数 / 逻辑像素数；</p>\\n<p>在浏览器中可以通过 window.devicePixelRatio 来获取当前屏幕的 DPR。</p>\\n<p><strong>像素密度（DPI/PPI）</strong></p>\\n<p>像素密度也叫显示密度或者屏幕密度，缩写为 DPI(Dots Per Inch) 或者 PPI(Pixel Per Inch)。从技术角度说，PPI 只存在于计算机显示领域，而 DPI 只出现于打印或印刷领域。</p>\\n<p>计算公式：像素密度 = 屏幕对角线的像素尺寸 / 物理尺寸</p>\\n<p>比如，对于分辨率为 750 * 1334 的 iPhone 6 来说，它的像素密度为：</p>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">Math.sqrt(750 * 750 + 1334 * 1334) / 4.7 = 326ppi</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">Math.sqrt(750 * 750 + 1334 * 1334) / 4.7 = 326ppi</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><p><strong>设备独立像素（DIP）</strong></p>\\n<p>DIP 是特别针对 Android设备而衍生出来的，原因是安卓屏幕的尺寸繁多，因此为了显示能尽量和设备无关，而提出的这个概念。它是基于屏幕密度而计算的，认为当屏幕密度是 160 的时候，px = DIP。</p>\\n<p>计算公式：dip = px * 160 / dpi</p>\\n<h4 id=\\"em\\" tabindex=\\"-1\\">em <a class=\\"header-anchor\\" href=\\"#em\\" aria-label=\\"Permalink to &quot;em&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>em 是 CSS 中的相对长度单位中的一个。居然是相对的，那它到底是相对的谁呢？它有 2 层意思：</p>\\n<ul>\\n<li>在 font-size 中使用是相对于<strong>父元素</strong>的 font-size 大小，比如父元素 font-size: 16px，当给子元素指定 font-size: 2em 的时候，经过计算后它的字体大小会是 32px；</li>\\n<li>在其他属性中使用是相对于自身的字体大小，如 width/height/padding/margin 等；</li>\\n</ul>\\n<p>我们都知道每个浏览器都会给 HTML 根元素 html 设置一个默认的 font-size，而这个值通常是 16px。这也就是为什么 1em = 16px 的原因所在了。</p>\\n<p>em 在计算的时候是会层层计算的，比如：</p>\\n<div class=\\"language-html vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">html</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    &lt;</span><span style=\\"color: #85E89D\\">p</span><span style=\\"color: #E1E4E8\\">&gt;&lt;/</span><span style=\\"color: #85E89D\\">p</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;/</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\">&gt;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    &lt;</span><span style=\\"color: #22863A\\">p</span><span style=\\"color: #24292E\\">&gt;&lt;/</span><span style=\\"color: #22863A\\">p</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;/</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\">&gt;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br></div></div><div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\"> { </span><span style=\\"color: #79B8FF\\">font-size</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">2</span><span style=\\"color: #F97583\\">em</span><span style=\\"color: #E1E4E8\\">; }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #85E89D\\">p</span><span style=\\"color: #E1E4E8\\"> { </span><span style=\\"color: #79B8FF\\">font-size</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">2</span><span style=\\"color: #F97583\\">em</span><span style=\\"color: #E1E4E8\\">; }</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\"> { </span><span style=\\"color: #005CC5\\">font-size</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">2</span><span style=\\"color: #D73A49\\">em</span><span style=\\"color: #24292E\\">; }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #22863A\\">p</span><span style=\\"color: #24292E\\"> { </span><span style=\\"color: #005CC5\\">font-size</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">2</span><span style=\\"color: #D73A49\\">em</span><span style=\\"color: #24292E\\">; }</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br></div></div><p>对于如上一个结构的 HTML，由于根元素 html 的字体大小是 16px，所以 p 标签最终计算出来后的字体大小会是 16 * 2 * 2 = 64px</p>\\n<h4 id=\\"rem\\" tabindex=\\"-1\\">rem <a class=\\"header-anchor\\" href=\\"#rem\\" aria-label=\\"Permalink to &quot;rem&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>rem(root em) 和 em 一样，也是一个相对长度单位，不过 rem 相对的是 HTML 的根元素 html。</p>\\n<p>rem 由于是基于 html 的 font-size 来计算，所以通常用于自适应网站或者 H5 中。</p>\\n<p>比如在做 H5 的时候，前端通常会让 UI 给 750px 宽的设计图，而在开发的时候可以基于 iPhone X 的尺寸 375px * 812px 来写页面，这样一来的话，就可以用下面的 JS 依据当前页面的视口宽度自动计算出根元素 html 的基准 font-size 是多少。</p>\\n<div class=\\"language-js vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> (</span><span style=\\"color: #FFAB70\\">doc</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #FFAB70\\">win</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">var</span><span style=\\"color: #E1E4E8\\"> docEl </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> doc.documentElement,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        resizeEvt </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;orientationchange&#39;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">in</span><span style=\\"color: #E1E4E8\\"> window </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;orientationchange&#39;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;resize&#39;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        psdWidth </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">750</span><span style=\\"color: #E1E4E8\\">,  </span><span style=\\"color: #6A737D\\">// 设计图宽度</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #B392F0\\">recalc</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> () {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">            </span><span style=\\"color: #F97583\\">var</span><span style=\\"color: #E1E4E8\\"> clientWidth </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> docEl.clientWidth;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">            </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> ( </span><span style=\\"color: #F97583\\">!</span><span style=\\"color: #E1E4E8\\">clientWidth ) </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">            </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> ( clientWidth </span><span style=\\"color: #F97583\\">&gt;=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">640</span><span style=\\"color: #E1E4E8\\"> ) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">                docEl.style.fontSize </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">200</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">*</span><span style=\\"color: #E1E4E8\\"> ( </span><span style=\\"color: #79B8FF\\">640</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">/</span><span style=\\"color: #E1E4E8\\"> psdWidth ) </span><span style=\\"color: #F97583\\">+</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;px&#39;</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">            } </span><span style=\\"color: #F97583\\">else</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">                docEl.style.fontSize </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">200</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">*</span><span style=\\"color: #E1E4E8\\"> ( clientWidth </span><span style=\\"color: #F97583\\">/</span><span style=\\"color: #E1E4E8\\"> psdWidth ) </span><span style=\\"color: #F97583\\">+</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;px&#39;</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">            }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        };</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> ( </span><span style=\\"color: #F97583\\">!</span><span style=\\"color: #E1E4E8\\">doc.addEventListener ) </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 绑定事件的时候最好配合防抖函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    win.</span><span style=\\"color: #B392F0\\">addEventListener</span><span style=\\"color: #E1E4E8\\">( resizeEvt, </span><span style=\\"color: #B392F0\\">debounce</span><span style=\\"color: #E1E4E8\\">(recalc, </span><span style=\\"color: #79B8FF\\">1000</span><span style=\\"color: #E1E4E8\\">), </span><span style=\\"color: #79B8FF\\">false</span><span style=\\"color: #E1E4E8\\"> );</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    doc.</span><span style=\\"color: #B392F0\\">addEventListener</span><span style=\\"color: #E1E4E8\\">( </span><span style=\\"color: #9ECBFF\\">&#39;DOMContentLoaded&#39;</span><span style=\\"color: #E1E4E8\\">, recalc, </span><span style=\\"color: #79B8FF\\">false</span><span style=\\"color: #E1E4E8\\"> );</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">debounce</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">func</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #FFAB70\\">wait</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #F97583\\">var</span><span style=\\"color: #E1E4E8\\"> timeout;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> () {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">            </span><span style=\\"color: #F97583\\">var</span><span style=\\"color: #E1E4E8\\"> context </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">this</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">            </span><span style=\\"color: #F97583\\">var</span><span style=\\"color: #E1E4E8\\"> args </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">arguments</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">            </span><span style=\\"color: #B392F0\\">clearTimeout</span><span style=\\"color: #E1E4E8\\">(timeout)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">            timeout </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">setTimeout</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\">(){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">                func.</span><span style=\\"color: #B392F0\\">apply</span><span style=\\"color: #E1E4E8\\">(context, args)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">            }, wait);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">})(document, window);</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">(</span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> (</span><span style=\\"color: #E36209\\">doc</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #E36209\\">win</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">var</span><span style=\\"color: #24292E\\"> docEl </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> doc.documentElement,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        resizeEvt </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;orientationchange&#39;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">in</span><span style=\\"color: #24292E\\"> window </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;orientationchange&#39;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;resize&#39;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        psdWidth </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">750</span><span style=\\"color: #24292E\\">,  </span><span style=\\"color: #6A737D\\">// 设计图宽度</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6F42C1\\">recalc</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> () {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">            </span><span style=\\"color: #D73A49\\">var</span><span style=\\"color: #24292E\\"> clientWidth </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> docEl.clientWidth;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">            </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> ( </span><span style=\\"color: #D73A49\\">!</span><span style=\\"color: #24292E\\">clientWidth ) </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">            </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> ( clientWidth </span><span style=\\"color: #D73A49\\">&gt;=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">640</span><span style=\\"color: #24292E\\"> ) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">                docEl.style.fontSize </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">200</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">*</span><span style=\\"color: #24292E\\"> ( </span><span style=\\"color: #005CC5\\">640</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">/</span><span style=\\"color: #24292E\\"> psdWidth ) </span><span style=\\"color: #D73A49\\">+</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;px&#39;</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">            } </span><span style=\\"color: #D73A49\\">else</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">                docEl.style.fontSize </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">200</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">*</span><span style=\\"color: #24292E\\"> ( clientWidth </span><span style=\\"color: #D73A49\\">/</span><span style=\\"color: #24292E\\"> psdWidth ) </span><span style=\\"color: #D73A49\\">+</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;px&#39;</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">            }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        };</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> ( </span><span style=\\"color: #D73A49\\">!</span><span style=\\"color: #24292E\\">doc.addEventListener ) </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 绑定事件的时候最好配合防抖函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    win.</span><span style=\\"color: #6F42C1\\">addEventListener</span><span style=\\"color: #24292E\\">( resizeEvt, </span><span style=\\"color: #6F42C1\\">debounce</span><span style=\\"color: #24292E\\">(recalc, </span><span style=\\"color: #005CC5\\">1000</span><span style=\\"color: #24292E\\">), </span><span style=\\"color: #005CC5\\">false</span><span style=\\"color: #24292E\\"> );</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    doc.</span><span style=\\"color: #6F42C1\\">addEventListener</span><span style=\\"color: #24292E\\">( </span><span style=\\"color: #032F62\\">&#39;DOMContentLoaded&#39;</span><span style=\\"color: #24292E\\">, recalc, </span><span style=\\"color: #005CC5\\">false</span><span style=\\"color: #24292E\\"> );</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">debounce</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">func</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #E36209\\">wait</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #D73A49\\">var</span><span style=\\"color: #24292E\\"> timeout;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> () {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">            </span><span style=\\"color: #D73A49\\">var</span><span style=\\"color: #24292E\\"> context </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">this</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">            </span><span style=\\"color: #D73A49\\">var</span><span style=\\"color: #24292E\\"> args </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">arguments</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">            </span><span style=\\"color: #6F42C1\\">clearTimeout</span><span style=\\"color: #24292E\\">(timeout)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">            timeout </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">setTimeout</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\">(){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">                func.</span><span style=\\"color: #6F42C1\\">apply</span><span style=\\"color: #24292E\\">(context, args)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">            }, wait);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">})(document, window);</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br><span class=\\"line-number\\">18</span><br><span class=\\"line-number\\">19</span><br><span class=\\"line-number\\">20</span><br><span class=\\"line-number\\">21</span><br><span class=\\"line-number\\">22</span><br><span class=\\"line-number\\">23</span><br><span class=\\"line-number\\">24</span><br><span class=\\"line-number\\">25</span><br><span class=\\"line-number\\">26</span><br><span class=\\"line-number\\">27</span><br><span class=\\"line-number\\">28</span><br><span class=\\"line-number\\">29</span><br><span class=\\"line-number\\">30</span><br><span class=\\"line-number\\">31</span><br></div></div><p>比如当视口是 375px 的时候，经过计算 html 的 font-size 会是 100px，这样有什么好处呢？好处就是方便写样式，比如从设计图量出来的 header 高度是 50px 的，那我们写样式的时候就可以直接写：</p>\\n<div class=\\"language-css vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #85E89D\\">header</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">height</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">0.5</span><span style=\\"color: #F97583\\">rem</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #22863A\\">header</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">height</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">0.5</span><span style=\\"color: #D73A49\\">rem</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br></div></div><p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9da25c2a6e4541e09bca75e131ecb68a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<p>每个从设计图量出来的尺寸只要除于 100 即可得到当前元素的 rem 值，都不用经过计算，非常方便。偷偷告诉你，如果你把上面那串计算 html 标签 font-size 的 JS 代码中的 200 替换成 2，那在计算 rem 的时候就不需要除于 100 了，从设计图量出多大 px，就直接写多少个 rem。</p>\\n<h4 id=\\"vw-vh\\" tabindex=\\"-1\\">vw/vh <a class=\\"header-anchor\\" href=\\"#vw-vh\\" aria-label=\\"Permalink to &quot;vw/vh&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>vw 和 vh 分别是相对于屏幕视口宽度和高度而言的长度单位：</p>\\n<ul>\\n<li>1vw = 视口宽度均分成 100 份中 1 份的长度；</li>\\n<li>1vh = 视口高度均分成 100 份中 1 份的长度；</li>\\n</ul>\\n<p>在 JS 中 100vw = window.innerWidth，100vh = window.innerHeight。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8448c193d3bf4fb5b396e884dfedb0fa~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<p>vw/vh 的出现使得多了一种写自适应布局的方案，开发者不再局限于 rem 了。</p>\\n<p>相对视口的单位，除了 vw/vh 外，还有 vmin 和 vmax：</p>\\n<ul>\\n<li>vmin：取 vw 和 vh 中值较小的；</li>\\n<li>vmax：取 vw 和 vh 中值较大的；</li>\\n</ul>\\n<h3 id=\\"颜色体系\\" tabindex=\\"-1\\">颜色体系 <a class=\\"header-anchor\\" href=\\"#颜色体系\\" aria-label=\\"Permalink to &quot;颜色体系&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>CSS 中用于表示颜色的值种类繁多，足够构成一个体系，所以这里就专门拿出一个小节来讲解它。</p>\\n<p>根据 <a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdrafts.csswg.org%2Fcss-color-3%2F\\" title=\\"https://drafts.csswg.org/css-color-3/\\" target=\\"_blank\\" rel=\\"noreferrer\\">CSS 颜色草案</a> 中提到的颜色值类型，大概可以把它们分为这几类：</p>\\n<ul>\\n<li>颜色关键字</li>\\n<li>transparent 关键字</li>\\n<li>currentColor 关键字</li>\\n<li>RGB 颜色</li>\\n<li>HSL 颜色</li>\\n</ul>\\n<h4 id=\\"颜色关键字\\" tabindex=\\"-1\\">颜色关键字 <a class=\\"header-anchor\\" href=\\"#颜色关键字\\" aria-label=\\"Permalink to &quot;颜色关键字&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>颜色关键字（color keywords）是不区分大小写的标识符，它表示一个具体的颜色，比如 white（白），黑（black）等；</p>\\n<p>可接受的关键字列表在CSS的演变过程中发生了改变：</p>\\n<ul>\\n<li>CSS 标准 1 只接受 16 个基本颜色，称为 VGA 颜色，因为它们来源于 VGA 显卡所显示的颜色集合而被称为 VGA colors （视频图形阵列色彩）。</li>\\n<li>CSS 标准 2 增加了 orange 关键字。</li>\\n<li>从一开始，浏览器接受其它的颜色，由于一些早期浏览器是 X11 应用程序，这些颜色大多数是 X11 命名的颜色列表，虽然有一点不同。SVG 1.0 是首个正式定义这些关键字的标准；CSS 色彩标准 3 也正式定义了这些关键字。它们经常被称作扩展的颜色关键字， X11 颜色或 SVG 颜色 。</li>\\n<li>CSS 颜色标准 4 添加可 rebeccapurple 关键字来纪念 web 先锋 Eric Meyer。</li>\\n</ul>\\n<p>如下这张图是 16 个基础色，又叫 VGA 颜色。截止到目前为止 CSS 颜色关键字总共有 146 个，这里可以查看 <a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fcodepen.io%2Fbulandent%2Fpen%2FgOLovwL\\" title=\\"https://codepen.io/bulandent/pen/gOLovwL\\" target=\\"_blank\\" rel=\\"noreferrer\\">完整的色彩关键字列表</a>。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09c95f2a03a24f0a929d338efad4b022~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"VGA 颜色\\"></p>\\n<p>需要注意的是如果声明的时候的颜色关键字是错误的，浏览器会忽略它。</p>\\n<h4 id=\\"transparent-关键字\\" tabindex=\\"-1\\">transparent 关键字 <a class=\\"header-anchor\\" href=\\"#transparent-关键字\\" aria-label=\\"Permalink to &quot;transparent 关键字&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>transparent 关键字表示一个完全透明的颜色，即该颜色看上去将是背景色。从技术上说，它是带有 alpha 通道为最小值的黑色，是 rgba(0,0,0,0) 的简写。</p>\\n<p>透明关键字有什么应用场景呢？</p>\\n<p><strong>实现三角形</strong></p>\\n<p>下面这个图是用 4 条边框填充的正方形，看懂了它你大概就知道该如何用 CSS 写三角形了。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e553ee7029424667b79e3339c3d4d145~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">div {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    border-top-color: #ffc107;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    border-right-color: #00bcd4;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    border-bottom-color: #e26b6b;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    border-left-color: #cc7cda;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    border-width: 50px;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    border-style: solid;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">div {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    border-top-color: #ffc107;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    border-right-color: #00bcd4;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    border-bottom-color: #e26b6b;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    border-left-color: #cc7cda;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    border-width: 50px;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    border-style: solid;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br></div></div><p>用 transparent 实现三角形的原理：</p>\\n<ul>\\n<li>首先宽高必须是 0px，通过边框的粗细来填充内容；</li>\\n<li>那条边需要就要加上颜色，而不需要的边则用 transparent；</li>\\n<li>想要什么样姿势的三角形，完全由上下左右 4 条边的中有颜色的边和透明的边的位置决定；</li>\\n<li>等腰三角形：设置一条边有颜色，然后紧挨着的 2 边是透明，且宽度是有颜色边的一半；直角三角形：设置一条边有颜色，然后紧挨着的任何一边透明即可。</li>\\n</ul>\\n<p>看下示例：</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b3c505a718540738f45ee741ecaa83f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<p><strong>增大点击区域</strong></p>\\n<p>常常在移动端的时候点击的按钮的区域特别小，但是由于现实效果又不太好把它做大，所以常用的一个手段就是通过透明的边框来增大按钮的点击区域：</p>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">.btn {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    border: 5px solid transparent;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">.btn {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    border: 5px solid transparent;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br></div></div><h4 id=\\"currentcolor-关键字\\" tabindex=\\"-1\\">currentColor 关键字 <a class=\\"header-anchor\\" href=\\"#currentcolor-关键字\\" aria-label=\\"Permalink to &quot;currentColor 关键字&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>currentColor 会取当前元素继承父级元素的文本颜色值或声明的文本颜色值，即 computed 后的 color 值。</p>\\n<p>比如，对于如下 CSS，该元素的边框颜色会是 red：</p>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">.btn {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    color: red;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    border: 1px solid currentColor;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">.btn {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    color: red;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    border: 1px solid currentColor;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br></div></div><h4 id=\\"rgb-a-颜色\\" tabindex=\\"-1\\">RGB[A] 颜色 <a class=\\"header-anchor\\" href=\\"#rgb-a-颜色\\" aria-label=\\"Permalink to &quot;RGB\\\\[A\\\\] 颜色&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>RGB[A] 颜色是由 R(red)-G(green)-B(blue)-A(alpha) 组成的色彩空间。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a4f592201b6042d4a0433647babbe62e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<p>在 CSS 中，它有两种表示形式：</p>\\n<ul>\\n<li>十六进制符号；</li>\\n<li>函数符；</li>\\n</ul>\\n<p><strong>十六进制符号</strong></p>\\n<p>RGB 中的每种颜色的值范围是 00~ff，值越大表示颜色越深。所以一个颜色正常是 6 个十六进制字符加上 # 组成，比如红色就是 #ff0000。</p>\\n<p>如果 RGB 颜色需要加上不透明度，那就需要加上 alpha 通道的值，它的范围也是 00~ff，比如一个带不透明度为 67% 的红色可以这样写 #ff0000aa。</p>\\n<p>使用十六进制符号表示颜色的时候，都是用 2 个十六进制表示一个颜色，如果这 2 个字符相同，还可以缩减成只写 1 个，比如，红色 #f00；带 67% 不透明度的红色 #f00a。</p>\\n<p><strong>函数符</strong></p>\\n<p>当 RGB 用函数表示的时候，每个值的范围是 0~255 或者 0%~100%，所以红色是 rgb(255, 0, 0)， 或者 rgb(100%, 0, 0)。</p>\\n<p>如果需要使用函数来表示带不透明度的颜色值，值的范围是 0~1 及其之间的小数或者 0%~100%，比如带 67% 不透明度的红色是 rgba(255, 0, 0, 0.67) 或者 rgba(100%, 0%, 0%, 67%)</p>\\n<blockquote>\\n<p>需要注意的是 RGB 这 3 个颜色值需要保持一致的写法，要嘛用数字要嘛用百分比，而不透明度的值的可以不用和 RGB 保持一致写法。比如 rgb(100%, 0, 0) 这个写法是无效的；而 rgb(100%, 0%, 0%, 0.67) 是有效的。</p>\\n</blockquote>\\n<p>在第 4 代 CSS 颜色标准中，新增了一种新的函数写法，即可以把 RGB 中值的分隔逗号改成空格，而把 RGB 和 alpha 中的逗号改成 /，比如带 67% 不透明度的红色可以这样写 rgba(255 0 0 / 0.67)。另外还把 rgba 的写法合并到 rgb 函数中了，即 rgb 可以直接写带不透明度的颜色。</p>\\n<h4 id=\\"hsl-a-颜色\\" tabindex=\\"-1\\">HSL[A] 颜色 <a class=\\"header-anchor\\" href=\\"#hsl-a-颜色\\" aria-label=\\"Permalink to &quot;HSL\\\\[A\\\\] 颜色&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>HSL[A] 颜色是由色相(hue)-饱和度(saturation)-亮度(lightness)-不透明度组成的颜色体系。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a416a969aacf40aeb6068ff550623555~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<ul>\\n<li>色相（H）是色彩的基本属性，值范围是 0~360 或者 0deg~360deg， 0 (或 360) 为红色, 120 为绿色, 240 为蓝色；</li>\\n<li>饱和度（S）是指色彩的纯度，越高色彩越纯，低则逐渐变灰，取 0~100% 的数值；0% 为灰色， 100% 全色；</li>\\n<li>亮度（L），取 0~100%，0% 为暗，100% 为白；</li>\\n<li>不透明度（A），取 0~100%，或者0~1及之间的小数；</li>\\n</ul>\\n<p>写法上可以参考 RGB 的写法，只是参数的值不一样。</p>\\n<p>给一个按钮设置不透明度为 67% 的红色的 color 的写法，以下全部写法效果一致：</p>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">button {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    color: #ff0000aa;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    color: #f00a;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    color: rgba(255, 0, 0, 0.67);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    color: rgb(100% 0% 0% / 67%);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    color: hsla(0, 100%, 50%, 67%);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    color: hsl(0deg 100% 50% / 67%);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">button {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    color: #ff0000aa;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    color: #f00a;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    color: rgba(255, 0, 0, 0.67);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    color: rgb(100% 0% 0% / 67%);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    color: hsla(0, 100%, 50%, 67%);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    color: hsl(0deg 100% 50% / 67%);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br></div></div><p>小提示：在 Chrome DevTools 中可以按住 shift + 鼠标左键可以切换颜色的表示方式。</p>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/857e1bd912a44095ae826c7d276ae8c4~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<h3 id=\\"媒体查询\\" tabindex=\\"-1\\">媒体查询 <a class=\\"header-anchor\\" href=\\"#媒体查询\\" aria-label=\\"Permalink to &quot;媒体查询&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>媒体查询是指针对不同的设备、特定的设备特征或者参数进行定制化的修改网站的样式。</p>\\n<p>你可以通过给 <code>&lt;link&gt;</code> 加上 media 属性来指定该样式文件只能对什么设备生效，不指定的话默认是 all，即对所有设备都生效：</p>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">&lt;link rel=&quot;stylesheet&quot; src=&quot;styles.css&quot; media=&quot;screen&quot; /&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">&lt;link rel=&quot;stylesheet&quot; src=&quot;styles.css&quot; media=&quot;print&quot; /&gt;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">&lt;link rel=&quot;stylesheet&quot; src=&quot;styles.css&quot; media=&quot;screen&quot; /&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">&lt;link rel=&quot;stylesheet&quot; src=&quot;styles.css&quot; media=&quot;print&quot; /&gt;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br></div></div><p>都支持哪些设备类型？</p>\\n<ul>\\n<li>all：适用于所有设备；</li>\\n<li>print：适用于在打印预览模式下在屏幕上查看的分页材料和文档；</li>\\n<li>screen：主要用于屏幕；</li>\\n<li>speech：主要用于语音合成器。</li>\\n</ul>\\n<blockquote>\\n<p>需要注意的是：通过 media 指定的 资源尽管不匹配它的设备类型，但是浏览器依然会加载它。</p>\\n</blockquote>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7036319ab7014a98bf6967c76244e8bc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"图片\\"></p>\\n<p>除了通过 <code>&lt;link&gt;</code> 让指定设备生效外，还可以通过 <code>@media</code> 让 CSS 规则在特定的条件下才能生效。响应式页面就是使用了 @media 才让一个页面能够同时适配 PC、Pad 和手机端。</p>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">@media (min-width: 1000px) {}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">@media (min-width: 1000px) {}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><p>媒体查询支持逻辑操作符：</p>\\n<ul>\\n<li>and：查询条件都满足的时候才生效；</li>\\n<li>not：查询条件取反；</li>\\n<li>only：整个查询匹配的时候才生效，常用语兼容旧浏览器，使用时候必须指定媒体类型；</li>\\n<li>逗号或者 or：查询条件满足一项即可匹配；</li>\\n</ul>\\n<p>媒体查询还支持<a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FGuide%2FCSS%2FMedia_queries%23%25E5%25AA%2592%25E4%25BD%2593%25E7%2589%25B9%25E6%2580%25A7\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries#%E5%AA%92%E4%BD%93%E7%89%B9%E6%80%A7\\" target=\\"_blank\\" rel=\\"noreferrer\\">众多的媒体特性</a>，使得它可以写出很复杂的查询条件：</p>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">/* 用户设备的最小高度为680px或为纵向模式的屏幕设备 */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">@media (min-height: 680px), screen and (orientation: portrait) {}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">/* 用户设备的最小高度为680px或为纵向模式的屏幕设备 */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">@media (min-height: 680px), screen and (orientation: portrait) {}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br></div></div><p>常见需求</p>\\n","tags":["css","面试题"],"userName":"大湿兄"},{"link":"article/docker概念","excerpt":"<h1 id=\\"docker-概念\\" tabindex=\\"-1\\">docker 概念 <a class=\\"header-anchor\\" href=\\"#docker-概念\\" aria-label=\\"Permalink to &quot;docker 概念&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>富 <code>Web</code> 时代，应用变得越来越强大，与此同时也越来越复杂。集群部署、隔离环境、灰度发布以及动态扩容缺一不可，而容器化则成为中间的必要桥梁。<br>\\n<a href=\\"http://jartto.wang/2020/07/04/learn-docker/\\" target=\\"_blank\\" rel=\\"noreferrer\\"></a><br>\\n本节我们就来探索一下 <code>Docker</code> 的神秘世界，从零到一掌握 <code>Docker</code> 的基本原理与实践操作。别再守着前端那一亩三分地，是时候该开疆扩土了。</p>\\n<p>我们将会围绕下面几点展开：<br>\\n1.讲个故事<br>\\n2.虚拟机与容器<br>\\n3.认识 <code>Docker</code><br>\\n4.核心概念<br>\\n5.安装 <code>Docker</code><br>\\n6.快速开始<br>\\n7.常规操作<br>\\n8.最佳实践</p>\\n<h4 id=\\"一、讲个故事\\" tabindex=\\"-1\\"><a href=\\"about:blank#%E4%B8%80%E3%80%81%E8%AE%B2%E4%B8%AA%E6%95%85%E4%BA%8B\\" title=\\"一、讲个故事\\" target=\\"_blank\\" rel=\\"noreferrer\\"></a>一、讲个故事 <a class=\\"header-anchor\\" href=\\"#一、讲个故事\\" aria-label=\\"Permalink to &quot;[](about:blank#%E4%B8%80%E3%80%81%E8%AE%B2%E4%B8%AA%E6%95%85%E4%BA%8B &quot;一、讲个故事&quot;)一、讲个故事&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>为了更好的理解 <code>Docker</code> 是什么，我们先来讲个<a href=\\"https://my.oschina.net/jamesview/blog/2994112\\" target=\\"_blank\\" rel=\\"noreferrer\\">故事</a>：</p>\\n<p>我需要盖一个房子，于是我搬石头、砍木头、画图纸、盖房子。一顿操作，终于把这个房子盖好了。<br>\\n<img src=\\"https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/docker/store1.png\\" alt=\\"盖房子\\"></p>\\n<p>结果，住了一段时间，心血来潮想搬到海边去。这时候按以往的办法，我只能去海边，再次搬石头、砍木头、画图纸、盖房子。<br>\\n<img src=\\"https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/docker/store2.png\\" alt=\\"重复盖房\\"></p>\\n<p>烦恼之际，跑来一个魔法师教会我一种魔法。这种魔法可以把我盖好的房子复制一份，做成「镜像」，放在我的背包里。</p>\\n<p><img src=\\"https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/docker/store3.png\\" alt=\\"黑魔法\\"></p>\\n<p>等我到了海边，就用这个「镜像」，复制一套房子，拎包入住。</p>\\n<p>是不是很神奇？对应到我们的项目中来，房子就是项目本身，镜像就是项目的复制，背包就是镜像仓库。如果要动态扩容，从仓库中取出项目镜像，随便复制就可以了。Build once，Run anywhere!</p>\\n<p>不用再关注版本、兼容、部署等问题，彻底解决了「上线即崩，无休止构建」的尴尬。</p>\\n<h4 id=\\"二、虚拟机与容器\\" tabindex=\\"-1\\"><a href=\\"about:blank#%E4%BA%8C%E3%80%81%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8E%E5%AE%B9%E5%99%A8\\" title=\\"二、虚拟机与容器\\" target=\\"_blank\\" rel=\\"noreferrer\\"></a>二、虚拟机与容器 <a class=\\"header-anchor\\" href=\\"#二、虚拟机与容器\\" aria-label=\\"Permalink to &quot;[](about:blank#%E4%BA%8C%E3%80%81%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8E%E5%AE%B9%E5%99%A8 &quot;二、虚拟机与容器&quot;)二、虚拟机与容器&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>开始之前，我们来做一些基础知识的储备：</p>\\n<p>1.<strong>虚拟机</strong>：虚拟化硬件<br>\\n虚拟机 <code>Virtual Machine</code> 指通过软件模拟的<strong>具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统</strong>。在实体计算机中能够完成的工作在虚拟机中都能够实现。</p>\\n<p>在计算机中创建虚拟机时，需要将实体机的部分硬盘和内存容量作为虚拟机的硬盘和内存容量。<strong>每个虚拟机都有独立的 <code>CMOS</code>、硬盘和操作系统，可以像使用实体机一样对虚拟机进行操作</strong>。在容器技术之前，业界的网红是虚拟机。</p>\\n<p>虚拟机技术的代表，是 <code>VMWare</code> 和 <code>OpenStack</code>。更多请参看<a href=\\"https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E6%9C%BA/104440?fr=aladdin\\" target=\\"_blank\\" rel=\\"noreferrer\\">百科虚拟机</a>。</p>\\n<p>2.<strong>容器</strong>：将操作系统层虚拟化，是一个标准的软件单元</p>\\n<ul>\\n<li>随处运行：容器可以将代码与配置文件和相关依赖库进行打包，从而确保在任何环境下的运行都是一致的。</li>\\n<li>高资源利用率：容器提供进程级的隔离，因此可以更加精细地设置 <code>CPU</code> 和内存的使用率，进而更好地利用服务器的计算资源。</li>\\n<li>快速扩展：每个容器都可作为单独的进程予以运行，并且可以共享底层操作系统的系统资源，这样一来可以加快容器的启动和停止效率。</li>\\n</ul>\\n<p>3.<strong>区别与联系</strong></p>\\n<ul>\\n<li>虚拟机虽然可以隔离出很多「子电脑」，但占用空间更大，启动更慢。虚拟机软件可能还要花钱，例如<code>VMWare</code>；</li>\\n<li>容器技术不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境，类似「沙箱」；</li>\\n<li>运行空间，虚拟机一般要几 <code>GB</code> 到 几十 <code>GB</code> 的空间，而容器只需要 <code>MB</code> 级甚至 <code>KB</code> 级；</li>\\n</ul>\\n<p>我们来看一下对比数据：</p>\\n<p>| 特性 | 虚拟机 | 容器 |\\n|</p>\\n","tags":["docker"],"userName":"大湿兄"},{"link":"article/docker起步","excerpt":"","tags":["docker"],"userName":"大湿兄"},{"link":"article/git基本操作","excerpt":"","tags":["git"],"userName":"大湿兄"},{"link":"article/git工作区&暂存区的操作命令","excerpt":"","tags":["git"],"userName":"大湿兄"},{"link":"article/git常用命令","excerpt":"","tags":["git"],"userName":"大湿兄"},{"link":"article/储藏stash","excerpt":"","tags":["git"],"userName":"大湿兄"},{"link":"article/13个很酷但很少有人知道的HTML元素","excerpt":"<h1 id=\\"_13个很酷但很少有人知道的html元素\\" tabindex=\\"-1\\">13个很酷但很少有人知道的HTML元素 <a class=\\"header-anchor\\" href=\\"#_13个很酷但很少有人知道的html元素\\" aria-label=\\"Permalink to &quot;13个很酷但很少有人知道的HTML元素&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>1. <code>meter</code> &amp; <code>progress</code></p>\\n","tags":["html","面试题"],"userName":"大湿兄"},{"link":"article/DOCTYPE","excerpt":"<h1 id=\\"doctype\\" tabindex=\\"-1\\">DOCTYPE <a class=\\"header-anchor\\" href=\\"#doctype\\" aria-label=\\"Permalink to &quot;DOCTYPE&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>1.DOCTYPE 是什么</p>\\n","tags":["html","面试题"],"userName":"大湿兄"},{"link":"article/HTML基础","excerpt":"<h1 id=\\"html简介\\" tabindex=\\"-1\\">HTML简介 <a class=\\"header-anchor\\" href=\\"#html简介\\" aria-label=\\"Permalink to &quot;HTML简介&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p><strong>1. 什么是HTML？</strong></p>\\n<ul>\\n<li>超文本标记语言（Hyper Text Markup Language），是用来描述网页的一种语言。</li>\\n<li>是一种标记语言，不是编程语言。</li>\\n<li>标记语言是一套标记标签。</li>\\n</ul>\\n<p><strong>2.Web标准</strong></p>\\n<ul>\\n<li>Web标准不是某一个标准，而是由W3C（万维网联盟，国际最著名的标准化组织）和其他标准化组织制定的一系列的集合。主要包括结构（Structure）、表现（Presentation）、行为（Behave）三个方面。</li>\\n</ul>\\n<p><strong>3. 为什么需要Web标准?</strong></p>\\n<ul>\\n<li>浏览器不同，他们显示的页面或者排版就有差异，需要web标准来限制</li>\\n<li>开发人员按照 Web 标准制作网页，他们可以很容易了解彼此的编码。</li>\\n<li>遵守标准的Web页面可以使得搜索引擎更容易访问并收入网页，也可以更容易转换为其他格式，并更易于访问程序代码（如JavaScript和DOM）</li>\\n</ul>\\n<p><strong>4. Web标准的三大组成部分</strong></p>\\n<ul>\\n<li>结构用于对网页元素的整理和分类，主要包括xml和html两部分。（比如一只没毛的鸟）结构最重要。</li>\\n<li>表现用于设置网页元素的板式、颜色、大小等外观样式，主要指CSS。（比如一只有毛的鸟）</li>\\n<li>行为是指网页模型的定义及交互的编写 js。（比如一只会飞的鸟）</li>\\n</ul>\\n<p>HTML语法规范</p>\\n","tags":["html","面试题"],"userName":"大湿兄"},{"link":"article/meta标签","excerpt":"<h1 id=\\"作为前端-你必须要知道的meta标签知识\\" tabindex=\\"-1\\">作为前端，你必须要知道的meta标签知识 <a class=\\"header-anchor\\" href=\\"#作为前端-你必须要知道的meta标签知识\\" aria-label=\\"Permalink to &quot;作为前端，你必须要知道的meta标签知识&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><h2 id=\\"概览\\" tabindex=\\"-1\\">概览 <a class=\\"header-anchor\\" href=\\"#概览\\" aria-label=\\"Permalink to &quot;概览&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>meta标签一般放在整个<code>html</code>页面的<code>head</code>部分，在<code>MDN</code>中对他这样定义：</p>\\n<blockquote>\\n<p>meta是<strong>文档级元数据元素</strong>，用来表示那些不能由其它 HTML 元相关元素（<code>&lt;base&gt;</code>、<code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>或 <code>&lt;title&gt;</code>）之一表示的任何元数据。</p>\\n</blockquote>\\n<p>是不是感觉看起来很抽象？说白了就是为了传达信息。</p>\\n<p>先看看<code>meta</code> 元素定义的元数据的类型：</p>\\n<ul>\\n<li>如果设置了 <code>name</code>属性，<code>meta</code> 元素提供的是文档级别的元数据，应用于整个页面。</li>\\n<li>如果设置了 <code>http-equiv</code>属性，<code>meta</code> 元素则是编译指令，提供的信息与类似命名的 HTTP 头部相同。</li>\\n<li>如果设置了 <code>charset</code>属性，<code>meta</code> 元素是一个字符集声明，告诉文档使用哪种字符编码。</li>\\n<li>如果设置了 <code>itemprop</code> 属性，<code>meta</code> 元素提供用户定义的元数据。</li>\\n</ul>\\n<p>name属性</p>\\n","tags":["html","面试题"],"userName":"大湿兄"},{"link":"article/JSON stringify特性","excerpt":"<h1 id=\\"json-stringify-特性\\" tabindex=\\"-1\\">JSON stringify 特性 <a class=\\"header-anchor\\" href=\\"#json-stringify-特性\\" aria-label=\\"Permalink to &quot;JSON stringify 特性&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><h2 id=\\"json-stringify\\" tabindex=\\"-1\\">JSON.stringify() <a class=\\"header-anchor\\" href=\\"#json-stringify\\" aria-label=\\"Permalink to &quot;JSON.stringify()&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"json-stringify-第一大特性总结\\" tabindex=\\"-1\\">JSON.stringify() 第一大特性总结 <a class=\\"header-anchor\\" href=\\"#json-stringify-第一大特性总结\\" aria-label=\\"Permalink to &quot;JSON.stringify() 第一大特性总结&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>undefined、任意的函数以及 symbol 作为对象属性值时 JSON.stringify() 对跳过（忽略）它们进行序列化</li>\\n<li>undefined、任意的函数以及 symbol 作为数组元素值时，JSON.stringify() 将会将它们序列化为 null</li>\\n<li>undefined、任意的函数以及 symbol 被 JSON.stringify() 作为单独的值进行序列化时，都会返回 undefined</li>\\n</ul>\\n<h3 id=\\"json-stringify-第二大特性\\" tabindex=\\"-1\\">JSON.stringify() 第二大特性 <a class=\\"header-anchor\\" href=\\"#json-stringify-第二大特性\\" aria-label=\\"Permalink to &quot;JSON.stringify() 第二大特性&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。</li>\\n</ul>\\n<div class=\\"language-javascript vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">javascript</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">data</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  a: </span><span style=\\"color: #9ECBFF\\">&quot;aaa&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  b: </span><span style=\\"color: #79B8FF\\">undefined</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  c: </span><span style=\\"color: #B392F0\\">Symbol</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&quot;dd&quot;</span><span style=\\"color: #E1E4E8\\">),</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">fn</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  d: </span><span style=\\"color: #9ECBFF\\">&quot;ddd&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #79B8FF\\">JSON</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">stringify</span><span style=\\"color: #E1E4E8\\">(data); </span><span style=\\"color: #6A737D\\">// 输出：？</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;{&quot;a&quot;:&quot;aaa&quot;,&quot;d&quot;:&quot;ddd&quot;}&quot;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #79B8FF\\">JSON</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">stringify</span><span style=\\"color: #E1E4E8\\">([</span><span style=\\"color: #9ECBFF\\">&quot;aaa&quot;</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #79B8FF\\">undefined</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">aa</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }, </span><span style=\\"color: #B392F0\\">Symbol</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;dd&#39;</span><span style=\\"color: #E1E4E8\\">),</span><span style=\\"color: #9ECBFF\\">&quot;eee&quot;</span><span style=\\"color: #E1E4E8\\">])  </span><span style=\\"color: #6A737D\\">// 输出：？</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;[&quot;aaa&quot;,null,null,null,&quot;eee&quot;]&quot;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">data</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  a: </span><span style=\\"color: #032F62\\">&quot;aaa&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  b: </span><span style=\\"color: #005CC5\\">undefined</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  c: </span><span style=\\"color: #6F42C1\\">Symbol</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&quot;dd&quot;</span><span style=\\"color: #24292E\\">),</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">fn</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  d: </span><span style=\\"color: #032F62\\">&quot;ddd&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #005CC5\\">JSON</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">stringify</span><span style=\\"color: #24292E\\">(data); </span><span style=\\"color: #6A737D\\">// 输出：？</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;{&quot;a&quot;:&quot;aaa&quot;,&quot;d&quot;:&quot;ddd&quot;}&quot;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #005CC5\\">JSON</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">stringify</span><span style=\\"color: #24292E\\">([</span><span style=\\"color: #032F62\\">&quot;aaa&quot;</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #005CC5\\">undefined</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">aa</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }, </span><span style=\\"color: #6F42C1\\">Symbol</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;dd&#39;</span><span style=\\"color: #24292E\\">),</span><span style=\\"color: #032F62\\">&quot;eee&quot;</span><span style=\\"color: #24292E\\">])  </span><span style=\\"color: #6A737D\\">// 输出：？</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;[&quot;aaa&quot;,null,null,null,&quot;eee&quot;]&quot;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br></div></div><h3 id=\\"json-stringify-第三大特性\\" tabindex=\\"-1\\">JSON.stringify() 第三大特性 <a class=\\"header-anchor\\" href=\\"#json-stringify-第三大特性\\" aria-label=\\"Permalink to &quot;JSON.stringify() 第三大特性&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>转换值如果有 toJSON() 函数，该函数返回什么值，序列化结果就是什么值，并且忽略其他属性的值。</li>\\n</ul>\\n<div class=\\"language-javascript vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">javascript</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #79B8FF\\">JSON</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">stringify</span><span style=\\"color: #E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    say: </span><span style=\\"color: #9ECBFF\\">&quot;hello JSON.stringify&quot;</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #B392F0\\">toJSON</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&quot;today i learn&quot;</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;today i learn&quot;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #005CC5\\">JSON</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">stringify</span><span style=\\"color: #24292E\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    say: </span><span style=\\"color: #032F62\\">&quot;hello JSON.stringify&quot;</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6F42C1\\">toJSON</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&quot;today i learn&quot;</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;today i learn&quot;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br></div></div><h3 id=\\"json-stringify-第四大特性\\" tabindex=\\"-1\\">JSON.stringify()第四大特性 <a class=\\"header-anchor\\" href=\\"#json-stringify-第四大特性\\" aria-label=\\"Permalink to &quot;JSON.stringify()第四大特性&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ul>\\n<li>JSON.stringify() 将会正常序列化 Date 的值。</li>\\n</ul>\\n<div class=\\"language-javascript vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">javascript</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #79B8FF\\">JSON</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">stringify</span><span style=\\"color: #E1E4E8\\">({ now: </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Date</span><span style=\\"color: #E1E4E8\\">() });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;{&quot;now&quot;:&quot;2019-12-08T07:42:11.973Z&quot;}&quot;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #005CC5\\">JSON</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">stringify</span><span style=\\"color: #24292E\\">({ now: </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Date</span><span style=\\"color: #24292E\\">() });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;{&quot;now&quot;:&quot;2019-12-08T07:42:11.973Z&quot;}&quot;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br></div></div><h3 id=\\"json-stringify-第五大特性\\" tabindex=\\"-1\\">JSON.stringify() 第五大特性 <a class=\\"header-anchor\\" href=\\"#json-stringify-第五大特性\\" aria-label=\\"Permalink to &quot;JSON.stringify() 第五大特性&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>NaN 和 Infinity 格式的数值及 null 都会被当做 null。</p>\\n<div class=\\"language-javascript vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">javascript</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #79B8FF\\">JSON</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">stringify</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">NaN</span><span style=\\"color: #E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;null&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #79B8FF\\">JSON</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">stringify</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;null&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #79B8FF\\">JSON</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">stringify</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">Infinity</span><span style=\\"color: #E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;null&quot;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #005CC5\\">JSON</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">stringify</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">NaN</span><span style=\\"color: #24292E\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;null&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #005CC5\\">JSON</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">stringify</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;null&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #005CC5\\">JSON</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">stringify</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">Infinity</span><span style=\\"color: #24292E\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;null&quot;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br></div></div><h3 id=\\"json-stringify-第六大特性\\" tabindex=\\"-1\\">JSON.stringify() 第六大特性 <a class=\\"header-anchor\\" href=\\"#json-stringify-第六大特性\\" aria-label=\\"Permalink to &quot;JSON.stringify() 第六大特性&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>关于基本类型的序列化：</p>\\n<ul>\\n<li>布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。</li>\\n</ul>\\n<div class=\\"language-javascript vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">javascript</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #79B8FF\\">JSON</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">stringify</span><span style=\\"color: #E1E4E8\\">([</span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Number</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">1</span><span style=\\"color: #E1E4E8\\">), </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">String</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&quot;false&quot;</span><span style=\\"color: #E1E4E8\\">), </span><span style=\\"color: #F97583\\">new</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">Boolean</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">false</span><span style=\\"color: #E1E4E8\\">)]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;[1,&quot;false&quot;,false]&quot;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #005CC5\\">JSON</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">stringify</span><span style=\\"color: #24292E\\">([</span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Number</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">1</span><span style=\\"color: #24292E\\">), </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">String</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&quot;false&quot;</span><span style=\\"color: #24292E\\">), </span><span style=\\"color: #D73A49\\">new</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">Boolean</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">false</span><span style=\\"color: #24292E\\">)]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;[1,&quot;false&quot;,false]&quot;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br></div></div><h3 id=\\"json-stringify-第七大特性\\" tabindex=\\"-1\\">JSON.stringify() 第七大特性 <a class=\\"header-anchor\\" href=\\"#json-stringify-第七大特性\\" aria-label=\\"Permalink to &quot;JSON.stringify() 第七大特性&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>关于对象属性的是否可枚举：</p>\\n<ul>\\n<li>其他类型的对象，包括 Map/Set/WeakMap/WeakSet，仅会序列化可枚举的属性。</li>\\n</ul>\\n<div class=\\"language-javascript vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">javascript</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// 不可枚举的属性默认会被忽略：</span></span>\\n<span class=\\"line\\"><span style=\\"color: #79B8FF\\">JSON</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">stringify</span><span style=\\"color: #E1E4E8\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    Object.</span><span style=\\"color: #B392F0\\">create</span><span style=\\"color: #E1E4E8\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #79B8FF\\">null</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">            x: { value: </span><span style=\\"color: #9ECBFF\\">&#39;json&#39;</span><span style=\\"color: #E1E4E8\\">, enumerable: </span><span style=\\"color: #79B8FF\\">false</span><span style=\\"color: #E1E4E8\\"> },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">            y: { value: </span><span style=\\"color: #9ECBFF\\">&#39;stringify&#39;</span><span style=\\"color: #E1E4E8\\">, enumerable: </span><span style=\\"color: #79B8FF\\">true</span><span style=\\"color: #E1E4E8\\"> }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    )</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;{&quot;y&quot;:&quot;stringify&quot;}&quot;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// 不可枚举的属性默认会被忽略：</span></span>\\n<span class=\\"line\\"><span style=\\"color: #005CC5\\">JSON</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">stringify</span><span style=\\"color: #24292E\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    Object.</span><span style=\\"color: #6F42C1\\">create</span><span style=\\"color: #24292E\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #005CC5\\">null</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">            x: { value: </span><span style=\\"color: #032F62\\">&#39;json&#39;</span><span style=\\"color: #24292E\\">, enumerable: </span><span style=\\"color: #005CC5\\">false</span><span style=\\"color: #24292E\\"> },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">            y: { value: </span><span style=\\"color: #032F62\\">&#39;stringify&#39;</span><span style=\\"color: #24292E\\">, enumerable: </span><span style=\\"color: #005CC5\\">true</span><span style=\\"color: #24292E\\"> }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    )</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// &quot;{&quot;y&quot;:&quot;stringify&quot;}&quot;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br></div></div><h3 id=\\"json-stringify-第八大特性\\" tabindex=\\"-1\\">JSON.stringify() 第八大特性 <a class=\\"header-anchor\\" href=\\"#json-stringify-第八大特性\\" aria-label=\\"Permalink to &quot;JSON.stringify() 第八大特性&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>我们都知道实现深拷贝最简单粗暴的方式就是序列化：JSON.parse(JSON.stringify())，这个方式实现深拷贝会因为序列化的诸多特性从而导致诸多的坑点：比如现在我们要说的循环引用问题。</p>\\n<div class=\\"language-javascript vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">javascript</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// 对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">obj</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  name: </span><span style=\\"color: #9ECBFF\\">&quot;loopObj&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">loopObj</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  obj</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 对象之间形成循环引用，形成闭环</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">obj.loopObj </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> loopObj;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 封装一个深拷贝的函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">deepClone</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">obj</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">JSON</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">parse</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">JSON</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">stringify</span><span style=\\"color: #E1E4E8\\">(obj));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 执行深拷贝，抛出错误</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">deepClone</span><span style=\\"color: #E1E4E8\\">(obj)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"> VM44:9 Uncaught TypeError: Converting circular structure to JSON</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">    --&gt; starting at object with constructor &#39;Object&#39;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">    |     property &#39;loopObj&#39; -&gt; object with constructor &#39;Object&#39;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// 对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">obj</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  name: </span><span style=\\"color: #032F62\\">&quot;loopObj&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">loopObj</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  obj</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 对象之间形成循环引用，形成闭环</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">obj.loopObj </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> loopObj;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 封装一个深拷贝的函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">deepClone</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">obj</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">JSON</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">parse</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">JSON</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">stringify</span><span style=\\"color: #24292E\\">(obj));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">// 执行深拷贝，抛出错误</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">deepClone</span><span style=\\"color: #24292E\\">(obj)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\"> VM44:9 Uncaught TypeError: Converting circular structure to JSON</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">    --&gt; starting at object with constructor &#39;Object&#39;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">    |     property &#39;loopObj&#39; -&gt; object with constructor &#39;Object&#39;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br><span class=\\"line-number\\">18</span><br><span class=\\"line-number\\">19</span><br><span class=\\"line-number\\">20</span><br></div></div>","tags":["js"],"userName":"大湿兄"},{"link":"article/JS中的计时器能做到精确计时吗？为什么？","excerpt":"","tags":["js","面试题"],"userName":"大湿兄"},{"link":"article/JS异步","excerpt":"","tags":["js","面试题"],"userName":"大湿兄"},{"link":"article/URL转码和解码","excerpt":"","tags":["js"],"userName":"大湿兄"},{"link":"article/for-in vs for-of","excerpt":"","tags":["js"],"userName":"大湿兄"},{"link":"article/九种跨域方式实现原理","excerpt":"<h1 id=\\"九种跨域方式实现原理\\" tabindex=\\"-1\\">九种跨域方式实现原理 <a class=\\"header-anchor\\" href=\\"#九种跨域方式实现原理\\" aria-label=\\"Permalink to &quot;九种跨域方式实现原理&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><h2 id=\\"一、什么是跨域\\" tabindex=\\"-1\\">一、什么是跨域？ <a class=\\"header-anchor\\" href=\\"#一、什么是跨域\\" aria-label=\\"Permalink to &quot;一、什么是跨域？&quot;\\">&ZeroWidthSpace;</a></h2>\\n","tags":["js","面试题"],"userName":"大湿兄"},{"link":"article/事件循环","excerpt":"","tags":["js","面试题"],"userName":"大湿兄"},{"link":"article/常用的js函数","excerpt":"","tags":["js"],"userName":"大湿兄"},{"link":"article/手写Promise","excerpt":"","tags":["js"],"userName":"大湿兄"},{"link":"article/浅拷贝与深拷贝","excerpt":"<h1 id=\\"浅拷贝与深拷贝\\" tabindex=\\"-1\\">浅拷贝与深拷贝 <a class=\\"header-anchor\\" href=\\"#浅拷贝与深拷贝\\" aria-label=\\"Permalink to &quot;浅拷贝与深拷贝&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>浅拷贝与深拷贝</p>\\n","tags":["js","面试题"],"userName":"大湿兄"},{"link":"article/跨页面通信","excerpt":"","tags":["js"],"userName":"大湿兄"},{"link":"article/nginx代理","excerpt":"","tags":["nginx"],"userName":"大湿兄"},{"link":"article/基础知识","excerpt":"","tags":["nginx"],"userName":"大湿兄"},{"link":"article/require加载器实现原理","excerpt":"<h1 id=\\"require加载器实现原理\\" tabindex=\\"-1\\">require加载器实现原理 <a class=\\"header-anchor\\" href=\\"#require加载器实现原理\\" aria-label=\\"Permalink to &quot;require加载器实现原理&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>1. 概述</p>\\n","tags":["js","面试题"],"userName":"大湿兄"},{"link":"article/前端需要了解的nodejs","excerpt":"","tags":["工程化","Node"],"userName":"大湿兄"},{"link":"article/npm link创建软链","excerpt":"","tags":["npm"],"userName":"大湿兄"},{"link":"article/npm常用操作","excerpt":"","tags":["npm"],"userName":"大湿兄"},{"link":"article/react hooks","excerpt":"<h1 id=\\"hooks\\" tabindex=\\"-1\\">hooks <a class=\\"header-anchor\\" href=\\"#hooks\\" aria-label=\\"Permalink to &quot;hooks&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p><img src=\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddea1c732cfb425da5bedbb2dc1295fe~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"深入 Hooks.png\\"></p>\\n<h2 id=\\"自定义hooks是什么\\" tabindex=\\"-1\\">自定义Hooks是什么？ <a class=\\"header-anchor\\" href=\\"#自定义hooks是什么\\" aria-label=\\"Permalink to &quot;自定义Hooks是什么？&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p><code>react-hooks</code>是<code>React16.8</code>以后新增的钩子API，目的是增加代码的可复用性、逻辑性，最主要的是解决了<strong>函数式组件无状态的问题</strong>，这样既保留了函数式的简单，又解决了没有数据管理状态的缺陷</p>\\n<p>那么什么是自定义hooks呢？</p>\\n<p><code>自定义hooks</code>是在<code>react-hooks</code>基础上的一个扩展，可以根据业务、需求去制定相应的<code>hooks</code>,将常用的逻辑进行封装，从而具备复用性</p>\\n<p>如何设计一个自定义Hooks</p>\\n","tags":["React","面试题"],"userName":"大湿兄"},{"link":"article/react常见面试题","excerpt":"<h1 id=\\"react的setstate是异步的还是同步的\\" tabindex=\\"-1\\">React的setState是异步的还是同步的 <a class=\\"header-anchor\\" href=\\"#react的setstate是异步的还是同步的\\" aria-label=\\"Permalink to &quot;React的setState是异步的还是同步的&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>开发中当组件中的状态发生了变化，页面并不会重新渲染。我们必须要通过setState来告知React数据已经发生了变化，重新渲染页面。</p>\\n<p>setState异步更新</p>\\n","tags":["React","面试题"],"userName":"大湿兄"},{"link":"article/interface 和 type 的区别","excerpt":"","tags":["ts"],"userName":"大湿兄"},{"link":"article/tsconfig配置","excerpt":"","tags":["ts"],"userName":"大湿兄"},{"link":"article/type of 和 key of 的区别","excerpt":"","tags":["ts"],"userName":"大湿兄"},{"link":"article/typescript面试题集合","excerpt":"","tags":["ts"],"userName":"大湿兄"},{"link":"article/unknown 和  any 的区别","excerpt":"","tags":["ts"],"userName":"大湿兄"},{"link":"article/void  和 never  类型的 区别","excerpt":"","tags":["ts"],"userName":"大湿兄"},{"link":"article/说说你对 TypeScript 的理解？与 JavaScript 的区别？","excerpt":"","tags":["ts"],"userName":"大湿兄"},{"link":"article/Vue3中操作dom的四种方式","excerpt":"<h1 id=\\"vue3中操作dom的四种方式\\" tabindex=\\"-1\\">Vue3中操作dom的四种方式 <a class=\\"header-anchor\\" href=\\"#vue3中操作dom的四种方式\\" aria-label=\\"Permalink to &quot;Vue3中操作dom的四种方式&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>通过ref直接拿到dom引用</p>\\n","tags":["Vue","面试题"],"userName":"大湿兄"},{"link":"article/webpack 编译时样式美化","excerpt":"","tags":["webpack"],"userName":"大湿兄"},{"link":"article/webpack中的三种hash分别是什么","excerpt":"","tags":["webpack"],"userName":"大湿兄"},{"link":"article/webpack常见面试题","excerpt":"","tags":["webpack"],"userName":"大湿兄"},{"link":"article/requestAnimationFrame 和 requestIdleCallback","excerpt":"<h1 id=\\"requestanimationframe-和-requestidlecallback\\" tabindex=\\"-1\\">requestAnimationFrame 和 requestIdleCallback <a class=\\"header-anchor\\" href=\\"#requestanimationframe-和-requestidlecallback\\" aria-label=\\"Permalink to &quot;requestAnimationFrame 和 requestIdleCallback&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><h2 id=\\"requestidlecallback\\" tabindex=\\"-1\\">requestIdleCallback <a class=\\"header-anchor\\" href=\\"#requestidlecallback\\" aria-label=\\"Permalink to &quot;requestIdleCallback&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"原理\\" tabindex=\\"-1\\">原理 <a class=\\"header-anchor\\" href=\\"#原理\\" aria-label=\\"Permalink to &quot;原理&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>将在浏览器的空闲时段内调用的函数排队。这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应。函数一般会按先进先调用的顺序执行，然而，如果回调函数指定了执行超时时间timeout，则有可能为了在超时前执行函数而打乱执行顺序。</p>\\n<h3 id=\\"使用方式\\" tabindex=\\"-1\\">使用方式 <a class=\\"header-anchor\\" href=\\"#使用方式\\" aria-label=\\"Permalink to &quot;使用方式&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language-html vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">html</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;!</span><span style=\\"color: #85E89D\\">DOCTYPE</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">html</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;</span><span style=\\"color: #85E89D\\">html</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">lang</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;en&quot;</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;</span><span style=\\"color: #85E89D\\">head</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;</span><span style=\\"color: #85E89D\\">meta</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">charset</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;UTF-8&quot;</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;</span><span style=\\"color: #85E89D\\">meta</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">http-equiv</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;X-UA-Compatible&quot;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">content</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;IE=edge&quot;</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;</span><span style=\\"color: #85E89D\\">meta</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">name</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;viewport&quot;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">content</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;width=device-width, initial-scale=1.0&quot;</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;</span><span style=\\"color: #85E89D\\">title</span><span style=\\"color: #E1E4E8\\">&gt;ric&lt;/</span><span style=\\"color: #85E89D\\">title</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;</span><span style=\\"color: #85E89D\\">style</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #85E89D\\">*</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">width</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">100</span><span style=\\"color: #F97583\\">%</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">height</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">100</span><span style=\\"color: #F97583\\">%</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">text-align</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">center</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">margin</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #B392F0\\">#div</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">position</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">absolute</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">height</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">auto</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">top</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">50</span><span style=\\"color: #F97583\\">%</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">margin-top</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">-50</span><span style=\\"color: #F97583\\">px</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;/</span><span style=\\"color: #85E89D\\">style</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;/</span><span style=\\"color: #85E89D\\">head</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;</span><span style=\\"color: #85E89D\\">body</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;</span><span style=\\"color: #85E89D\\">h3</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">style</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;display:none;&quot;</span><span style=\\"color: #E1E4E8\\">&gt;单击“ESC”退出当前状态&lt;/</span><span style=\\"color: #85E89D\\">h3</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">id</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;div&quot;</span><span style=\\"color: #E1E4E8\\">&gt;请点击当前屏幕，获取ric的相关参数&lt;/</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;/</span><span style=\\"color: #85E89D\\">body</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;</span><span style=\\"color: #85E89D\\">script</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> idleCallback </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> isExit </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">false</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">ricCB</span><span style=\\"color: #E1E4E8\\"> (</span><span style=\\"color: #FFAB70\\">idleDeadline</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// didTimeout表示是否超时</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">didTimeout</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> idleDeadline.didTimeout </span><span style=\\"color: #F97583\\">?</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;超时&#39;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">:</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;未超时&#39;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// timeRemaining()表示当前帧还剩余多少时间（以毫秒计算）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 一般一帧的时间是16.6ms，所以timeRemaining()取到的时间是小于这个值</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 如果为0，表示当前帧已经没有时间去处理回调</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 若强行调用回调，可能导致丢帧或者卡顿</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">timeRemaining</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> idleDeadline.</span><span style=\\"color: #B392F0\\">timeRemaining</span><span style=\\"color: #E1E4E8\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 业务逻辑代码</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    document.</span><span style=\\"color: #B392F0\\">getElementById</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;div&#39;</span><span style=\\"color: #E1E4E8\\">).innerText </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">`当前帧的前提下：</span><span style=\\"color: #79B8FF\\">\\\\n</span><span style=\\"color: #9ECBFF\\">是否超时:${</span><span style=\\"color: #E1E4E8\\">didTimeout</span><span style=\\"color: #9ECBFF\\">}; </span><span style=\\"color: #79B8FF\\">\\\\n</span><span style=\\"color: #9ECBFF\\">当前帧剩余时间${</span><span style=\\"color: #E1E4E8\\">timeRemaining</span><span style=\\"color: #9ECBFF\\">}ms`</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  document.body.</span><span style=\\"color: #B392F0\\">onclick</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> () {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    window.</span><span style=\\"color: #B392F0\\">cancelIdleCallback</span><span style=\\"color: #E1E4E8\\">(idleCallback)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (</span><span style=\\"color: #F97583\\">!</span><span style=\\"color: #E1E4E8\\">isExit) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      idleCallback </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> window.</span><span style=\\"color: #B392F0\\">requestIdleCallback</span><span style=\\"color: #E1E4E8\\">(ricCB)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      document.</span><span style=\\"color: #B392F0\\">querySelector</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;h3&#39;</span><span style=\\"color: #E1E4E8\\">).style.display </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;block&#39;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  document.</span><span style=\\"color: #B392F0\\">onkeydown</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> (</span><span style=\\"color: #FFAB70\\">event</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// ESC 退出当前调用</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (event.code </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;Escape&#39;</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      isExit </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;/</span><span style=\\"color: #85E89D\\">script</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;/</span><span style=\\"color: #85E89D\\">html</span><span style=\\"color: #E1E4E8\\">&gt;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;!</span><span style=\\"color: #22863A\\">DOCTYPE</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">html</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;</span><span style=\\"color: #22863A\\">html</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">lang</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;en&quot;</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;</span><span style=\\"color: #22863A\\">head</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;</span><span style=\\"color: #22863A\\">meta</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">charset</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;UTF-8&quot;</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;</span><span style=\\"color: #22863A\\">meta</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">http-equiv</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;X-UA-Compatible&quot;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">content</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;IE=edge&quot;</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;</span><span style=\\"color: #22863A\\">meta</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">name</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;viewport&quot;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">content</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;width=device-width, initial-scale=1.0&quot;</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;</span><span style=\\"color: #22863A\\">title</span><span style=\\"color: #24292E\\">&gt;ric&lt;/</span><span style=\\"color: #22863A\\">title</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;</span><span style=\\"color: #22863A\\">style</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #22863A\\">*</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">width</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">100</span><span style=\\"color: #D73A49\\">%</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">height</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">100</span><span style=\\"color: #D73A49\\">%</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">text-align</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">center</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">margin</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6F42C1\\">#div</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">position</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">absolute</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">height</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">auto</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">top</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">50</span><span style=\\"color: #D73A49\\">%</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">margin-top</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">-50</span><span style=\\"color: #D73A49\\">px</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;/</span><span style=\\"color: #22863A\\">style</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;/</span><span style=\\"color: #22863A\\">head</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;</span><span style=\\"color: #22863A\\">body</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;</span><span style=\\"color: #22863A\\">h3</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">style</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;display:none;&quot;</span><span style=\\"color: #24292E\\">&gt;单击“ESC”退出当前状态&lt;/</span><span style=\\"color: #22863A\\">h3</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">id</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;div&quot;</span><span style=\\"color: #24292E\\">&gt;请点击当前屏幕，获取ric的相关参数&lt;/</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;/</span><span style=\\"color: #22863A\\">body</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;</span><span style=\\"color: #22863A\\">script</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> idleCallback </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> isExit </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">false</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">ricCB</span><span style=\\"color: #24292E\\"> (</span><span style=\\"color: #E36209\\">idleDeadline</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// didTimeout表示是否超时</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">didTimeout</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> idleDeadline.didTimeout </span><span style=\\"color: #D73A49\\">?</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;超时&#39;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">:</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;未超时&#39;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// timeRemaining()表示当前帧还剩余多少时间（以毫秒计算）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 一般一帧的时间是16.6ms，所以timeRemaining()取到的时间是小于这个值</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 如果为0，表示当前帧已经没有时间去处理回调</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 若强行调用回调，可能导致丢帧或者卡顿</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">timeRemaining</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> idleDeadline.</span><span style=\\"color: #6F42C1\\">timeRemaining</span><span style=\\"color: #24292E\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 业务逻辑代码</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    document.</span><span style=\\"color: #6F42C1\\">getElementById</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;div&#39;</span><span style=\\"color: #24292E\\">).innerText </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">`当前帧的前提下：</span><span style=\\"color: #005CC5\\">\\\\n</span><span style=\\"color: #032F62\\">是否超时:${</span><span style=\\"color: #24292E\\">didTimeout</span><span style=\\"color: #032F62\\">}; </span><span style=\\"color: #005CC5\\">\\\\n</span><span style=\\"color: #032F62\\">当前帧剩余时间${</span><span style=\\"color: #24292E\\">timeRemaining</span><span style=\\"color: #032F62\\">}ms`</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  document.body.</span><span style=\\"color: #6F42C1\\">onclick</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> () {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    window.</span><span style=\\"color: #6F42C1\\">cancelIdleCallback</span><span style=\\"color: #24292E\\">(idleCallback)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (</span><span style=\\"color: #D73A49\\">!</span><span style=\\"color: #24292E\\">isExit) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      idleCallback </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> window.</span><span style=\\"color: #6F42C1\\">requestIdleCallback</span><span style=\\"color: #24292E\\">(ricCB)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      document.</span><span style=\\"color: #6F42C1\\">querySelector</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;h3&#39;</span><span style=\\"color: #24292E\\">).style.display </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;block&#39;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  document.</span><span style=\\"color: #6F42C1\\">onkeydown</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> (</span><span style=\\"color: #E36209\\">event</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// ESC 退出当前调用</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (event.code </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;Escape&#39;</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      isExit </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;/</span><span style=\\"color: #22863A\\">script</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;/</span><span style=\\"color: #22863A\\">html</span><span style=\\"color: #24292E\\">&gt;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br><span class=\\"line-number\\">18</span><br><span class=\\"line-number\\">19</span><br><span class=\\"line-number\\">20</span><br><span class=\\"line-number\\">21</span><br><span class=\\"line-number\\">22</span><br><span class=\\"line-number\\">23</span><br><span class=\\"line-number\\">24</span><br><span class=\\"line-number\\">25</span><br><span class=\\"line-number\\">26</span><br><span class=\\"line-number\\">27</span><br><span class=\\"line-number\\">28</span><br><span class=\\"line-number\\">29</span><br><span class=\\"line-number\\">30</span><br><span class=\\"line-number\\">31</span><br><span class=\\"line-number\\">32</span><br><span class=\\"line-number\\">33</span><br><span class=\\"line-number\\">34</span><br><span class=\\"line-number\\">35</span><br><span class=\\"line-number\\">36</span><br><span class=\\"line-number\\">37</span><br><span class=\\"line-number\\">38</span><br><span class=\\"line-number\\">39</span><br><span class=\\"line-number\\">40</span><br><span class=\\"line-number\\">41</span><br><span class=\\"line-number\\">42</span><br><span class=\\"line-number\\">43</span><br><span class=\\"line-number\\">44</span><br><span class=\\"line-number\\">45</span><br><span class=\\"line-number\\">46</span><br><span class=\\"line-number\\">47</span><br><span class=\\"line-number\\">48</span><br><span class=\\"line-number\\">49</span><br><span class=\\"line-number\\">50</span><br><span class=\\"line-number\\">51</span><br><span class=\\"line-number\\">52</span><br><span class=\\"line-number\\">53</span><br><span class=\\"line-number\\">54</span><br><span class=\\"line-number\\">55</span><br></div></div><h3 id=\\"演示效果\\" tabindex=\\"-1\\">演示效果 <a class=\\"header-anchor\\" href=\\"#演示效果\\" aria-label=\\"Permalink to &quot;演示效果&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc73cd924e3f4ec3b34c87c62e47015d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"演示结果\\"></p>\\n<h2 id=\\"requestanimationframe\\" tabindex=\\"-1\\">requestAnimationFrame <a class=\\"header-anchor\\" href=\\"#requestanimationframe\\" aria-label=\\"Permalink to &quot;requestAnimationFrame&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"原理-1\\" tabindex=\\"-1\\">原理 <a class=\\"header-anchor\\" href=\\"#原理-1\\" aria-label=\\"Permalink to &quot;原理&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</p>\\n<h3 id=\\"使用方式-1\\" tabindex=\\"-1\\">使用方式 <a class=\\"header-anchor\\" href=\\"#使用方式-1\\" aria-label=\\"Permalink to &quot;使用方式&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language-html vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">html</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;!</span><span style=\\"color: #85E89D\\">DOCTYPE</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">html</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;</span><span style=\\"color: #85E89D\\">html</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">lang</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;en&quot;</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;</span><span style=\\"color: #85E89D\\">head</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;</span><span style=\\"color: #85E89D\\">meta</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">charset</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;UTF-8&quot;</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;</span><span style=\\"color: #85E89D\\">meta</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">http-equiv</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;X-UA-Compatible&quot;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">content</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;IE=edge&quot;</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;</span><span style=\\"color: #85E89D\\">meta</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">name</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;viewport&quot;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">content</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;width=device-width, initial-scale=1.0&quot;</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;</span><span style=\\"color: #85E89D\\">title</span><span style=\\"color: #E1E4E8\\">&gt;raf&lt;/</span><span style=\\"color: #85E89D\\">title</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;</span><span style=\\"color: #85E89D\\">style</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #85E89D\\">*</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">width</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">100</span><span style=\\"color: #F97583\\">%</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">height</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">100</span><span style=\\"color: #F97583\\">%</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">text-align</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">center</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">margin</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #B392F0\\">#div</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">position</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">fixed</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">height</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">auto</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">top</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">50</span><span style=\\"color: #F97583\\">%</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      </span><span style=\\"color: #79B8FF\\">margin-top</span><span style=\\"color: #E1E4E8\\">: </span><span style=\\"color: #79B8FF\\">-50</span><span style=\\"color: #F97583\\">px</span><span style=\\"color: #E1E4E8\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;/</span><span style=\\"color: #85E89D\\">style</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;/</span><span style=\\"color: #85E89D\\">head</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;</span><span style=\\"color: #85E89D\\">body</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">id</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;div&quot;</span><span style=\\"color: #E1E4E8\\">&gt;页面将在3秒后，显示当前鼠标的实时位置&lt;/</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">style</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;height:100%;&quot;</span><span style=\\"color: #E1E4E8\\">&gt;&lt;/</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  &lt;</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">style</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;height:300%; padding-right: 100%;&quot;</span><span style=\\"color: #E1E4E8\\">&gt;&lt;</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">id</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;div1&quot;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">style</span><span style=\\"color: #E1E4E8\\">=</span><span style=\\"color: #9ECBFF\\">&quot;margin-left: 100%;width:100px; height: 100px; background-color: cornflowerblue;&quot;</span><span style=\\"color: #E1E4E8\\">&gt;&lt;/</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\">&gt;&lt;/</span><span style=\\"color: #85E89D\\">div</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;/</span><span style=\\"color: #85E89D\\">body</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;</span><span style=\\"color: #85E89D\\">script</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> isExit </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">false</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> rafId </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">null</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">rafCB</span><span style=\\"color: #E1E4E8\\"> (</span><span style=\\"color: #FFAB70\\">idleDeadline</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (isExit) </span><span style=\\"color: #F97583\\">return</span><span style=\\"color: #E1E4E8\\"> window.</span><span style=\\"color: #B392F0\\">cancelAnimationFrame</span><span style=\\"color: #E1E4E8\\">(rafId)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 业务逻辑代码</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">dom</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> document.</span><span style=\\"color: #B392F0\\">getElementById</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;div1&#39;</span><span style=\\"color: #E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">domRect</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> dom.</span><span style=\\"color: #B392F0\\">getBoundingClientRect</span><span style=\\"color: #E1E4E8\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    document.</span><span style=\\"color: #B392F0\\">getElementById</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;div&#39;</span><span style=\\"color: #E1E4E8\\">).innerText </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">`蓝色框所在的位置(请注意滚动条位置)：</span><span style=\\"color: #79B8FF\\">\\\\n</span><span style=\\"color: #9ECBFF\\">距离页面左边: ${</span><span style=\\"color: #E1E4E8\\">domRect</span><span style=\\"color: #9ECBFF\\">.</span><span style=\\"color: #E1E4E8\\">left</span><span style=\\"color: #9ECBFF\\">}; </span><span style=\\"color: #79B8FF\\">\\\\n</span><span style=\\"color: #9ECBFF\\">距离页面顶部: ${</span><span style=\\"color: #E1E4E8\\">domRect</span><span style=\\"color: #9ECBFF\\">.</span><span style=\\"color: #E1E4E8\\">top</span><span style=\\"color: #9ECBFF\\">}`</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    rafId </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> window.</span><span style=\\"color: #B392F0\\">requestAnimationFrame</span><span style=\\"color: #E1E4E8\\">(rafCB)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">setTimeout</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    rafId </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> window.</span><span style=\\"color: #B392F0\\">requestAnimationFrame</span><span style=\\"color: #E1E4E8\\">(rafCB)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }, </span><span style=\\"color: #79B8FF\\">3000</span><span style=\\"color: #E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  document.</span><span style=\\"color: #B392F0\\">onkeydown</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> (</span><span style=\\"color: #FFAB70\\">event</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// ESC 退出当前调用</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (event.code </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;Escape&#39;</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">      isExit </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;/</span><span style=\\"color: #85E89D\\">script</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;/</span><span style=\\"color: #85E89D\\">html</span><span style=\\"color: #E1E4E8\\">&gt;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;!</span><span style=\\"color: #22863A\\">DOCTYPE</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">html</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;</span><span style=\\"color: #22863A\\">html</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">lang</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;en&quot;</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;</span><span style=\\"color: #22863A\\">head</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;</span><span style=\\"color: #22863A\\">meta</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">charset</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;UTF-8&quot;</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;</span><span style=\\"color: #22863A\\">meta</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">http-equiv</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;X-UA-Compatible&quot;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">content</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;IE=edge&quot;</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;</span><span style=\\"color: #22863A\\">meta</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">name</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;viewport&quot;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">content</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;width=device-width, initial-scale=1.0&quot;</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;</span><span style=\\"color: #22863A\\">title</span><span style=\\"color: #24292E\\">&gt;raf&lt;/</span><span style=\\"color: #22863A\\">title</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;</span><span style=\\"color: #22863A\\">style</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #22863A\\">*</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">width</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">100</span><span style=\\"color: #D73A49\\">%</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">height</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">100</span><span style=\\"color: #D73A49\\">%</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">text-align</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">center</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">margin</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6F42C1\\">#div</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">position</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">fixed</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">height</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">auto</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">top</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">50</span><span style=\\"color: #D73A49\\">%</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      </span><span style=\\"color: #005CC5\\">margin-top</span><span style=\\"color: #24292E\\">: </span><span style=\\"color: #005CC5\\">-50</span><span style=\\"color: #D73A49\\">px</span><span style=\\"color: #24292E\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;/</span><span style=\\"color: #22863A\\">style</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;/</span><span style=\\"color: #22863A\\">head</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;</span><span style=\\"color: #22863A\\">body</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">id</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;div&quot;</span><span style=\\"color: #24292E\\">&gt;页面将在3秒后，显示当前鼠标的实时位置&lt;/</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">style</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;height:100%;&quot;</span><span style=\\"color: #24292E\\">&gt;&lt;/</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  &lt;</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">style</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;height:300%; padding-right: 100%;&quot;</span><span style=\\"color: #24292E\\">&gt;&lt;</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">id</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;div1&quot;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">style</span><span style=\\"color: #24292E\\">=</span><span style=\\"color: #032F62\\">&quot;margin-left: 100%;width:100px; height: 100px; background-color: cornflowerblue;&quot;</span><span style=\\"color: #24292E\\">&gt;&lt;/</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\">&gt;&lt;/</span><span style=\\"color: #22863A\\">div</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;/</span><span style=\\"color: #22863A\\">body</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;</span><span style=\\"color: #22863A\\">script</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> isExit </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">false</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> rafId </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">null</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">rafCB</span><span style=\\"color: #24292E\\"> (</span><span style=\\"color: #E36209\\">idleDeadline</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (isExit) </span><span style=\\"color: #D73A49\\">return</span><span style=\\"color: #24292E\\"> window.</span><span style=\\"color: #6F42C1\\">cancelAnimationFrame</span><span style=\\"color: #24292E\\">(rafId)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 业务逻辑代码</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">dom</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> document.</span><span style=\\"color: #6F42C1\\">getElementById</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;div1&#39;</span><span style=\\"color: #24292E\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">domRect</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> dom.</span><span style=\\"color: #6F42C1\\">getBoundingClientRect</span><span style=\\"color: #24292E\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    document.</span><span style=\\"color: #6F42C1\\">getElementById</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;div&#39;</span><span style=\\"color: #24292E\\">).innerText </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">`蓝色框所在的位置(请注意滚动条位置)：</span><span style=\\"color: #005CC5\\">\\\\n</span><span style=\\"color: #032F62\\">距离页面左边: ${</span><span style=\\"color: #24292E\\">domRect</span><span style=\\"color: #032F62\\">.</span><span style=\\"color: #24292E\\">left</span><span style=\\"color: #032F62\\">}; </span><span style=\\"color: #005CC5\\">\\\\n</span><span style=\\"color: #032F62\\">距离页面顶部: ${</span><span style=\\"color: #24292E\\">domRect</span><span style=\\"color: #032F62\\">.</span><span style=\\"color: #24292E\\">top</span><span style=\\"color: #032F62\\">}`</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    rafId </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> window.</span><span style=\\"color: #6F42C1\\">requestAnimationFrame</span><span style=\\"color: #24292E\\">(rafCB)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">setTimeout</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    rafId </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> window.</span><span style=\\"color: #6F42C1\\">requestAnimationFrame</span><span style=\\"color: #24292E\\">(rafCB)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }, </span><span style=\\"color: #005CC5\\">3000</span><span style=\\"color: #24292E\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  document.</span><span style=\\"color: #6F42C1\\">onkeydown</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> (</span><span style=\\"color: #E36209\\">event</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// ESC 退出当前调用</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (event.code </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;Escape&#39;</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">      isExit </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;/</span><span style=\\"color: #22863A\\">script</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;/</span><span style=\\"color: #22863A\\">html</span><span style=\\"color: #24292E\\">&gt;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br><span class=\\"line-number\\">18</span><br><span class=\\"line-number\\">19</span><br><span class=\\"line-number\\">20</span><br><span class=\\"line-number\\">21</span><br><span class=\\"line-number\\">22</span><br><span class=\\"line-number\\">23</span><br><span class=\\"line-number\\">24</span><br><span class=\\"line-number\\">25</span><br><span class=\\"line-number\\">26</span><br><span class=\\"line-number\\">27</span><br><span class=\\"line-number\\">28</span><br><span class=\\"line-number\\">29</span><br><span class=\\"line-number\\">30</span><br><span class=\\"line-number\\">31</span><br><span class=\\"line-number\\">32</span><br><span class=\\"line-number\\">33</span><br><span class=\\"line-number\\">34</span><br><span class=\\"line-number\\">35</span><br><span class=\\"line-number\\">36</span><br><span class=\\"line-number\\">37</span><br><span class=\\"line-number\\">38</span><br><span class=\\"line-number\\">39</span><br><span class=\\"line-number\\">40</span><br><span class=\\"line-number\\">41</span><br><span class=\\"line-number\\">42</span><br><span class=\\"line-number\\">43</span><br><span class=\\"line-number\\">44</span><br><span class=\\"line-number\\">45</span><br><span class=\\"line-number\\">46</span><br><span class=\\"line-number\\">47</span><br><span class=\\"line-number\\">48</span><br><span class=\\"line-number\\">49</span><br></div></div><h3 id=\\"演示效果-1\\" tabindex=\\"-1\\">演示效果 <a class=\\"header-anchor\\" href=\\"#演示效果-1\\" aria-label=\\"Permalink to &quot;演示效果&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd42180e1de741dbb88d8d4501c7c2cb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\\" alt=\\"演示效果\\"></p>\\n<h2 id=\\"requestanimationframe-和-requestidlecallback-是是宏任务还是微任务\\" tabindex=\\"-1\\">requestAnimationFrame 和 requestIdleCallback 是是宏任务还是微任务 <a class=\\"header-anchor\\" href=\\"#requestanimationframe-和-requestidlecallback-是是宏任务还是微任务\\" aria-label=\\"Permalink to &quot;requestAnimationFrame 和 requestIdleCallback 是是宏任务还是微任务&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"一、思考\\" tabindex=\\"-1\\">一、思考 <a class=\\"header-anchor\\" href=\\"#一、思考\\" aria-label=\\"Permalink to &quot;一、思考&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>要搞清楚requestAnimationFrame和requestIdleCallback是宏任务还是微任务就必须要搞清楚下面几个问题：</p>\\n<ol>\\n<li>浏览器在每一轮Event Loop事件循环中都会去渲染屏幕吗？</li>\\n<li>requestAnimationFrame在哪个阶段执行，是在渲染前还是渲染后？是在微任务执行前还是执行后？</li>\\n<li>requestIdleCallback在哪个阶段执行，是在渲染前还是渲染后？ 是在微任务执行前还是执行后？</li>\\n</ol>\\n<h3 id=\\"二、任务的执行时机\\" tabindex=\\"-1\\">二、任务的执行时机 <a class=\\"header-anchor\\" href=\\"#二、任务的执行时机\\" aria-label=\\"Permalink to &quot;二、任务的执行时机&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>在浏览器的Event Loop中是有多个任务队列的，每个任务队列的执行时机是不一样的，下面直接上干货，说说浏览器执行任务的顺序</p>\\n<ol>\\n<li>从task任务队列中取第一个task（比如setTimeout、setIntervel的回调，也可以将同一轮循环中的所有同步代码看作是一个宏任务），执行它。</li>\\n<li>执行微任务队列里的所有微任务。</li>\\n<li>浏览器判断是否更新渲染屏幕，如果需要重新绘制，则执行步骤4-13，如果不需要重新绘制，则流程回到步骤1，这样不断循环。</li>\\n<li>触发resize、scroll事件，建立媒体查询（执行一个任务中如果生成了微任务，则执行完任务该后就会执行所有的微任务，然后再执行下一个任务）。</li>\\n<li>建立css动画（执行一个任务中如果生成了微任务，则执行完该任务后就会执行所有的微任务，然后再执行下一个任务）。</li>\\n<li>执行requestAnimationFrame回调（执行一个任务中如果生成了微任务，则执行完该任务后就会执行所有的微任务，然后再执行下一个任务）。</li>\\n<li>执行 IntersectionObserver 回调（执行一个任务中如果生成了微任务，则执行完该任务后就会执行所有的微任务，然后再执行下一个任务）。</li>\\n<li>更新渲染屏幕。</li>\\n<li>浏览器判断当前帧是否还有空闲时间，如果有空闲时间，则执行步骤10-12。</li>\\n<li>从 requestIdleCallback回调函数队列中取第一个，执行它。</li>\\n<li>执行微任务队列里的所有微任务。</li>\\n<li>流程回到步骤9，直到requestIdleCallback回调函数队列清空或当前帧没有空闲时间。</li>\\n<li>流程回到步骤1，这样不断循环。</li>\\n</ol>\\n<h3 id=\\"三、代码验证\\" tabindex=\\"-1\\">三、代码验证 <a class=\\"header-anchor\\" href=\\"#三、代码验证\\" aria-label=\\"Permalink to &quot;三、代码验证&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>我们可以写一些代码到Chrome浏览器中验证一下，看看requestAnimationFrame和requestIdleCallback的执行顺序是怎样的。</p>\\n<p>运行以下这段代码</p>\\n<div class=\\"language-js vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">requestAnimationFrame</span><span style=\\"color: #E1E4E8\\">(()</span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">111</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #B392F0\\">setTimeout</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">222</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">Promise</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">resolve</span><span style=\\"color: #E1E4E8\\">().</span><span style=\\"color: #B392F0\\">then</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">333</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">})</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">requestAnimationFrame</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">444</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">Promise</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">resolve</span><span style=\\"color: #E1E4E8\\">().</span><span style=\\"color: #B392F0\\">then</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">555</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">})</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">requestAnimationFrame</span><span style=\\"color: #24292E\\">(()</span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">111</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6F42C1\\">setTimeout</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">222</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">Promise</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">resolve</span><span style=\\"color: #24292E\\">().</span><span style=\\"color: #6F42C1\\">then</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">333</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">})</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">requestAnimationFrame</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">444</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">Promise</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">resolve</span><span style=\\"color: #24292E\\">().</span><span style=\\"color: #6F42C1\\">then</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">555</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">})</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br></div></div><p>输出结果</p>\\n<p><img src=\\"https://upload-images.jianshu.io/upload_images/18898562-e4856ec24d669731.png\\" alt=\\"\\"></p>\\n<p>运行以下这段代码</p>\\n<div class=\\"language-js vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #B392F0\\">requestIdleCallback</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">111</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #B392F0\\">setTimeout</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">222</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">Promise</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">resolve</span><span style=\\"color: #E1E4E8\\">().</span><span style=\\"color: #B392F0\\">then</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">333</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">})</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">requestIdleCallback</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">444</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">Promise</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">resolve</span><span style=\\"color: #E1E4E8\\">().</span><span style=\\"color: #B392F0\\">then</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">555</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">})</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6F42C1\\">requestIdleCallback</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">111</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6F42C1\\">setTimeout</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">222</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">Promise</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">resolve</span><span style=\\"color: #24292E\\">().</span><span style=\\"color: #6F42C1\\">then</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">333</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">})</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">requestIdleCallback</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">444</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">Promise</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">resolve</span><span style=\\"color: #24292E\\">().</span><span style=\\"color: #6F42C1\\">then</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">555</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">})</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br></div></div><p>输出结果</p>\\n<p><img src=\\"https://upload-images.jianshu.io/upload_images/18898562-0b4b2d0773f1faf8.png\\" alt=\\"\\"></p>\\n<p>运行以下这段代码</p>\\n<div class=\\"language-js vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #79B8FF\\">Promise</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">resolve</span><span style=\\"color: #E1E4E8\\">().</span><span style=\\"color: #B392F0\\">then</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">111</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #B392F0\\">setTimeout</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">222</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">Promise</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">resolve</span><span style=\\"color: #E1E4E8\\">().</span><span style=\\"color: #B392F0\\">then</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">333</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">})</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #79B8FF\\">Promise</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">resolve</span><span style=\\"color: #E1E4E8\\">().</span><span style=\\"color: #B392F0\\">then</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">444</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #79B8FF\\">Promise</span><span style=\\"color: #E1E4E8\\">.</span><span style=\\"color: #B392F0\\">resolve</span><span style=\\"color: #E1E4E8\\">().</span><span style=\\"color: #B392F0\\">then</span><span style=\\"color: #E1E4E8\\">(() </span><span style=\\"color: #F97583\\">=&gt;</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">555</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">})</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #005CC5\\">Promise</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">resolve</span><span style=\\"color: #24292E\\">().</span><span style=\\"color: #6F42C1\\">then</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">111</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6F42C1\\">setTimeout</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">222</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">Promise</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">resolve</span><span style=\\"color: #24292E\\">().</span><span style=\\"color: #6F42C1\\">then</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">333</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">})</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #005CC5\\">Promise</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">resolve</span><span style=\\"color: #24292E\\">().</span><span style=\\"color: #6F42C1\\">then</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">444</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #005CC5\\">Promise</span><span style=\\"color: #24292E\\">.</span><span style=\\"color: #6F42C1\\">resolve</span><span style=\\"color: #24292E\\">().</span><span style=\\"color: #6F42C1\\">then</span><span style=\\"color: #24292E\\">(() </span><span style=\\"color: #D73A49\\">=&gt;</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">555</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">})</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br></div></div><p>输出结果</p>\\n<p><img src=\\"https://upload-images.jianshu.io/upload_images/18898562-a7146b4b69b8ab61.png\\" alt=\\"\\"></p>\\n<h3 id=\\"四、总结\\" tabindex=\\"-1\\">四、总结 <a class=\\"header-anchor\\" href=\\"#四、总结\\" aria-label=\\"Permalink to &quot;四、总结&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ol>\\n<li>requestAnimationFrame和requestIdleCallback是和宏任务性质一样的任务，只是他们的执行时机不同而已。也有人说它们既不是宏任务也不是微任务，其实我们不必纠结这个，我们所要做的就是知道他们的执行时机就好。</li>\\n<li>浏览器在每一轮Event Loop事件循环中不一定会去重新渲染屏幕，会根据浏览器刷新率以及页面性能或是否后台运行等因素判断的，浏览器的每一帧是比较固定的，会尽量保持60Hz的刷新率运行，每一帧中间可能会进行多轮事件循环。</li>\\n<li>requestAnimationFrame回调的执行与task和microtask无关，而是与浏览器是否渲染相关联的。它是在浏览器渲染前，在微任务执行后执行。</li>\\n<li>requestIdleCallback是在浏览器渲染后有空闲时间时执行，如果requestIdleCallback设置了第二个参数timeout，则会在超时后的下一帧强制执行。</li>\\n</ol>\\n<h2 id=\\"requestanimationframe-和-settimeout-区别\\" tabindex=\\"-1\\">requestAnimationFrame 和 setTimeout 区别 <a class=\\"header-anchor\\" href=\\"#requestanimationframe-和-settimeout-区别\\" aria-label=\\"Permalink to &quot;requestAnimationFrame 和 setTimeout 区别&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"前言\\" tabindex=\\"-1\\">前言 <a class=\\"header-anchor\\" href=\\"#前言\\" aria-label=\\"Permalink to &quot;前言&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>对于现在技术社区的现状的，我分析用户画像 觉得大部分的用户更多的是喜欢短频快的节奏文章，所以故尝试用最短时间挖掘简单的面试题，将背后的知识整理分享给大家，喜欢在后续的面试过程中，可以对你有帮助，<strong>如果刚好是自己的知识盲区不妨帮忙点赞支持一下</strong></p>\\n<h3 id=\\"背景\\" tabindex=\\"-1\\">背景 <a class=\\"header-anchor\\" href=\\"#背景\\" aria-label=\\"Permalink to &quot;背景&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>相信大部分的开发者都使用过 <code>setTimeout</code> 这个 API, 如果没有使用过可以，使用跳转地址<a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FsetTimeout\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout\\" target=\\"_blank\\" rel=\\"noreferrer\\">setTimeout</a> 但是我相信很多开发者是没有使用过<code>requestAnimationFrame</code> 这个 API的，因为我们平时开发中几乎不需要用到，相信也有朋友在 <code>React</code>。</p>\\n<p>下面我们分开介绍两个API，在正式开始之前我们不妨先学习一下如何使用 <code>requestAnimationFrame</code></p>\\n<h3 id=\\"requestanimationframe-1\\" tabindex=\\"-1\\">requestAnimationFrame <a class=\\"header-anchor\\" href=\\"#requestanimationframe-1\\" aria-label=\\"Permalink to &quot;requestAnimationFrame&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>顾明思议，<code>Request</code>，<code>Animation</code>，<code>Frame</code>, 在动画帧请求做件事情，具体可以看<a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FWindow%2FrequestAnimationFrame\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\\" target=\\"_blank\\" rel=\\"noreferrer\\">科普文章</a></p>\\n<blockquote>\\n<p><strong><code>window.requestAnimationFrame()</code></strong> 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</p>\\n</blockquote>\\n<h4 id=\\"语法\\" tabindex=\\"-1\\">语法 <a class=\\"header-anchor\\" href=\\"#语法\\" aria-label=\\"Permalink to &quot;语法&quot;\\">&ZeroWidthSpace;</a></h4>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">window.requestAnimationFrame(callback);</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">window.requestAnimationFrame(callback);</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><h4 id=\\"用法\\" tabindex=\\"-1\\">用法 <a class=\\"header-anchor\\" href=\\"#用法\\" aria-label=\\"Permalink to &quot;用法&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>一般用在操作动画帧上，在物体需要在一帧渲染之前执行某个动画。一般是更好的优化动画上</p>\\n<div class=\\"language-js vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">element</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> document.</span><span style=\\"color: #B392F0\\">getElementById</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;some-element-you-want-to-animate&#39;</span><span style=\\"color: #E1E4E8\\">); </span><span style=\\"color: #6A737D\\">// 需要移动的物体元素</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">let</span><span style=\\"color: #E1E4E8\\"> start;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">step</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #FFAB70\\">timestamp</span><span style=\\"color: #E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (start </span><span style=\\"color: #F97583\\">===</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">undefined</span><span style=\\"color: #E1E4E8\\">) start </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> timestamp;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">elapsed</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> timestamp </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #E1E4E8\\"> start;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #6A737D\\">//这里使用`Math.min()`确保元素刚好停在200px的位置。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  element.style.transform </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;translateX(&#39;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">+</span><span style=\\"color: #E1E4E8\\"> Math.</span><span style=\\"color: #B392F0\\">min</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #79B8FF\\">0.1</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">*</span><span style=\\"color: #E1E4E8\\"> elapsed, </span><span style=\\"color: #79B8FF\\">200</span><span style=\\"color: #E1E4E8\\">) </span><span style=\\"color: #F97583\\">+</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;px)&#39;</span><span style=\\"color: #E1E4E8\\">; </span><span style=\\"color: #6A737D\\">// 每次移动 0.1 * elapsed 时间</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #F97583\\">if</span><span style=\\"color: #E1E4E8\\"> (elapsed </span><span style=\\"color: #F97583\\">&lt;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">2000</span><span style=\\"color: #E1E4E8\\">) { </span><span style=\\"color: #6A737D\\">// 在两秒后停止动画</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    window.</span><span style=\\"color: #B392F0\\">requestAnimationFrame</span><span style=\\"color: #E1E4E8\\">(step); </span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">window.</span><span style=\\"color: #B392F0\\">requestAnimationFrame</span><span style=\\"color: #E1E4E8\\">(step); </span><span style=\\"color: #6A737D\\">// 执行动画</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">element</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> document.</span><span style=\\"color: #6F42C1\\">getElementById</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;some-element-you-want-to-animate&#39;</span><span style=\\"color: #24292E\\">); </span><span style=\\"color: #6A737D\\">// 需要移动的物体元素</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">let</span><span style=\\"color: #24292E\\"> start;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">step</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #E36209\\">timestamp</span><span style=\\"color: #24292E\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (start </span><span style=\\"color: #D73A49\\">===</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">undefined</span><span style=\\"color: #24292E\\">) start </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> timestamp;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">elapsed</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> timestamp </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #24292E\\"> start;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6A737D\\">//这里使用`Math.min()`确保元素刚好停在200px的位置。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  element.style.transform </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;translateX(&#39;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">+</span><span style=\\"color: #24292E\\"> Math.</span><span style=\\"color: #6F42C1\\">min</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #005CC5\\">0.1</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">*</span><span style=\\"color: #24292E\\"> elapsed, </span><span style=\\"color: #005CC5\\">200</span><span style=\\"color: #24292E\\">) </span><span style=\\"color: #D73A49\\">+</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;px)&#39;</span><span style=\\"color: #24292E\\">; </span><span style=\\"color: #6A737D\\">// 每次移动 0.1 * elapsed 时间</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #D73A49\\">if</span><span style=\\"color: #24292E\\"> (elapsed </span><span style=\\"color: #D73A49\\">&lt;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">2000</span><span style=\\"color: #24292E\\">) { </span><span style=\\"color: #6A737D\\">// 在两秒后停止动画</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    window.</span><span style=\\"color: #6F42C1\\">requestAnimationFrame</span><span style=\\"color: #24292E\\">(step); </span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">window.</span><span style=\\"color: #6F42C1\\">requestAnimationFrame</span><span style=\\"color: #24292E\\">(step); </span><span style=\\"color: #6A737D\\">// 执行动画</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br><span class=\\"line-number\\">18</span><br></div></div><h4 id=\\"返回值\\" tabindex=\\"-1\\">返回值 <a class=\\"header-anchor\\" href=\\"#返回值\\" aria-label=\\"Permalink to &quot;返回值&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>你没看错 <code>requestAnimationFrame</code> 是有返回值的。</p>\\n<p>一个 <code>long</code> 整数，请求 ID ，是回调列表中唯一的标识。是个非零值，没别的意义。你可以传这个值给 <a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FWindow%2FcancelAnimationFrame\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/cancelAnimationFrame\\" target=\\"_blank\\" rel=\\"noreferrer\\"><code>window.cancelAnimationFrame()</code></a> 以取消回调函数。</p>\\n<p><code>cancelAnimationFrame</code> 调用参数是先前调用 <code>window.requestAnimationFrame()</code>方法时候返回的ID</p>\\n<h3 id=\\"settimeout\\" tabindex=\\"-1\\">setTimeout <a class=\\"header-anchor\\" href=\\"#settimeout\\" aria-label=\\"Permalink to &quot;setTimeout&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>下面介绍的 <code>setTimeout</code> 相信大部分的开发者都使用过这个API吧，而且可以说相当熟悉</p>\\n<h4 id=\\"语法-1\\" tabindex=\\"-1\\">语法 <a class=\\"header-anchor\\" href=\\"#语法-1\\" aria-label=\\"Permalink to &quot;语法&quot;\\">&ZeroWidthSpace;</a></h4>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var timeoutID = scope.setTimeout(function[ , delay, arg1, arg2, ...]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var timeoutID = scope.setTimeout(function[, delay]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var timeoutID = scope.setTimeout(code[, delay]);</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var timeoutID = scope.setTimeout(function[ , delay, arg1, arg2, ...]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var timeoutID = scope.setTimeout(function[, delay]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var timeoutID = scope.setTimeout(code[, delay]);</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br></div></div><h4 id=\\"用法-1\\" tabindex=\\"-1\\">用法 <a class=\\"header-anchor\\" href=\\"#用法-1\\" aria-label=\\"Permalink to &quot;用法&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>用于延迟执行某个动作，或者可以循环调用自身，实现 <code>setInterval</code> 的效果,但注意需要释放 setTimeout 返回的 ID 利用<code>clearTimeout</code> 清空定时器。</p>\\n<div class=\\"language-js vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #F97583\\">var</span><span style=\\"color: #E1E4E8\\"> timeoutID;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">delayedAlert</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  timeoutID </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> window.</span><span style=\\"color: #B392F0\\">setTimeout</span><span style=\\"color: #E1E4E8\\">(slowAlert, </span><span style=\\"color: #79B8FF\\">2000</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">slowAlert</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  </span><span style=\\"color: #B392F0\\">alert</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&#39;That was really slow!&#39;</span><span style=\\"color: #E1E4E8\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">function</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">clearAlert</span><span style=\\"color: #E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">  window.</span><span style=\\"color: #B392F0\\">clearTimeout</span><span style=\\"color: #E1E4E8\\">(timeoutID);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #D73A49\\">var</span><span style=\\"color: #24292E\\"> timeoutID;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">delayedAlert</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  timeoutID </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> window.</span><span style=\\"color: #6F42C1\\">setTimeout</span><span style=\\"color: #24292E\\">(slowAlert, </span><span style=\\"color: #005CC5\\">2000</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">slowAlert</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  </span><span style=\\"color: #6F42C1\\">alert</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&#39;That was really slow!&#39;</span><span style=\\"color: #24292E\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">function</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">clearAlert</span><span style=\\"color: #24292E\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">  window.</span><span style=\\"color: #6F42C1\\">clearTimeout</span><span style=\\"color: #24292E\\">(timeoutID);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br></div></div><h4 id=\\"返回值-1\\" tabindex=\\"-1\\">返回值 <a class=\\"header-anchor\\" href=\\"#返回值-1\\" aria-label=\\"Permalink to &quot;返回值&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>返回值<code>timeoutID</code>是一个正整数，表示定时器的编号。这个值可以传递给<a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FclearTimeout\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/API/clearTimeout\\" target=\\"_blank\\" rel=\\"noreferrer\\"><code>clearTimeout()</code></a>来取消该定时器。</p>\\n<p>这里有意思的点是 <code>setTimeout()</code>和<a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FsetInterval\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/API/setInterval\\" target=\\"_blank\\" rel=\\"noreferrer\\"><code>setInterval()</code></a>共用一个编号池，技术上，<code>clearTimeout()</code>和 <a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FclearInterval\\" title=\\"https://developer.mozilla.org/zh-CN/docs/Web/API/clearInterval\\" target=\\"_blank\\" rel=\\"noreferrer\\"><code>clearInterval()</code></a> 可以互换。但是，为了避免混淆，不要混用取消定时函数。两者竟然是可以互换的</p>\\n<p>在同一个对象上（一个window或者worker），<code>setTimeout()</code>或者<code>setInterval()</code>在后续的调用不会重用同一个定时器编号。但是不同的对象使用独立的编号池。</p>\\n<h3 id=\\"两者对比\\" tabindex=\\"-1\\">两者对比 <a class=\\"header-anchor\\" href=\\"#两者对比\\" aria-label=\\"Permalink to &quot;两者对比&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>下面我们总结一下他们的差异</p>\\n<p>|  | requestAnimationFrame | setTimeout |\\n|</p>\\n","tags":["场景题","浏览器"],"userName":"大湿兄"},{"link":"article/前端实现拖拽","excerpt":"","tags":["场景题"],"userName":"大湿兄"},{"link":"article/前端水印功能","excerpt":"<h1 id=\\"前端水印功能\\" tabindex=\\"-1\\">前端水印功能 <a class=\\"header-anchor\\" href=\\"#前端水印功能\\" aria-label=\\"Permalink to &quot;前端水印功能&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><h2 id=\\"实现水印功能\\" tabindex=\\"-1\\">实现水印功能 <a class=\\"header-anchor\\" href=\\"#实现水印功能\\" aria-label=\\"Permalink to &quot;实现水印功能&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>几种实现方案</p>\\n","tags":["场景题"],"userName":"大湿兄"},{"link":"article/如何实现并发请求数量控制","excerpt":"","tags":["场景题","并发"],"userName":"大湿兄"},{"link":"article/微信小程序实现一些优惠券","excerpt":"<h1 id=\\"微信小程序实现一些优惠券-卡券\\" tabindex=\\"-1\\">微信小程序实现一些优惠券/卡券 <a class=\\"header-anchor\\" href=\\"#微信小程序实现一些优惠券-卡券\\" aria-label=\\"Permalink to &quot;微信小程序实现一些优惠券/卡券&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>1.实现效果</p>\\n","tags":["场景题"],"userName":"大湿兄"},{"link":"article/无感刷新token","excerpt":"<h1 id=\\"无感刷新token\\" tabindex=\\"-1\\">无感刷新token <a class=\\"header-anchor\\" href=\\"#无感刷新token\\" aria-label=\\"Permalink to &quot;无感刷新token&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>一、无感刷新refreshToken是什么？</p>\\n","tags":["无感刷新token"],"userName":"大湿兄"},{"link":"article/红绿灯的两种实现","excerpt":"","tags":["场景题"],"userName":"大湿兄"},{"link":"article/设计一个 JS 插件系统","excerpt":"<h1 id=\\"设计一个-js-插件系统\\" tabindex=\\"-1\\">设计一个 JS 插件系统 <a class=\\"header-anchor\\" href=\\"#设计一个-js-插件系统\\" aria-label=\\"Permalink to &quot;设计一个 JS 插件系统&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p><strong>原文地址</strong>：<a href=\\"https://css-tricks.com/designing-a-javascript-plugin-system/\\" title=\\"https://css-tricks.com/designing-a-javascript-plugin-system/\\" target=\\"_blank\\" rel=\\"noreferrer\\">css-tricks.com/designing-a…</a></p>\\n<h2 id=\\"前言\\" tabindex=\\"-1\\">前言 <a class=\\"header-anchor\\" href=\\"#前言\\" aria-label=\\"Permalink to &quot;前言&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>许多开源库都有插件系统，例如：<a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fvue\\" title=\\"https://www.npmjs.com/package/vue\\" target=\\"_blank\\" rel=\\"noreferrer\\">Vue</a>、<a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fjquery\\" title=\\"https://www.npmjs.com/package/jquery\\" target=\\"_blank\\" rel=\\"noreferrer\\">jQuery</a>、<a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgatsby\\" title=\\"https://www.npmjs.com/package/gatsby\\" target=\\"_blank\\" rel=\\"noreferrer\\">Gatsby</a>。插件是库和框架的一个常见特性，用于允许开发人员以一种安全、可伸缩的方式添加功能。那么怎么构建一个插件系统呢？让我们用JS构建一个自己的插件系统来回答这个问题。</p>\\n<p>简单的计算器示例</p>\\n","tags":["场景题","插件"],"userName":"大湿兄"},{"link":"article/请求合并","excerpt":"<h1 id=\\"请求合并\\" tabindex=\\"-1\\">请求合并 <a class=\\"header-anchor\\" href=\\"#请求合并\\" aria-label=\\"Permalink to &quot;请求合并&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><blockquote>\\n<p>面试中常考的一个代码题,也是业务开发中经常会遇到的问题</p>\\n</blockquote>\\n<p>题目描述</p>\\n","tags":["场景题"],"userName":"大湿兄"},{"link":"article/小程序代码包极致压缩之路","excerpt":"<h1 id=\\"小程序代码包极致压缩之路\\" tabindex=\\"-1\\">小程序代码包极致压缩之路 <a class=\\"header-anchor\\" href=\\"#小程序代码包极致压缩之路\\" aria-label=\\"Permalink to &quot;小程序代码包极致压缩之路&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>影响小程序代码包大小的因素</p>\\n","tags":["性能优化","westore"],"userName":"大湿兄"},{"link":"article/小程序攻略","excerpt":"<h1 id=\\"小程序攻略\\" tabindex=\\"-1\\">小程序攻略 <a class=\\"header-anchor\\" href=\\"#小程序攻略\\" aria-label=\\"Permalink to &quot;小程序攻略&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><blockquote>\\n<p>该内容由银科控股融汇研发部曹俊及其团队授权提供。该团队拥有 10 多名小程序开发，深耕小程序领域，总结出了本篇优质长文。同时本篇内容也已经合并入我的 <a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FInterviewMap%2FCS-Interview-Knowledge-Map\\" title=\\"https://github.com/InterviewMap/CS-Interview-Knowledge-Map\\" target=\\"_blank\\" rel=\\"noreferrer\\">开源项目</a> 中，目前项目内容包含了 JS、网络、浏览器相关、性能优化、安全、框架、Git、数据结构、算法等内容，无论是基础还是进阶，亦或是源码解读，你都能在本图谱中得到满意的答案，希望这个面试图谱能够帮助到大家更好的准备面试。</p>\\n</blockquote>\\n<h1 id=\\"小程序-登录\\" tabindex=\\"-1\\">小程序-登录 <a class=\\"header-anchor\\" href=\\"#小程序-登录\\" aria-label=\\"Permalink to &quot;小程序-登录&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>unionid和openid</p>\\n","tags":["westore"],"userName":"大湿兄"},{"link":"article/小程序生命周期","excerpt":"","tags":["westore"],"userName":"大湿兄"},{"link":"article/小程序面试题","excerpt":"","tags":["westore"],"userName":"大湿兄"},{"link":"article/微信小程序中路由跳转的方式有哪些？","excerpt":"","tags":["westore"],"userName":"大湿兄"},{"link":"article/微信小程序的发布流程","excerpt":"","tags":["westore"],"userName":"大湿兄"},{"link":"article/微信小程序的实现原理","excerpt":"","tags":["westore"],"userName":"大湿兄"},{"link":"article/微信小程序的支付流程","excerpt":"","tags":["westore"],"userName":"大湿兄"},{"link":"article/微信小程序的理解","excerpt":"","tags":["westore"],"userName":"大湿兄"},{"link":"article/微信小程序的登录流程","excerpt":"","tags":["westore"],"userName":"大湿兄"},{"link":"article/提高微信小程序的应用速度的手段有哪些？","excerpt":"","tags":["westore"],"userName":"大湿兄"},{"link":"article/HTML优化","excerpt":"","tags":["性能优化"],"userName":"大湿兄"},{"link":"article/减少引用类型内存访问","excerpt":"","tags":["性能优化"],"userName":"大湿兄"},{"link":"article/前端性能监控Performance","excerpt":"","tags":["性能优化"],"userName":"大湿兄"},{"link":"article/图片懒加载","excerpt":"<h1 id=\\"图片懒加载\\" tabindex=\\"-1\\">图片懒加载 <a class=\\"header-anchor\\" href=\\"#图片懒加载\\" aria-label=\\"Permalink to &quot;图片懒加载&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>一、实现原理</p>\\n","tags":["性能优化"],"userName":"大湿兄"},{"link":"article/如何减少卡顿","excerpt":"<h1 id=\\"如何减少卡顿的代码\\" tabindex=\\"-1\\">如何减少卡顿的代码 <a class=\\"header-anchor\\" href=\\"#如何减少卡顿的代码\\" aria-label=\\"Permalink to &quot;如何减少卡顿的代码&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>聊网站性能的文章有很多，通常为了提高js性能，避不开这两点：</p>\\n<ul>\\n<li><em>不要阻塞主线程</em></li>\\n<li><em>减少长耗时</em></li>\\n</ul>\\n<p>该怎么做呢？很明显，精简js代码有好处，但更少的代码量是否就一定意味着用户界面的体验会更顺畅？可能会，但也可能恰恰相反。</p>\\n<p>要弄懂优化js中任务的重要性，首先需要了解什么是任务、任务的角色以及浏览器的任务处理机制。</p>\\n<p><a href=\\"https://juejin.cn/post/7159807927908302884\\" title=\\"https://juejin.cn/post/7159807927908302884\\" target=\\"_blank\\" rel=\\"noreferrer\\">浏览器中的任务</a></p>\\n","tags":["性能优化"],"userName":"大湿兄"},{"link":"article/懒加载和预加载","excerpt":"","tags":["性能优化"],"userName":"大湿兄"},{"link":"article/最全的前端性能定位总结","excerpt":"<h1 id=\\"最全的前端性能定位总结\\" tabindex=\\"-1\\">最全的前端性能定位总结 <a class=\\"header-anchor\\" href=\\"#最全的前端性能定位总结\\" aria-label=\\"Permalink to &quot;最全的前端性能定位总结&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><h3 id=\\"性能优化的意义\\" tabindex=\\"-1\\">性能优化的意义 <a class=\\"header-anchor\\" href=\\"#性能优化的意义\\" aria-label=\\"Permalink to &quot;性能优化的意义&quot;\\">&ZeroWidthSpace;</a></h3>\\n<h4 id=\\"_1-性能是留住用户很重要的一环\\" tabindex=\\"-1\\">1. 性能是留住用户很重要的一环 <a class=\\"header-anchor\\" href=\\"#_1-性能是留住用户很重要的一环\\" aria-label=\\"Permalink to &quot;1\\\\. 性能是留住用户很重要的一环&quot;\\">&ZeroWidthSpace;</a></h4>\\n<ul>\\n<li>\\n<p><strong>pinterest</strong> 重建了他们的页面以实现性能，使感知等待时间减少了 <strong>40％</strong>，从而将搜索引擎流量和注册量提高了 <strong>15％</strong>。</p>\\n</li>\\n<li>\\n<p>通过将平均页面加载时间减少 850 毫秒，<strong>COOK</strong> 发现他们能够将转化率提高 7％，将跳出率降低 7％，并将每个页面的页面数量增加 10％。</p>\\n</li>\\n<li>\\n<p><strong>BBC</strong> 发现，他们在网站加载的每<strong>一秒钟</strong>内就会损失 <strong>10％</strong> 的用户。</p>\\n</li>\\n<li>\\n<p><strong>DoubleClick by Google</strong> 发现，如果网页加载时间超过 <strong>3</strong> 秒，则会有 <strong>53％</strong> 的用户放弃移动网站的访问。</p>\\n</li>\\n</ul>\\n<h4 id=\\"_2-性能是改善转换率至关重要的一环\\" tabindex=\\"-1\\">2. 性能是改善转换率至关重要的一环 <a class=\\"header-anchor\\" href=\\"#_2-性能是改善转换率至关重要的一环\\" aria-label=\\"Permalink to &quot;2\\\\. 性能是改善转换率至关重要的一环&quot;\\">&ZeroWidthSpace;</a></h4>\\n<ul>\\n<li>对于 <strong>Mobify</strong>，主页加载速度每减少 100 毫秒，基于会话的转换增加 1.11％，平均年收入增加近 <strong>380,000</strong> 美元。此外，结账页面加载速度减少 100 毫秒，基于会话的转换增加了 1.55％，从而使年均收入增长近 <strong>530,000</strong> 美元</li>\\n<li><strong>DoubleClick</strong> 发现在 5 秒内加载网站的发布商的广告收入是在 19 秒内加载的网站的<strong>两倍</strong>。. 当 <strong>AutoAnything</strong> 将页面加载时间缩短一半时，他们的销售额增长了 <strong>12-13％</strong>。</li>\\n</ul>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0842e36a5f134aee8acf2327bf44b473~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"09.png\\"></p>\\n<h3 id=\\"用户角度的性能标准是什么\\" tabindex=\\"-1\\">用户角度的性能标准是什么 <a class=\\"header-anchor\\" href=\\"#用户角度的性能标准是什么\\" aria-label=\\"Permalink to &quot;用户角度的性能标准是什么&quot;\\">&ZeroWidthSpace;</a></h3>\\n<h4 id=\\"著名的-2-5-8-原则\\" tabindex=\\"-1\\">著名的 2-5-8 原则 <a class=\\"header-anchor\\" href=\\"#著名的-2-5-8-原则\\" aria-label=\\"Permalink to &quot;著名的 2-5-8 原则&quot;\\">&ZeroWidthSpace;</a></h4>\\n<ul>\\n<li>\\n<p>当用户能够在 2 秒以内得到响应时，会感觉系统的响应很快；</p>\\n</li>\\n<li>\\n<p>当用户在 2-5 秒之间得到响应时，会感觉系统的响应速度还可以；</p>\\n</li>\\n<li>\\n<p>当用户在 5-8 秒以内得到响应时，会感觉系统的响应速度很慢，但是还可以接受；</p>\\n</li>\\n<li>\\n<p>而当用户在超过 8 秒后仍然无法得到响应时，会感觉系统糟透了，或者认为系统已经失去响应，而选择离开这个 Web 站点，或者发起第二次请求。</p>\\n</li>\\n</ul>\\n<p><strong>综上所述：一个网站的性能好坏是留住用户和实现变现的基础</strong></p>\\n<blockquote>\\n<p>而我们的目标就是力争 1s，保住 2s</p>\\n</blockquote>\\n<p>1s 的差距，看似微乎其微，但这 1s，浏览器实际上可以做非常多的事情 接下来让我们来看看如何对一个网站进行性能分析</p>\\n<h3 id=\\"常见网站性能指标\\" tabindex=\\"-1\\">常见网站性能指标 <a class=\\"header-anchor\\" href=\\"#常见网站性能指标\\" aria-label=\\"Permalink to &quot;常见网站性能指标&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ol>\\n<li><strong>FP 白屏（First Paint Time ）</strong>： 从页面开始加载到浏览器中检测到渲染（任何渲染）时被触发（例如背景改变，样式应用等）</li>\\n</ol>\\n<blockquote>\\n<p>白屏时间过长，会让用户认为我们的页面不能用或者可用性差</p>\\n</blockquote>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab8e2f96a2474955adbccde56794340e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"15.jpg\\"></p>\\n<ol start=\\"2\\">\\n<li>\\n<p><strong>FCP 首屏（first contentful paint ）</strong>：从页面开始加载到页面内容的任何部分呈现在屏幕上的时间。 （关注的焦点是内容，这个度量可以知道用户什么时候收到有用的信息（文本，图像等）） <img src=\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d72e9f440f84ad2aaed4913b43c891c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"16.jpg\\"></p>\\n</li>\\n<li>\\n<p><strong>FMP 首次有效绘制（First Meaningful Paint ）</strong>： 表示页面的“主要内容”，开始出现在屏幕上的时间点，这项指标因页面逻辑而异，因此上不存在任何规范。（<strong>只是记录了加载体验的最开始</strong>。如果页面显示的是启动图片或者 loading 动画，这个时刻对用用户而言没有意义）</p>\\n</li>\\n<li>\\n<p><strong>LCP（Largest Contentful Paint ）</strong>：LCP 指标代表的是<strong>视窗最大可见图片或者文本块的渲染时间</strong>。 （可以帮助我们捕获更多的首次渲染之后的加载性能，但这项指标过于复杂，而且很难解释，也经常出错，没办法确定主要内容什么时候加载完。）</p>\\n</li>\\n<li>\\n<p><strong>长任务（Long Task）</strong>：当一个任务执行时间超过 50ms 时消耗到的任务 （50ms 阈值是从 RAIL 模型总结出来的结论，这个是 google 研究用户感知得出的结论，类似用户的感知/耐心的阈值，超过这个阈值的任务，用户会感知到页面的卡顿）</p>\\n</li>\\n<li>\\n<p><strong>TTI （Time To Internative）</strong>：从页面开始到它的主要子资源加载到能够快速地响应用户输入的时间。（没有耗时长任务）</p>\\n</li>\\n<li>\\n<p><strong>首次输入延时 FID （first Input Delay）</strong>：从用户第一次与页面交互到浏览器实际能够开始处理事件的时间。（点击，输入，按键） <img src=\\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7dce9ea573604e9b9ed6812a04e6d5fb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"19.jpg\\"></p>\\n</li>\\n<li>\\n<p><strong>总阻塞时间 TBT（total blocking time ）</strong>： 衡量从 FCP 到 TTI 之间主线程被阻塞时长的总和。</p>\\n</li>\\n</ol>\\n<p><img src=\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb39066d4c8747e388da89780a314a05~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"20.jpg\\"></p>\\n<p><img src=\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48348e5f687743538ab9752802469f7b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"21.jpg\\"></p>\\n<ol start=\\"9\\">\\n<li>\\n<p><strong>DCL （DOMContentLoaded）</strong>：当 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，无需等待样式，图像和子框架的完成加载。</p>\\n</li>\\n<li>\\n<p><strong>L（onLoaded）</strong>：当依赖的资源，全部加载完毕之后才会触发</p>\\n</li>\\n<li>\\n<p><strong>CLS(Cumulative Layout Shift)</strong>: 是所有布局偏移分数的汇总，凡是在页面完整生命周期内预料之外的布局偏移都包括。布局偏移发生在任意时间，当一个可见元素改变了它的位置，从一个渲染帧到下一个</p>\\n</li>\\n</ol>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7b36aead632469da1e7a8e648152724~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"webvitals02.jpg\\"></p>\\n<blockquote>\\n<p>思考 ==<strong><a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fblog.csdn.net%2Fzhw0596%2Farticle%2Fdetails%2F87900292\\" title=\\"https://blog.csdn.net/zhw0596/article/details/87900292\\" target=\\"_blank\\" rel=\\"noreferrer\\">$.ready 和 window.onLoad 有什么区别？</a></strong>==</p>\\n</blockquote>\\n<p>上面介绍了 11 种性能指标 大家没必要搞懂每一个指标的定义 我们来看看我们需要关注的<strong>核心的几个性能指标</strong></p>\\n<h3 id=\\"google-web-vitals-使用者体验量化\\" tabindex=\\"-1\\"><a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F149662237\\" title=\\"https://zhuanlan.zhihu.com/p/149662237\\" target=\\"_blank\\" rel=\\"noreferrer\\">Google Web Vitals - 使用者体验量化</a> <a class=\\"header-anchor\\" href=\\"#google-web-vitals-使用者体验量化\\" aria-label=\\"Permalink to &quot;[Google Web Vitals - 使用者体验量化](https://link.juejin.cn/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F149662237 &quot;https://zhuanlan.zhihu.com/p/149662237&quot;)&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>web-vitals: Google 于 2020 年 5 年 5 日提出了新的使用者体验量化方式，推出 Web Vitals 是简化这个学习的曲线，大家只要观注 Web Vitals 指标表现即可；</p>\\n<p><strong>web-vitals 集成了 5 个指标的 api,核心指标有 3 个；</strong></p>\\n<ul>\\n<li><strong>LCP</strong> 显示最大内容元素所需时间 (衡量网站初次载入速度)</li>\\n<li><strong>FID</strong> 首次输入延迟时间 (衡量网站互动顺畅程度)</li>\\n<li><strong>CLS</strong> 累计版面配置移转 (衡量网页元件视觉稳定性)</li>\\n</ul>\\n<p><img src=\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ebffac1d1464e78a4f73a2b3063662c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"webvitals04.jpg\\"></p>\\n<div class=\\"language-js vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;</span><span style=\\"color: #85E89D\\">script</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #B392F0\\">type</span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #9ECBFF\\">&quot;module&quot;</span><span style=\\"color: #E1E4E8\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    import {getCLS, getFID,getFCP,getTTFB, getLCP} from &#39;https://unpkg.com/web-vitals?module&#39;;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    getCLS(console.log);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    getFID(console.log);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    getLCP(console.log);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    getFCP(console.log);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    getTTFB(console.log);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">&lt;/</span><span style=\\"color: #85E89D\\">script</span><span style=\\"color: #E1E4E8\\">&gt;</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;</span><span style=\\"color: #22863A\\">script</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6F42C1\\">type</span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #032F62\\">&quot;module&quot;</span><span style=\\"color: #24292E\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    import {getCLS, getFID,getFCP,getTTFB, getLCP} from &#39;https://unpkg.com/web-vitals?module&#39;;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    getCLS(console.log);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    getFID(console.log);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    getLCP(console.log);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    getFCP(console.log);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    getTTFB(console.log);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">&lt;/</span><span style=\\"color: #22863A\\">script</span><span style=\\"color: #24292E\\">&gt;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br></div></div><p>我们可以直接引用测定方法 打印出这几个关键指标</p>\\n<p><img src=\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/649e8fdaa25b4102a46326fb9775002f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"lighthouse02.jpg\\"></p>\\n<p>到此为止 我们知道了<code>LCP</code> <code>FID</code> <code>CLS</code> 这三大指标是比较核心的 但是如果我们想知道更多的<strong>性能指标测定方式</strong> 我们该怎么做呢 我们接着看</p>\\n<h3 id=\\"performance-api\\" tabindex=\\"-1\\">Performance API <a class=\\"header-anchor\\" href=\\"#performance-api\\" aria-label=\\"Permalink to &quot;Performance API&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p><code>Performance</code> 是一个浏览器全局对象，提供了一组 API 用于编程式地获取程序在某些节点的性能数据。它包含一组高精度时间定义，以及配套的相关方法。我们可以直接在浏览器控制台打印<code>window.performance</code> 结果如下</p>\\n<div class=\\"language-js vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// 获取 performance 数据</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">var</span><span style=\\"color: #E1E4E8\\"> performance </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// memory 是非标准属性，只在 Chrome 有</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 我有多少内存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    memory: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        usedJSHeapSize:  </span><span style=\\"color: #79B8FF\\">16100000</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #6A737D\\">// JS 对象（包括V8引擎内部对象）占用的内存，一定小于 totalJSHeapSize</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        totalJSHeapSize: </span><span style=\\"color: #79B8FF\\">35100000</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #6A737D\\">// 可使用的内存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        jsHeapSizeLimit: </span><span style=\\"color: #79B8FF\\">793000000</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #6A737D\\">// 内存大小限制</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    },</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    </span><span style=\\"color: #6A737D\\">// 我从哪里来？</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    navigation: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        redirectCount: </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">, </span><span style=\\"color: #6A737D\\">// 如果有重定向的话，页面通过几次重定向跳转而来</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        type: </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">           </span><span style=\\"color: #6A737D\\">// 0   即 TYPE_NAVIGATENEXT 正常进入的页面（非刷新、非重定向等）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">                          </span><span style=\\"color: #6A737D\\">// 1   即 TYPE_RELOAD       通过 window.location.reload() 刷新的页面</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">                          </span><span style=\\"color: #6A737D\\">// 2   即 TYPE_BACK_FORWARD 通过浏览器的前进后退按钮进入的页面（历史记录）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">                          </span><span style=\\"color: #6A737D\\">// 255 即 TYPE_UNDEFINED    非以上方式进入的页面</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">//  核心时间相关</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    timing: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 在同一个浏览器上下文中，前一个网页（与当前页面不一定同域）unload 的时间戳，如果无前一个网页 unload ，则与 fetchStart 值相等</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        navigationStart: </span><span style=\\"color: #79B8FF\\">1441112691935</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        unloadEventStart: </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 和 unloadEventStart 相对应，返回前一个网页 unload 事件绑定的回调函数执行完毕的时间戳</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        unloadEventEnd: </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        redirectStart: </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内部的重定向才算，否则值为 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        redirectEnd: </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        fetchStart: </span><span style=\\"color: #79B8FF\\">1441112692155</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// DNS 域名查询开始的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        domainLookupStart: </span><span style=\\"color: #79B8FF\\">1441112692155</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// DNS 域名查询完成的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        domainLookupEnd: </span><span style=\\"color: #79B8FF\\">1441112692155</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// HTTP（TCP） 开始建立连接的时间，如果是持久连接，则与 fetchStart 值相等</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接开始的时间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        connectStart: </span><span style=\\"color: #79B8FF\\">1441112692155</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接完成的时间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 注意这里握手结束，包括安全连接建立完成、SOCKS 授权通过</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        connectEnd: </span><span style=\\"color: #79B8FF\\">1441112692155</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// HTTPS 连接开始的时间，如果不是安全连接，则值为 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        secureConnectionStart: </span><span style=\\"color: #79B8FF\\">0</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 连接错误重连时，这里显示的也是新建立连接的时间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        requestStart: </span><span style=\\"color: #79B8FF\\">1441112692158</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        responseStart: </span><span style=\\"color: #79B8FF\\">1441112692686</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        responseEnd: </span><span style=\\"color: #79B8FF\\">1441112692687</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        domLoading: </span><span style=\\"color: #79B8FF\\">1441112692690</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 注意只是 DOM 树解析完成，这时候并没有开始加载网页内的资源</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        domInteractive: </span><span style=\\"color: #79B8FF\\">1441112693093</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// DOM 解析完成后，网页内资源加载开始的时间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 在 DOMContentLoaded 事件抛出前发生</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        domContentLoadedEventStart: </span><span style=\\"color: #79B8FF\\">1441112693093</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        domContentLoadedEventEnd: </span><span style=\\"color: #79B8FF\\">1441112693101</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// DOM 树解析完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        domComplete: </span><span style=\\"color: #79B8FF\\">1441112693214</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// load 事件发送给文档，也即 load 回调函数开始执行的时间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 注意如果没有绑定 load 事件，值为 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        loadEventStart: </span><span style=\\"color: #79B8FF\\">1441112693214</span><span style=\\"color: #E1E4E8\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// load 事件的回调函数执行完毕的时间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        loadEventEnd: </span><span style=\\"color: #79B8FF\\">1441112693215</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// 按照字母排序</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// connectEnd: 1441112692155,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// connectStart: 1441112692155,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// domComplete: 1441112693214,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// domContentLoadedEventEnd: 1441112693101,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// domContentLoadedEventStart: 1441112693093,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// domInteractive: 1441112693093,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// domLoading: 1441112692690,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// domainLookupEnd: 1441112692155,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// domainLookupStart: 1441112692155,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// fetchStart: 1441112692155,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// loadEventEnd: 1441112693215,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// loadEventStart: 1441112693214,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// navigationStart: 1441112691935,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// redirectEnd: 0,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// redirectStart: 0,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// requestStart: 1441112692158,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// responseEnd: 1441112692687,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// responseStart: 1441112692686,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// secureConnectionStart: 0,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// unloadEventEnd: 0,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">        </span><span style=\\"color: #6A737D\\">// unloadEventStart: 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #6A737D\\">// 获取 performance 数据</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">var</span><span style=\\"color: #24292E\\"> performance </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// memory 是非标准属性，只在 Chrome 有</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 我有多少内存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    memory: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        usedJSHeapSize:  </span><span style=\\"color: #005CC5\\">16100000</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #6A737D\\">// JS 对象（包括V8引擎内部对象）占用的内存，一定小于 totalJSHeapSize</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        totalJSHeapSize: </span><span style=\\"color: #005CC5\\">35100000</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #6A737D\\">// 可使用的内存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        jsHeapSizeLimit: </span><span style=\\"color: #005CC5\\">793000000</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #6A737D\\">// 内存大小限制</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    },</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    </span><span style=\\"color: #6A737D\\">// 我从哪里来？</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    navigation: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        redirectCount: </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">, </span><span style=\\"color: #6A737D\\">// 如果有重定向的话，页面通过几次重定向跳转而来</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        type: </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">           </span><span style=\\"color: #6A737D\\">// 0   即 TYPE_NAVIGATENEXT 正常进入的页面（非刷新、非重定向等）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">                          </span><span style=\\"color: #6A737D\\">// 1   即 TYPE_RELOAD       通过 window.location.reload() 刷新的页面</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">                          </span><span style=\\"color: #6A737D\\">// 2   即 TYPE_BACK_FORWARD 通过浏览器的前进后退按钮进入的页面（历史记录）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">                          </span><span style=\\"color: #6A737D\\">// 255 即 TYPE_UNDEFINED    非以上方式进入的页面</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6A737D\\">//  核心时间相关</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    timing: {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 在同一个浏览器上下文中，前一个网页（与当前页面不一定同域）unload 的时间戳，如果无前一个网页 unload ，则与 fetchStart 值相等</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        navigationStart: </span><span style=\\"color: #005CC5\\">1441112691935</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        unloadEventStart: </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 和 unloadEventStart 相对应，返回前一个网页 unload 事件绑定的回调函数执行完毕的时间戳</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        unloadEventEnd: </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        redirectStart: </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内部的重定向才算，否则值为 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        redirectEnd: </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        fetchStart: </span><span style=\\"color: #005CC5\\">1441112692155</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// DNS 域名查询开始的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        domainLookupStart: </span><span style=\\"color: #005CC5\\">1441112692155</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// DNS 域名查询完成的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        domainLookupEnd: </span><span style=\\"color: #005CC5\\">1441112692155</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// HTTP（TCP） 开始建立连接的时间，如果是持久连接，则与 fetchStart 值相等</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接开始的时间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        connectStart: </span><span style=\\"color: #005CC5\\">1441112692155</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接完成的时间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 注意这里握手结束，包括安全连接建立完成、SOCKS 授权通过</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        connectEnd: </span><span style=\\"color: #005CC5\\">1441112692155</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// HTTPS 连接开始的时间，如果不是安全连接，则值为 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        secureConnectionStart: </span><span style=\\"color: #005CC5\\">0</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 连接错误重连时，这里显示的也是新建立连接的时间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        requestStart: </span><span style=\\"color: #005CC5\\">1441112692158</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        responseStart: </span><span style=\\"color: #005CC5\\">1441112692686</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        responseEnd: </span><span style=\\"color: #005CC5\\">1441112692687</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        domLoading: </span><span style=\\"color: #005CC5\\">1441112692690</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 注意只是 DOM 树解析完成，这时候并没有开始加载网页内的资源</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        domInteractive: </span><span style=\\"color: #005CC5\\">1441112693093</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// DOM 解析完成后，网页内资源加载开始的时间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 在 DOMContentLoaded 事件抛出前发生</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        domContentLoadedEventStart: </span><span style=\\"color: #005CC5\\">1441112693093</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        domContentLoadedEventEnd: </span><span style=\\"color: #005CC5\\">1441112693101</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// DOM 树解析完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        domComplete: </span><span style=\\"color: #005CC5\\">1441112693214</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// load 事件发送给文档，也即 load 回调函数开始执行的时间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 注意如果没有绑定 load 事件，值为 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        loadEventStart: </span><span style=\\"color: #005CC5\\">1441112693214</span><span style=\\"color: #24292E\\">,</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// load 事件的回调函数执行完毕的时间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        loadEventEnd: </span><span style=\\"color: #005CC5\\">1441112693215</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// 按照字母排序</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// connectEnd: 1441112692155,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// connectStart: 1441112692155,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// domComplete: 1441112693214,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// domContentLoadedEventEnd: 1441112693101,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// domContentLoadedEventStart: 1441112693093,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// domInteractive: 1441112693093,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// domLoading: 1441112692690,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// domainLookupEnd: 1441112692155,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// domainLookupStart: 1441112692155,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// fetchStart: 1441112692155,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// loadEventEnd: 1441112693215,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// loadEventStart: 1441112693214,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// navigationStart: 1441112691935,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// redirectEnd: 0,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// redirectStart: 0,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// requestStart: 1441112692158,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// responseEnd: 1441112692687,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// responseStart: 1441112692686,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// secureConnectionStart: 0,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// unloadEventEnd: 0,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">        </span><span style=\\"color: #6A737D\\">// unloadEventStart: 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br><span class=\\"line-number\\">18</span><br><span class=\\"line-number\\">19</span><br><span class=\\"line-number\\">20</span><br><span class=\\"line-number\\">21</span><br><span class=\\"line-number\\">22</span><br><span class=\\"line-number\\">23</span><br><span class=\\"line-number\\">24</span><br><span class=\\"line-number\\">25</span><br><span class=\\"line-number\\">26</span><br><span class=\\"line-number\\">27</span><br><span class=\\"line-number\\">28</span><br><span class=\\"line-number\\">29</span><br><span class=\\"line-number\\">30</span><br><span class=\\"line-number\\">31</span><br><span class=\\"line-number\\">32</span><br><span class=\\"line-number\\">33</span><br><span class=\\"line-number\\">34</span><br><span class=\\"line-number\\">35</span><br><span class=\\"line-number\\">36</span><br><span class=\\"line-number\\">37</span><br><span class=\\"line-number\\">38</span><br><span class=\\"line-number\\">39</span><br><span class=\\"line-number\\">40</span><br><span class=\\"line-number\\">41</span><br><span class=\\"line-number\\">42</span><br><span class=\\"line-number\\">43</span><br><span class=\\"line-number\\">44</span><br><span class=\\"line-number\\">45</span><br><span class=\\"line-number\\">46</span><br><span class=\\"line-number\\">47</span><br><span class=\\"line-number\\">48</span><br><span class=\\"line-number\\">49</span><br><span class=\\"line-number\\">50</span><br><span class=\\"line-number\\">51</span><br><span class=\\"line-number\\">52</span><br><span class=\\"line-number\\">53</span><br><span class=\\"line-number\\">54</span><br><span class=\\"line-number\\">55</span><br><span class=\\"line-number\\">56</span><br><span class=\\"line-number\\">57</span><br><span class=\\"line-number\\">58</span><br><span class=\\"line-number\\">59</span><br><span class=\\"line-number\\">60</span><br><span class=\\"line-number\\">61</span><br><span class=\\"line-number\\">62</span><br><span class=\\"line-number\\">63</span><br><span class=\\"line-number\\">64</span><br><span class=\\"line-number\\">65</span><br><span class=\\"line-number\\">66</span><br><span class=\\"line-number\\">67</span><br><span class=\\"line-number\\">68</span><br><span class=\\"line-number\\">69</span><br><span class=\\"line-number\\">70</span><br><span class=\\"line-number\\">71</span><br><span class=\\"line-number\\">72</span><br><span class=\\"line-number\\">73</span><br><span class=\\"line-number\\">74</span><br><span class=\\"line-number\\">75</span><br><span class=\\"line-number\\">76</span><br><span class=\\"line-number\\">77</span><br><span class=\\"line-number\\">78</span><br><span class=\\"line-number\\">79</span><br><span class=\\"line-number\\">80</span><br><span class=\\"line-number\\">81</span><br><span class=\\"line-number\\">82</span><br><span class=\\"line-number\\">83</span><br><span class=\\"line-number\\">84</span><br><span class=\\"line-number\\">85</span><br><span class=\\"line-number\\">86</span><br><span class=\\"line-number\\">87</span><br><span class=\\"line-number\\">88</span><br><span class=\\"line-number\\">89</span><br><span class=\\"line-number\\">90</span><br><span class=\\"line-number\\">91</span><br><span class=\\"line-number\\">92</span><br><span class=\\"line-number\\">93</span><br><span class=\\"line-number\\">94</span><br><span class=\\"line-number\\">95</span><br><span class=\\"line-number\\">96</span><br><span class=\\"line-number\\">97</span><br><span class=\\"line-number\\">98</span><br><span class=\\"line-number\\">99</span><br><span class=\\"line-number\\">100</span><br><span class=\\"line-number\\">101</span><br><span class=\\"line-number\\">102</span><br><span class=\\"line-number\\">103</span><br><span class=\\"line-number\\">104</span><br><span class=\\"line-number\\">105</span><br><span class=\\"line-number\\">106</span><br><span class=\\"line-number\\">107</span><br><span class=\\"line-number\\">108</span><br><span class=\\"line-number\\">109</span><br><span class=\\"line-number\\">110</span><br><span class=\\"line-number\\">111</span><br><span class=\\"line-number\\">112</span><br><span class=\\"line-number\\">113</span><br><span class=\\"line-number\\">114</span><br></div></div><p><img src=\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38852de321a943fd8507c79e405390cc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"22.jpg\\"></p>\\n<p>第一次看这么多的属性，大家心里一定和这张图片一样懵逼，这是什么鬼？</p>\\n<p>咱们不慌 先来一张图解释下页面加载的几个<strong>关键时刻</strong></p>\\n<p><img src=\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9af6c24b2a34f75970aaaad14098d98~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"01.jpg\\"></p>\\n<h4 id=\\"使用-performance-timing-信息简单计算出网页性能数据\\" tabindex=\\"-1\\">使用 <code>performance.timing</code> 信息简单计算出<strong>网页性能数据</strong> <a class=\\"header-anchor\\" href=\\"#使用-performance-timing-信息简单计算出网页性能数据\\" aria-label=\\"Permalink to &quot;使用 `performance.timing` 信息简单计算出**网页性能数据**&quot;\\">&ZeroWidthSpace;</a></h4>\\n<ul>\\n<li>\\n<p>FP：responseStart - navigationStart</p>\\n</li>\\n<li>\\n<p>重定向耗时：redirectEnd - redirectStart</p>\\n</li>\\n<li>\\n<p>DNS 查询耗时：domainLookupEnd - domainLookupStart</p>\\n</li>\\n<li>\\n<p>TCP 链接耗时：connectEnd - connectStart</p>\\n</li>\\n<li>\\n<p>HTTP 请求耗时：responseEnd - responseStart</p>\\n</li>\\n<li>\\n<p>解析 dom 树耗时：domComplete - domInteractive</p>\\n</li>\\n<li>\\n<p>DOM ready 时间：domContentLoadedEventEnd - navigationStart</p>\\n</li>\\n<li>\\n<p>onload：loadEventEnd - navigationStart</p>\\n</li>\\n</ul>\\n<h4 id=\\"使用performance-getentries-获取所有资源请求的时间数据\\" tabindex=\\"-1\\">使用<code>performance.getEntries()</code>获取所有资源请求的时间数据 <a class=\\"header-anchor\\" href=\\"#使用performance-getentries-获取所有资源请求的时间数据\\" aria-label=\\"Permalink to &quot;使用`performance.getEntries()`获取所有资源请求的时间数据&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>获取所有资源请求的时间数据,这个函数返回一个按 startTime 排序的对象数组</p>\\n<p>我们直接面板输出一下。 <img src=\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bea2e534d5a14550ae903af1b7cd578c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"11.png\\"></p>\\n<h4 id=\\"使用performance-getentriesbyname-name-获取特定名称的时间数据\\" tabindex=\\"-1\\">使用<code>performance.getEntriesByName(name)</code>获取特定名称的时间数据 <a class=\\"header-anchor\\" href=\\"#使用performance-getentriesbyname-name-获取特定名称的时间数据\\" aria-label=\\"Permalink to &quot;使用`performance.getEntriesByName(name)`获取特定名称的时间数据&quot;\\">&ZeroWidthSpace;</a></h4>\\n<blockquote>\\n<p>比如面试过程非常喜欢问的 FCP 首屏时间如何计算呢</p>\\n</blockquote>\\n<p>我们可以通过 <code>getEntriesByName(name)</code>提供的 api 去获取 FCP 数据</p>\\n<p>FCP = performance.getEntriesByName(&quot;first-contentful-paint&quot;)[0].startTime - navigationStart</p>\\n<h4 id=\\"使用performance-now-精确计算程序执行时间\\" tabindex=\\"-1\\">使用<code>performance.now()</code>精确计算程序执行时间 <a class=\\"header-anchor\\" href=\\"#使用performance-now-精确计算程序执行时间\\" aria-label=\\"Permalink to &quot;使用`performance.now()`精确计算程序执行时间&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p><code>performance.now</code>方法返回当前网页自从<code>performance.timing.navigationStart</code>到当前时间之间的<strong>微秒数</strong>（毫秒的千分之一）。也就是说，它的精度可以达到 100 万分之一秒。</p>\\n<p>那么我们可以通过两次调用 最后计算出 js 某种操作的精确耗时</p>\\n<div class=\\"language-js vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">start</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> performance.</span><span style=\\"color: #B392F0\\">now</span><span style=\\"color: #E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #B392F0\\">doTasks</span><span style=\\"color: #E1E4E8\\">(); </span><span style=\\"color: #6A737D\\">// 这里是耗时操作</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F97583\\">const</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">end</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">=</span><span style=\\"color: #E1E4E8\\"> performance.</span><span style=\\"color: #B392F0\\">now</span><span style=\\"color: #E1E4E8\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #E1E4E8\\">console.</span><span style=\\"color: #B392F0\\">log</span><span style=\\"color: #E1E4E8\\">(</span><span style=\\"color: #9ECBFF\\">&quot;耗时：&quot;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">+</span><span style=\\"color: #E1E4E8\\"> (end </span><span style=\\"color: #F97583\\">-</span><span style=\\"color: #E1E4E8\\"> start) </span><span style=\\"color: #F97583\\">+</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&quot;微秒。&quot;</span><span style=\\"color: #E1E4E8\\">);</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">start</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> performance.</span><span style=\\"color: #6F42C1\\">now</span><span style=\\"color: #24292E\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #6F42C1\\">doTasks</span><span style=\\"color: #24292E\\">(); </span><span style=\\"color: #6A737D\\">// 这里是耗时操作</span></span>\\n<span class=\\"line\\"><span style=\\"color: #D73A49\\">const</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">end</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">=</span><span style=\\"color: #24292E\\"> performance.</span><span style=\\"color: #6F42C1\\">now</span><span style=\\"color: #24292E\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292E\\">console.</span><span style=\\"color: #6F42C1\\">log</span><span style=\\"color: #24292E\\">(</span><span style=\\"color: #032F62\\">&quot;耗时：&quot;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">+</span><span style=\\"color: #24292E\\"> (end </span><span style=\\"color: #D73A49\\">-</span><span style=\\"color: #24292E\\"> start) </span><span style=\\"color: #D73A49\\">+</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&quot;微秒。&quot;</span><span style=\\"color: #24292E\\">);</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br></div></div><h4 id=\\"使用performance-mark以及performance-measure手动测量性能\\" tabindex=\\"-1\\">使用<code>performance.mark</code>以及<code>performance.measure</code>手动测量性能 <a class=\\"header-anchor\\" href=\\"#使用performance-mark以及performance-measure手动测量性能\\" aria-label=\\"Permalink to &quot;使用`performance.mark`以及`performance.measure`手动测量性能&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p>这块具体的代码示例 建议大家可以直接访问<a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FPerformance%2Fmark\\" title=\\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark\\" target=\\"_blank\\" rel=\\"noreferrer\\">这里</a>去查看</p>\\n<p>咱们如果想<strong>自定义</strong>搜集性能数据指标 做前端的<strong>性能监控系统</strong> 那么这两个 api 是非常给力的</p>\\n<p>ok 上面介绍了一系列的代码层面去搜集和测定咱们前端性能指标的方法 那有一些同学可能就会问 可不可以不要看这么多的计算公式 头都大了 有木有那种一看就明白 <strong>更简单</strong>的方案 那么接下来介绍的就是使用<strong>工具</strong>在本地如何分析自己网站的性能</p>\\n<h3 id=\\"google-performance-面板\\" tabindex=\\"-1\\">Google performance 面板 <a class=\\"header-anchor\\" href=\\"#google-performance-面板\\" aria-label=\\"Permalink to &quot;Google performance 面板&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>哈哈 大家别慌 虽然这个也叫 performance 但是这里指的是咱们浏览器的<strong>performance 面板工具</strong></p>\\n<h4 id=\\"整体结构\\" tabindex=\\"-1\\">整体结构 <a class=\\"header-anchor\\" href=\\"#整体结构\\" aria-label=\\"Permalink to &quot;整体结构&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p><img src=\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/439dfe1cfc4144ccbdf98a06a135f764~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"WX20220107-150213.png\\"></p>\\n<p>我们第一眼可能会被这些花花绿绿的色块吓到 咱们别怕 一点点带大家分析</p>\\n<p>从上到下分别为 4 个区域</p>\\n<p>1：工具条，包含录制，刷新页面分析，清除结果等一系列操作</p>\\n<p>2：总览图，高度概括随时间线的变动，包括 FPS，CPU，NET</p>\\n<p>3：火焰图，从不同的角度分析框选区域 。例如：Network，Frames, Interactions, Main 等</p>\\n<p>4：总体报告：精确到毫秒级的分析，以及按调用层级，事件分类的整理</p>\\n<h4 id=\\"工具条区域\\" tabindex=\\"-1\\">工具条区域 <a class=\\"header-anchor\\" href=\\"#工具条区域\\" aria-label=\\"Permalink to &quot;工具条区域&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p><img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/895daed773974d90a7d9f3e596aaf138~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"24.png\\"></p>\\n<p>上面红框从左到右 咱们把鼠标放上去可以看到几个英文单词</p>\\n<ul>\\n<li>record 记录浏览器运行中的某一个时间段的表现</li>\\n<li>reload page 用于记录网页从最开始的加载到所有资源加载完成这个过程的性能表现。点击之后，页面会自动重新加载</li>\\n<li>Screenshots 屏幕快照，显示动态加载的页面图片</li>\\n<li>memory 查看多种内存占用变化</li>\\n</ul>\\n<p>现在我们可以打开任意一个网站 点击第二个按钮 reload page 开始分析</p>\\n<h4 id=\\"总览区域\\" tabindex=\\"-1\\">总览区域 <a class=\\"header-anchor\\" href=\\"#总览区域\\" aria-label=\\"Permalink to &quot;总览区域&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p><img src=\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/321864679a78400b8d2d8763e7cac40e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"WX20220107-150848.png\\"></p>\\n<p><strong>1. FPS</strong>: 全称 Frames Per Second，表示每秒传输帧数，是速度单位，用来分析动画的一个主要性能指标。1fps = 0.304 meter/sec(米/秒)。如上图所示，绿色竖线越高，FPS 越高。 红色表示长时间帧，可能出现卡顿掉帧。</p>\\n<ul>\\n<li><strong>不同帧的体验</strong>：</li>\\n<li>帧率能够达到 50 ～ 60 FPS 的动画将会相当流畅，让人倍感舒适；</li>\\n<li>帧率在 30 ～ 50 FPS 之间的动画，因各人敏感程度不同，舒适度因人而异；</li>\\n<li>帧率在 30 FPS 以下的动画，让人感觉到明显的卡顿和不适感； 帧率波动很大的动画，亦会使人感觉到卡顿。</li>\\n</ul>\\n<p><strong>2. CPU</strong>：CPU 资源。此面积图指示消耗 CPU 资源的事件类型。 图中颜色分别为（与<strong>总体报告</strong>中的 Summary 颜色数据表示一致）：</p>\\n<ul>\\n<li>蓝色(Loading)：表示网络通信和 HTML 解析时间。</li>\\n<li>黄色(Scripting)：表示 JavaScript 执行时间。</li>\\n<li>紫色(Rendering)：表示样式计算和布局（重排）时间。</li>\\n<li>绿色(Painting)：表示重绘时间。</li>\\n<li>灰色(other)：表示其它事件花费的时间。</li>\\n<li>白色(Idle)：表示空闲时间。</li>\\n</ul>\\n<p><strong>3. NET</strong>：每条彩色横杠表示一种资源。横杠越长，检索资源所需的时间越长。 每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间）</p>\\n<h4 id=\\"火焰图\\" tabindex=\\"-1\\">火焰图 <a class=\\"header-anchor\\" href=\\"#火焰图\\" aria-label=\\"Permalink to &quot;火焰图&quot;\\">&ZeroWidthSpace;</a></h4>\\n<p><img src=\\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d3be3011d1f43b1bb4576a7053d8f1d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"WX20220107-151346.png\\"></p>\\n<ol>\\n<li>\\n<p>Network：表示每个服务器资源的加载情况。</p>\\n</li>\\n<li>\\n<p>Frames：表示每幅帧的运行情况，这里可以和上面总览的 FPS 结合来看</p>\\n</li>\\n<li>\\n<p>Timings：</p>\\n</li>\\n</ol>\\n<ul>\\n<li>DCL（DOMContentLoaded）表示 HTML 文档加载完成事件。当初始 HTML 文档完全加载并解析之后触发，无需等待样式、图片、子 frame 结束。作为明显的对比，load 事件是当个页面完全被加载时才触发。</li>\\n<li>FP（First Paint）首屏绘制，页面刚开始渲染的时间。</li>\\n<li>FCP（First ContentfulPaint）首屏内容绘制，首次绘制任何文本，图像，非空白 canvas 或 SVG 的时间点。</li>\\n<li>FMP（First MeaningfulPaint）首屏有意义的内容绘制，这个“有意义”没有权威的规定，本质上是通过一种算法来猜测某个时间点可能是 FMP。有的理解为是最大元素绘制的时间，即同 LCP（Largest ContentfulPaint）。其中 FP、FCP、FMP 是同一条虚线，三者时间不一致。比如首次渲染过后，有可能出现 JS 阻塞，这种情况下 FCP 就会大于 FP。</li>\\n<li>L（Onload）页面所有资源加载完成事件。</li>\\n<li>LCP（Largest Contentful Paint ）最大内容绘制，页面上尺寸最大的元素绘制时间。</li>\\n</ul>\\n<blockquote>\\n<p>细心的同学可能已经发现了 这里的指标就是对应我们前面提到的<strong>性能指标</strong> 所以可以直接在 performance 面板来看到网页的几个核心指标的数值</p>\\n</blockquote>\\n<ol start=\\"4\\">\\n<li>\\n<p>Main：记录了渲染进程中主线程的执行记录，点击 main 可以看到某个任务执行的具体情况 是我们<strong>分析具体函数耗时</strong>最常看的面板 <img src=\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79cc964834f54328976eaa08cdd6900f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"WX20220107-153209.png\\"></p>\\n<p>首先，面板中会有很多的 Task，如果是耗时长的 Task，其右上角会<strong>标红</strong>，这个时候，我们可以选中标红的 Task，然后放大，看其具体的耗时点。</p>\\n<p>放大后，这里可以看到都在做哪些操作，哪些函数耗时了多少,这里代码有压缩，看到的是压缩后的函数名。然后我们点击一下某个函数，在面板最下面，就会出现代码的信息，是哪个函数，耗时多少，在哪个文件上的第几行等。</p>\\n<p>这样我们就很方便地<strong>定位到耗时函数</strong> 然后去针对性优化</p>\\n</li>\\n<li>\\n<p>Compositor 合成线程的执行记录，用来记录 html 绘制阶段 (Paint)结束后的图层合成操作</p>\\n</li>\\n<li>\\n<p>Raster 光栅化线程池，用来让 GPU 执行光栅化的任务</p>\\n</li>\\n<li>\\n<p>GPU 可以直观看到何时启动 GPU 加速</p>\\n</li>\\n<li>\\n<p>Memory 选项，在勾选后，就会显示折线图 <img src=\\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/540a4ebc8ab14b5193a162eef4456da0~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"WX20220107-154730.png\\"> 通过该图我们可以看到页面中的内存使用的情况，比如 JS Heap(堆)，如果曲线一直在增长，则说明存在内存泄露，如果相当长的一段时间，内存曲线都是没有下降的，这里是有发生内存泄露的可能的。</p>\\n</li>\\n</ol>\\n<p>其实在火焰图这块 我们主要关心上诉的 <strong>1234</strong> 核心的点就够了 另外如果想分析<strong>内存泄漏</strong> 可以勾选 <strong>memory</strong> 选项</p>\\n<h4 id=\\"总体报告\\" tabindex=\\"-1\\">总体报告 <a class=\\"header-anchor\\" href=\\"#总体报告\\" aria-label=\\"Permalink to &quot;总体报告&quot;\\">&ZeroWidthSpace;</a></h4>\\n<h5 id=\\"summary-表示各指标时间占用统计报表\\" tabindex=\\"-1\\">Summary：表示各指标时间占用统计报表 <a class=\\"header-anchor\\" href=\\"#summary-表示各指标时间占用统计报表\\" aria-label=\\"Permalink to &quot;Summary：表示各指标时间占用统计报表&quot;\\">&ZeroWidthSpace;</a></h5>\\n<p><img src=\\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c018bec8dde14b3f86f06742f0913144~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?\\" alt=\\"WX20220107-155126.png\\"></p>\\n<p>这里的颜色代表的意思和<strong>总览区域里面的 cpu</strong>颜色一样的意思 大家不清楚的可以往上翻一下</p>\\n<blockquote>\\n<p>这里一般来说，需要着重关注的有两个：一是黄色的区域，代表脚本执行时间，另一个是紫色的渲染时间</p>\\n</blockquote>\\n<p>1.Loading 事件</p>\\n<p>| 内容 | 说明 |\\n|</p>\\n","tags":["性能优化"],"userName":"大湿兄"},{"link":"article/代理模式","excerpt":"","tags":["js","面试题","设计模式"],"userName":"大湿兄"},{"link":"article/发布订阅模式","excerpt":"","tags":["js","面试题","设计模式"],"userName":"大湿兄"},{"link":"article/策略模式","excerpt":"","tags":["js","面试题","设计模式"],"userName":"大湿兄"},{"link":"article/装饰器模式","excerpt":"","tags":["js","面试题","设计模式"],"userName":"大湿兄"},{"link":"article/观察者模式","excerpt":"","tags":["js","面试题","设计模式"],"userName":"大湿兄"},{"link":"article/适配器模式","excerpt":"","tags":["js","面试题","设计模式"],"userName":"大湿兄"},{"link":"article/2023高频前端面试题之CSS篇","excerpt":"<h1 id=\\"_2022高频前端面试题——css篇\\" tabindex=\\"-1\\">2022高频前端面试题——CSS篇 <a class=\\"header-anchor\\" href=\\"#_2022高频前端面试题——css篇\\" aria-label=\\"Permalink to &quot;2022高频前端面试题——CSS篇&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>1. px 和 em 的区别</p>\\n","tags":["面试题","css","面试题集合"],"userName":"大湿兄"},{"link":"article/2023高频前端面试题之HTML篇","excerpt":"<h1 id=\\"_2022高频前端面试题——html篇\\" tabindex=\\"-1\\">2022高频前端面试题——HTML篇 <a class=\\"header-anchor\\" href=\\"#_2022高频前端面试题——html篇\\" aria-label=\\"Permalink to &quot;2022高频前端面试题——HTML篇&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>1. 什么是 <em>DOCTYPE</em>， 有何作用？</p>\\n","tags":["面试题","html","面试题集合"],"userName":"大湿兄"},{"link":"article/30道Vue 面试题","excerpt":"<h1 id=\\"_30-道-vue-面试题\\" tabindex=\\"-1\\">30 道 Vue 面试题 <a class=\\"header-anchor\\" href=\\"#_30-道-vue-面试题\\" aria-label=\\"Permalink to &quot;30 道 Vue 面试题&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>1、说说你对 SPA 单页面的理解，它的优缺点分别是什么？</p>\\n","tags":["面试题","Vue"],"userName":"大湿兄"},{"link":"article/37个常见Vue面试题","excerpt":"<h1 id=\\"三十七个常见vue面试题\\" tabindex=\\"-1\\">三十七个常见Vue面试题 <a class=\\"header-anchor\\" href=\\"#三十七个常见vue面试题\\" aria-label=\\"Permalink to &quot;三十七个常见Vue面试题&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>一、谈谈你对MVVM的理解？</p>\\n","tags":["面试题","Vue"],"userName":"大湿兄"},{"link":"article/前端面试万字总结（浏览器网络篇）","excerpt":"<h1 id=\\"面试万字总结-浏览器网络篇\\" tabindex=\\"-1\\">面试万字总结（浏览器网络篇） <a class=\\"header-anchor\\" href=\\"#面试万字总结-浏览器网络篇\\" aria-label=\\"Permalink to &quot;面试万字总结（浏览器网络篇）&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>1. GET和POST的请求的区别</p>\\n","tags":["面试题","浏览器","计算机网络"],"userName":"大湿兄"},{"link":"article/字节前端面试题","excerpt":"","tags":["面试题"],"userName":"大湿兄"},{"link":"article/常见的前端算法题","excerpt":"","tags":["面试题","算法题","js"],"userName":"大湿兄"},{"link":"article/高级前端面试(上)","excerpt":"<h1 id=\\"中级前端面试-上\\" tabindex=\\"-1\\">中级前端面试(上) <a class=\\"header-anchor\\" href=\\"#中级前端面试-上\\" aria-label=\\"Permalink to &quot;中级前端面试(上)&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>CSS</p>\\n","tags":["面试题"],"userName":"大湿兄"},{"link":"article/高级前端面试(下)","excerpt":"<h1 id=\\"中级前端面试-下\\" tabindex=\\"-1\\">中级前端面试(下) <a class=\\"header-anchor\\" href=\\"#中级前端面试-下\\" aria-label=\\"Permalink to &quot;中级前端面试(下)&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>Hybrid</p>\\n","tags":["面试题"],"userName":"大湿兄"},{"link":"article/高级前端面试(中)","excerpt":"<h1 id=\\"中级前端面试-中\\" tabindex=\\"-1\\">中级前端面试(中) <a class=\\"header-anchor\\" href=\\"#中级前端面试-中\\" aria-label=\\"Permalink to &quot;中级前端面试(中)&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><p>进阶知识</p>\\n","tags":["面试题"],"userName":"大湿兄"},{"link":"article/高频前端面试题合集之JavaScript篇","excerpt":"<h1 id=\\"高频前端面试题合集之javascript篇\\" tabindex=\\"-1\\">高频前端面试题合集之JavaScript篇 <a class=\\"header-anchor\\" href=\\"#高频前端面试题合集之javascript篇\\" aria-label=\\"Permalink to &quot;高频前端面试题合集之JavaScript篇&quot;\\">&ZeroWidthSpace;</a></h1>\\n\\n<ClientOnly><ArticleMetadata /></ClientOnly><h3 id=\\"_1-根据下面-es6-构造函数的书写方式-要求写出-es5-的\\" tabindex=\\"-1\\">1. 根据下面 <em>ES6</em> 构造函数的书写方式，要求写出 <em>ES5</em> 的 <a class=\\"header-anchor\\" href=\\"#_1-根据下面-es6-构造函数的书写方式-要求写出-es5-的\\" aria-label=\\"Permalink to &quot;1\\\\. 根据下面 _ES6_ 构造函数的书写方式，要求写出 _ES5_ 的&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">class Example { </span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  constructor(name) { </span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    this.name = name;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  init() { </span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    const fun = () =&gt; { console.log(this.name) }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    fun(); </span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">  } </span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">const e = new Example(&#39;Hello&#39;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">e.init();</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">class Example { </span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  constructor(name) { </span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    this.name = name;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  init() { </span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    const fun = () =&gt; { console.log(this.name) }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    fun(); </span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">  } </span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">const e = new Example(&#39;Hello&#39;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">e.init();</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br></div></div><blockquote>\\n<p>参考答案：</p>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function Example(name) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      &#39;use strict&#39;;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      if (!new.target) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">           throw new TypeError(&#39;Class constructor cannot be invoked without new&#39;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      this.name = name;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">Object.defineProperty(Example.prototype, &#39;init&#39;, {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      enumerable: false,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      value: function () {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">           &#39;use strict&#39;;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">           if (new.target) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">               throw new TypeError(&#39;init is not a constructor&#39;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">           }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">           var fun = function () {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">               console.log(this.name);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">           }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">           fun.call(this);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">})</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">function Example(name) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      &#39;use strict&#39;;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      if (!new.target) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">           throw new TypeError(&#39;Class constructor cannot be invoked without new&#39;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      this.name = name;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">Object.defineProperty(Example.prototype, &#39;init&#39;, {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      enumerable: false,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      value: function () {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">           &#39;use strict&#39;;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">           if (new.target) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">               throw new TypeError(&#39;init is not a constructor&#39;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">           }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">           var fun = function () {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">               console.log(this.name);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">           }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">           fun.call(this);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">})</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br><span class=\\"line-number\\">18</span><br><span class=\\"line-number\\">19</span><br><span class=\\"line-number\\">20</span><br><span class=\\"line-number\\">21</span><br></div></div></blockquote>\\n<blockquote>\\n<p>解析：</p>\\n<p>此题的关键在于是否清楚 <em>ES6</em> 的 <em>class</em> 和普通构造函数的区别，记住它们有以下区别，就不会有遗漏：</p>\\n<ol>\\n<li>\\n<p><em>ES6</em> 中的 <em>class</em> 必须通过 <em>new</em> 来调用，不能当做普通函数调用，否则报错</p>\\n<p>因此，在答案中，加入了 <em>new.target</em> 来判断调用方式</p>\\n</li>\\n<li>\\n<p><em>ES6</em> 的 <em>class</em> 中的所有代码均处于严格模式之下</p>\\n</li>\\n</ol>\\n<p>因此，在答案中，无论是构造函数本身，还是原型方法，都使用了严格模式</p>\\n<ol start=\\"3\\">\\n<li>\\n<p><em>ES6</em> 中的原型方法是不可被枚举的</p>\\n<p>因此，在答案中，定义原型方法使用了属性描述符，让其不可枚举</p>\\n</li>\\n<li>\\n<p>原型上的方法不允许通过 <em>new</em> 来调用</p>\\n<p>因此，在答案中，原型方法中加入了 <em>new.target</em> 来判断调用方式</p>\\n</li>\\n</ol>\\n</blockquote>\\n<h3 id=\\"_2-数组去重有哪些方法-美团-19-年\\" tabindex=\\"-1\\">2. 数组去重有哪些方法？（美团 <em>19</em> 年） <a class=\\"header-anchor\\" href=\\"#_2-数组去重有哪些方法-美团-19-年\\" aria-label=\\"Permalink to &quot;2\\\\. 数组去重有哪些方法？（美团 _19_ 年）&quot;\\">&ZeroWidthSpace;</a></h3>\\n<blockquote>\\n<p>参考答案：</p>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 数字或字符串数组去重，效率高</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function unique(arr) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      var result = {}; // 利用对象属性名的唯一性来保证不重复</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      for (var i = 0; i &lt; arr.length; i++) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">           if (!result[arr[i]]) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">               result[arr[i]] = true;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">           }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      return Object.keys(result); // 获取对象所有属性名的数组</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 任意数组去重，适配范围光，效率低</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function unique(arr) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      var result = []; // 结果数组</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      for (var i = 0; i &lt; arr.length; i++) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">           if (!result.includes(arr[i])) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">               result.push(arr[i]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">           }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      return result;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 利用ES6的Set去重，适配范围广，效率一般，书写简单</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function unique(arr) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">      return [...new Set(arr)]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">// 数字或字符串数组去重，效率高</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function unique(arr) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      var result = {}; // 利用对象属性名的唯一性来保证不重复</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      for (var i = 0; i &lt; arr.length; i++) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">           if (!result[arr[i]]) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">               result[arr[i]] = true;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">           }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      return Object.keys(result); // 获取对象所有属性名的数组</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">// 任意数组去重，适配范围光，效率低</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function unique(arr) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      var result = []; // 结果数组</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      for (var i = 0; i &lt; arr.length; i++) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">           if (!result.includes(arr[i])) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">               result.push(arr[i]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">           }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      return result;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">// 利用ES6的Set去重，适配范围广，效率一般，书写简单</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function unique(arr) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">      return [...new Set(arr)]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br><span class=\\"line-number\\">18</span><br><span class=\\"line-number\\">19</span><br><span class=\\"line-number\\">20</span><br><span class=\\"line-number\\">21</span><br><span class=\\"line-number\\">22</span><br><span class=\\"line-number\\">23</span><br><span class=\\"line-number\\">24</span><br><span class=\\"line-number\\">25</span><br><span class=\\"line-number\\">26</span><br></div></div></blockquote>\\n<h3 id=\\"_3-描述下列代码的执行结果\\" tabindex=\\"-1\\">3. 描述下列代码的执行结果 <a class=\\"header-anchor\\" href=\\"#_3-描述下列代码的执行结果\\" aria-label=\\"Permalink to &quot;3\\\\. 描述下列代码的执行结果&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">foo(typeof a);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">function foo(p) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    console.log(this);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    console.log(p);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    console.log(typeof b);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    let b = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">foo(typeof a);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">function foo(p) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    console.log(this);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    console.log(p);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    console.log(typeof b);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    let b = 0;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br></div></div><blockquote>\\n<p>参考答案：</p>\\n<p>报错，报错的位置在 <code>console.log(typeof b);</code></p>\\n<p>报错原因：<em>ReferenceError: Cannot access \'b\' before initialization</em></p>\\n</blockquote>\\n<blockquote>\\n<p>解析：</p>\\n<p>这道题考查的是 <em>ES6</em> 新增的声明变量关键字 <em>let</em> 以及暂时性死区的知识。<em>let</em> 和以前的 <em>var</em> 关键字不一样，无法在 <em>let</em> 声明变量之前访问到该变量，所以在 <em>typeof b</em> 的地方就会报错。</p>\\n</blockquote>\\n<h3 id=\\"_4-描述下列代码的执行结果\\" tabindex=\\"-1\\">4. 描述下列代码的执行结果 <a class=\\"header-anchor\\" href=\\"#_4-描述下列代码的执行结果\\" aria-label=\\"Permalink to &quot;4\\\\. 描述下列代码的执行结果&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">class Foo {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    constructor(arr) { </span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">        this.arr = arr; </span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    bar(n) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">        return this.arr.slice(0, n);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var f = new Foo([0, 1, 2, 3]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(f.bar(1));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(f.bar(2).splice(1, 1));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(f.arr);</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">class Foo {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    constructor(arr) { </span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">        this.arr = arr; </span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    bar(n) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">        return this.arr.slice(0, n);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var f = new Foo([0, 1, 2, 3]);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(f.bar(1));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(f.bar(2).splice(1, 1));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(f.arr);</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br></div></div><blockquote>\\n<p>参考答案：</p>\\n<p>[ 0 ]<br>\\n[ 1 ]<br>\\n[ 0, 1, 2, 3 ]</p>\\n</blockquote>\\n<blockquote>\\n<p>解析：</p>\\n<p>主要考察的是数组相关的知识。 <em>f</em> 对象上面有一个属性 <em>arr</em>，<em>arr</em> 的值在初始化的时候会被初始化为  <em>[0, 1, 2, 3]</em> ，之后就完全是考察数组以及数组方法的使用了。</p>\\n</blockquote>\\n<h3 id=\\"_5-描述下列代码的执行结果\\" tabindex=\\"-1\\">5. 描述下列代码的执行结果 <a class=\\"header-anchor\\" href=\\"#_5-描述下列代码的执行结果\\" aria-label=\\"Permalink to &quot;5\\\\. 描述下列代码的执行结果&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">01 function f(count) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">02    console.log(`foo${count}`);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">03    setTimeout(() =&gt; { console.log(`bar${count}`); });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">04 }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">05 f(1);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">06 f(2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">07 setTimeout(() =&gt; { f(3); });</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">01 function f(count) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">02    console.log(`foo${count}`);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">03    setTimeout(() =&gt; { console.log(`bar${count}`); });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">04 }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">05 f(1);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">06 f(2);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">07 setTimeout(() =&gt; { f(3); });</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br></div></div><blockquote>\\n<p>参考答案：</p>\\n<p>foo1<br>\\nfoo2<br>\\nbar1<br>\\nbar2<br>\\nfoo3<br>\\nbar3</p>\\n</blockquote>\\n<blockquote>\\n<p>解析：</p>\\n<p>这个完全是考察的异步的知识。调用 <em>f(1)</em>  的时候，会执行同步代码，打印出 <em>foo1</em>，然后 <em>03</em> 行的 <em>setTimeout</em> 被放入到异步执行队列，接下来调用 <em>f(2)</em>  的时候，打印出 <em>foo2</em>，后面 <em>03</em> 行的 <em>setTimeout</em> 又被放入到异步执行队列。然后执行 <em>07</em> 行的语句，被放入到异步执行队列。至此，所有同步代码就都执行完毕了。</p>\\n<p>接下来开始执行异步代码，那么大家时间没写，就都是相同的，所以谁先被放入到异步队列，谁就先执行，所以先打印出 <em>bar1</em>、然后是 <em>bar2</em>，接下来执行之前 <em>07</em> 行放入到异步队列里面的 <em>setTimeout</em>，先执行 <em>f</em> 函数里面的同步代码，打印出 <em>foo3</em>，然后是最后一个异步，打印出 <em>bar3</em></p>\\n</blockquote>\\n<h3 id=\\"_6-描述下列代码的执行结果\\" tabindex=\\"-1\\">6. 描述下列代码的执行结果 <a class=\\"header-anchor\\" href=\\"#_6-描述下列代码的执行结果\\" aria-label=\\"Permalink to &quot;6\\\\. 描述下列代码的执行结果&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var a = 2;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var b = 5;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(a === 2 || 1 &amp;&amp; b === 3 || 4);</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">var a = 2;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var b = 5;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(a === 2 || 1 &amp;&amp; b === 3 || 4);</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br></div></div><blockquote>\\n<p>参考答案：</p>\\n<p><em>true</em></p>\\n<p>考察的是逻辑运算符。在 || 里面，只要有一个为真，后面的直接短路，都不用去计算。所以 <em>a === 2</em> 得到 <em>true</em> 之后直接短路了，返回 <em>true</em>。</p>\\n</blockquote>\\n<h3 id=\\"_7-描述下列代码的执行结果\\" tabindex=\\"-1\\">7. 描述下列代码的执行结果 <a class=\\"header-anchor\\" href=\\"#_7-描述下列代码的执行结果\\" aria-label=\\"Permalink to &quot;7\\\\. 描述下列代码的执行结果&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">export class ButtonWrapper {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    constructor(domBtnEl, hash) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">        this.domBtnEl = domBtnEl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">        this.hash = hash;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">        this.bindEvent();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    bindEvent() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">        this.domBtnEl.addEventListener(&#39;click&#39;, this.clickEvent, false);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    detachEvent() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">        this.domBtnEl.removeEventListener(&#39;click&#39;, this.clickEvent);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    clickEvent() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">        console.log(`The hash of the button is: ${this.hash}`);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">export class ButtonWrapper {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    constructor(domBtnEl, hash) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">        this.domBtnEl = domBtnEl;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">        this.hash = hash;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">        this.bindEvent();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    bindEvent() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">        this.domBtnEl.addEventListener(&#39;click&#39;, this.clickEvent, false);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    detachEvent() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">        this.domBtnEl.removeEventListener(&#39;click&#39;, this.clickEvent);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    clickEvent() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">        console.log(`The hash of the button is: ${this.hash}`);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br></div></div><blockquote>\\n<p>参考答案：</p>\\n<p>上面的代码导出了一个 <em>ButtonWrapper</em> 类，该类在被实例化的时候，实例化对象上面有两个属性，分别是 <em>domBtnEl</em> 和 <em>hash</em>，<em>domBtnEl</em> 是一个 <em>DOM</em> 节点，之后为这个 <em>domBtnEl</em> 绑定了点击事件，点击后打印出 <em>The hash of the button is: hash</em> 那句话。<em>detachEvent</em> 是移除点击事件，当调用实例化对象的 <em>detachEvent</em> 方法时，点击事件就会被移除。</p>\\n</blockquote>\\n<h3 id=\\"_8-箭头函数有哪些特点\\" tabindex=\\"-1\\">8. 箭头函数有哪些特点 <a class=\\"header-anchor\\" href=\\"#_8-箭头函数有哪些特点\\" aria-label=\\"Permalink to &quot;8\\\\. 箭头函数有哪些特点&quot;\\">&ZeroWidthSpace;</a></h3>\\n<blockquote>\\n<p>参考答案：</p>\\n<ol>\\n<li>\\n<p>更简洁的语法，例如</p>\\n<ul>\\n<li>只有一个形参就不需要用括号括起来</li>\\n<li>如果函数体只有一行，就不需要放到一个块中</li>\\n<li>如果 <em>return</em> 语句是函数体内唯一的语句，就不需要 <em>return</em> 关键字</li>\\n</ul>\\n</li>\\n<li>\\n<p>箭头函数没有自己的 <em>this</em>，<em>arguments</em>，<em>super</em></p>\\n</li>\\n<li>\\n<p>箭头函数 <em>this</em> 只会从自己的作用域链的上一层继承 <em>this</em>。</p>\\n</li>\\n</ol>\\n</blockquote>\\n<h3 id=\\"_9-说一说类的继承\\" tabindex=\\"-1\\">9. 说一说类的继承 <a class=\\"header-anchor\\" href=\\"#_9-说一说类的继承\\" aria-label=\\"Permalink to &quot;9\\\\. 说一说类的继承&quot;\\">&ZeroWidthSpace;</a></h3>\\n<blockquote>\\n<p>参考答案：</p>\\n<p>继承是面向对象编程中的三大特性之一。</p>\\n<p><em>JavaScript</em> 中的继承经过不断的发展，从最初的对象冒充慢慢发展到了今天的圣杯模式继承。</p>\\n<p>其中最需要掌握的就是<strong>伪经典继承</strong>和<strong>圣杯模式</strong>的继承。</p>\\n<p>很长一段时间，JS 继承使用的都是<strong>组合继承</strong>。这种继承也被称之为伪经典继承，该继承方式综合了原型链和盗用构造函数的方式，将两者的优点集中了起来。</p>\\n<p>组合继承弥补了之前原型链和盗用构造函数这两种方式各自的不足，是 <em>JavaScript</em> 中使用最多的继承方式。</p>\\n<p>组合继承最大的问题就是效率问题。最主要就是父类的构造函数始终会被调用两次：一次是在创建子类原型时调用，另一次是在子类构造函数中调用。</p>\\n<p>本质上，子类原型最终是要包含超类对象的所有实例属性，子类构造函数只要在执行时重写自己的原型就行了。</p>\\n<p>圣杯模式的继承解决了这一问题，其基本思路就是不通过调用父类构造函数来给子类原型赋值，而是取得父类原型的一个副本，然后将返回的新对象赋值给子类原型。</p>\\n</blockquote>\\n<blockquote>\\n<p>解析：该题主要考察就是对 <em>js</em> 中的继承是否了解，以及常见的继承的形式有哪些。最常用的继承就是<strong>组合继承</strong>（伪经典继承）和圣杯模式继承。下面附上 <em>js</em> 中这两种继承模式的详细解析。</p>\\n<p>下面是一个组合继承的例子：</p>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 基类</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var Person = function (name, age) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    this.name = name;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    this.age = age;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">Person.prototype.test = &quot;this is a test&quot;;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">Person.prototype.testFunc = function () {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    console.log(&#39;this is a testFunc&#39;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 子类</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var Student = function (name, age, gender, score) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    Person.apply(this, [name, age]); // 盗用构造函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    this.gender = gender;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    this.score = score;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">Student.prototype = new Person(); // 改变 Student 构造函数的原型对象</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">Student.prototype.testStuFunc = function () {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">    console.log(&#39;this is a testStuFunc&#39;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// 测试</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">var zhangsan = new Student(&quot;张三&quot;, 18, &quot;男&quot;, 100);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(zhangsan.name); // 张三</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(zhangsan.age); // 18</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(zhangsan.gender); // 男</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(zhangsan.score); // 100</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">console.log(zhangsan.test); // this is a test</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">zhangsan.testFunc(); // this is a testFunc</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">zhangsan.testStuFunc(); // this is a testStuFunc</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">// 基类</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var Person = function (name, age) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    this.name = name;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    this.age = age;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">Person.prototype.test = &quot;this is a test&quot;;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">Person.prototype.testFunc = function () {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    console.log(&#39;this is a testFunc&#39;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">// 子类</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var Student = function (name, age, gender, score) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    Person.apply(this, [name, age]); // 盗用构造函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    this.gender = gender;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    this.score = score;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">Student.prototype = new Person(); // 改变 Student 构造函数的原型对象</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">Student.prototype.testStuFunc = function () {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">    console.log(&#39;this is a testStuFunc&#39;);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">// 测试</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">var zhangsan = new Student(&quot;张三&quot;, 18, &quot;男&quot;, 100);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(zhangsan.name); // 张三</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(zhangsan.age); // 18</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(zhangsan.gender); // 男</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(zhangsan.score); // 100</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">console.log(zhangsan.test); // this is a test</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">zhangsan.testFunc(); // this is a testFunc</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">zhangsan.testStuFunc(); // this is a testStuFunc</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br><span class=\\"line-number\\">18</span><br><span class=\\"line-number\\">19</span><br><span class=\\"line-number\\">20</span><br><span class=\\"line-number\\">21</span><br><span class=\\"line-number\\">22</span><br><span class=\\"line-number\\">23</span><br><span class=\\"line-number\\">24</span><br><span class=\\"line-number\\">25</span><br><span class=\\"line-number\\">26</span><br><span class=\\"line-number\\">27</span><br><span class=\\"line-number\\">28</span><br><span class=\\"line-number\\">29</span><br><span class=\\"line-number\\">30</span><br></div></div><p>在上面的例子中，我们使用了组合继承的方式来实现继承，可以看到无论是基类上面的属性和方法，还是子类自己的属性和方法，都得到了很好的实现。</p>\\n<p>但是在组合继承中存在效率问题，比如在上面的代码中，我们其实调用了两次 <em>Person</em>，产生了两组 <em>name</em> 和 <em>age</em> 属性，一组在原型上，一组在实例上。</p>\\n<p>也就是说，我们在执行 <em>Student.prototype = new Person( )</em>  的时候，我们是想要 <em>Person</em> 原型上面的方法，属性是不需要的，因为属性之后可以通过 <em>Person.apply(this, [name, age])</em>  拿到，但是当你 <em>new Person( )</em>  的时候，会实例化一个 <em>Person</em> 对象出来，这个对象上面，属性和方法都有。</p>\\n<p>圣杯模式的继承解决了这一问题，其基本思路就是不通过调用父类构造函数来给子类原型赋值，而是取得父类原型的一个副本，然后将返回的新对象赋值给子类原型。</p>\\n<p>下面是一个圣杯模式的示例：</p>\\n<div class=\\"language- vp-adaptive-theme line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// target 是子类，origin 是基类</span></span>\\n<span class=\\"line\\"><span style=\\"color: #e1e4e8\\">// target</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #24292e\\">// target 是子类，origin 是基类</span></span>\\n<span class=\\"line\\"><span style=\\"color: #24292e\\">// target</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br></div></div></blockquote>\\n","tags":["面试题","js","面试题集合"],"userName":"大湿兄"},{"title":"一文扫盲JavaScript运算符","link":"article/一文扫盲JavaScript运算符","category":"技术专栏","excerpt":"","preview":"/common/fe01.jpg","tags":["JavaScript","运算符"],"date":"2023/10/07","intro":"本文将逐一讨论JavaScript中的运算符。并演示它们的功能和用法，帮助大家能够理解运算符在构建复杂表达式中的作用。","userName":"大湿兄"}]'),rs=s=>(d("data-v-de6960fc"),s=s(),u(),s),cs={class:"bg-white px-3"},is=["href"],ys=["src"],Es={class:"flex ml-5 flex flex-col"},ds=["href"],us={class:"tag fw-600"},ms={class:"fw-600 group-hover:c-sky-500"},bs={class:"font-size-3 c-dark-50 my-2"},hs={class:"mr-1.5"},gs=rs((()=>o("i",{class:"iconfont icon-renxiang text-3 mr-0.5"},null,-1))),Fs={class:"mr-1.5"},fs=rs((()=>o("i",{class:"iconfont icon-time text-3 mx-0.5"},null,-1))),vs={class:"font-size-4 line-clamp-3 c-gray-700"},Cs=E(s({__name:"Posts",props:{data:{}},setup(s){const n=s;return(s,a)=>(e(),p("div",cs,[(e(!0),p(i,null,y(n.data,(s=>(e(),p("article",{key:s.link,class:"group flex mx-4 py-5 border-b-solid border-slate-100"},[o("a",{class:"flex-shrink-0 overflow-hidden",href:s.link},[o("img",{class:"w-57 h-36 group-hover:transform-scale-120 transition-1000 rounded pointer-events-none",src:s.preview,alt:""},null,8,ys)],8,is),o("section",Es,[o("header",null,[o("a",{class:"c-dark-700 flex",href:s.link},[o("span",us,t(s.tags[0]),1),o("h2",null,[o("span",ms,t(s.title),1)])],8,ds)]),o("p",bs,[o("span",hs,[gs,c(" "+t(s.userName),1)]),o("span",Fs,[fs,c(t(s.date),1)])]),o("p",vs,t(s.intro),1)])])))),128))]))}}),[["__scopeId","data-v-de6960fc"]]),ks={},As={class:"p-3.5 flex flex-col bg-white rounded-2"},qs=[m('<h4 class="title flex items-center font-600" data-v-675b72fc>欢迎关注公众号</h4><div class="flex justify-center mt-4 mb-1" data-v-675b72fc><img class="w-45 h-45 rounded-1 object-contain pointer-events-none" src="/qrcode.jpg" alt="" data-v-675b72fc></div><div class="w-full" data-v-675b72fc><p class="text-3 font-600 text-center my-1 c-rose-500" data-v-675b72fc><a href="/" data-v-675b72fc>热门城市工作内推 &gt;&gt;&gt;</a></p><p class="text-3 font-600 text-center my-1 c-rose-500" data-v-675b72fc><a href="/" data-v-675b72fc>大厂面试真题&amp;资料 &gt;&gt;&gt;</a></p><p class="text-3 font-600 text-center my-1 c-rose-500" data-v-675b72fc><a href="/" data-v-675b72fc> 前端&amp;全栈技术交流 &gt;&gt;&gt;</a></p></div>',3)];const Ss=E(ks,[["render",function(s,n){return e(),p("section",As,qs)}],["__scopeId","data-v-675b72fc"]]),Ds={class:"sidebar h-fit ml-4 bg-white w-75"},Bs={class:"pos-fixed w-75"},xs=E({__name:"index",setup:s=>(s,n)=>(e(),p("aside",Ds,[o("div",Bs,[b(Ss)])]))},[["__scopeId","data-v-c423789e"]]),ws={class:"container max-w-full"},js={class:"main bg px-15 py-4 m-auto"},Ps={class:"flex-1 pt-5 px-5 pb-8 bg-white rounded-2"},zs=E(s({__name:"index",setup(s){let n=[];if("undefined"!=typeof window){const s=window.location.search.slice(3);n=ts.filter((n=>n.category===decodeURIComponent(s)))}return(s,a)=>(e(),p("div",ws,[o("main",js,[o("article",Ps,[b(Cs,{data:r(n)},null,8,["data"])]),b(xs)])]))}}),[["__scopeId","data-v-2a023520"]]),Ts={class:"container max-w-full"},Os={class:"main bg px-15 py-4 m-auto"},Ns={class:"vp-doc flex-1 pt-5 px-5 pb-8 bg-white rounded-2"},Ws=E(s({__name:"index",setup(s){n(),n();const a=h();function l(){return ts.findIndex((s=>`/${s.link}`===decodeURIComponent(a.path)))}return g((()=>{const s=l();return ts[s].date})),g((()=>ts[l()-1])),g((()=>ts[l()+1])),(s,n)=>{const a=F("Content");return e(),p("div",Ts,[o("main",Os,[o("article",Ns,[b(a,{class:"prose dark:prose-invert max-w-none"})]),b(xs)])])}}}),[["__scopeId","data-v-0cd1f2d6"]]),Is={},Ms=[o("img",{class:"w-full h-50 m-b-4 rounded-1 pointer-events-none",src:"/app/homebg.jpg",alt:""},null,-1)];const Ls=E(Is,[["render",function(s,n){return e(),p("div",null,Ms)}]]),_s={class:"container max-w-full"},Zs={class:"main bg px-15 py-4 m-auto"},Hs=E(s({__name:"index",setup(s){let n;return"undefined"!=typeof window&&(n=ts.filter((s=>!!s.category))),(s,a)=>(e(),p("div",_s,[o("main",Zs,[o("div",null,[b(Ls),b(Cs,{data:r(n)},null,8,["data"])]),b(xs)])]))}}),[["__scopeId","data-v-e195cb3f"]]),$s={class:"flex"},Js={class:"flex ml-4"},Rs=["src"],Vs={class:"ml-5 pt-1 text-3.5"},Gs={class:"text-5.5 font-600 c-gray-800"},Ys={class:"my-3"},Us=o("span",{class:"mr-3 c-gray-500"},"作者",-1),Xs={class:"text-4 c-blue-800"},Ks={class:"my-3"},Qs=o("span",{class:"mr-3 c-stone-500"},"出版时间",-1),sn={class:"c-stone-700 text-4"},nn=o("div",null,null,-1),an=s({__name:"index",props:{src:{},date:{},author:{},name:{}},setup(s){const n=s;return(s,a)=>(e(),p("div",$s,[o("div",Js,[o("img",{class:"w-45 h-55 object-contain",src:n.src,alt:""},null,8,Rs),o("div",Vs,[o("span",Gs,t(n.name),1),o("div",Ys,[Us,o("span",Xs,t(n.author),1)]),o("div",Ks,[Qs,o("span",sn,t(n.date),1)])])]),nn]))}}),ln=s=>(d("data-v-b9948fe1"),s=s(),u(),s),en={class:"copyright"},pn={class:"content"},on={class:"item"},tn=ln((()=>o("svg",{class:"icon",width:"20",height:"20",viewBox:"0 0 1024 1024"},[o("title",null,"原创作者"),o("path",{d:"M614.72 554.538c-49.086-6.399-100.27-2.1-149.256-2.1-119.465 0-209.04 95.972-206.84 215.437 0 17.095 8.498 31.99 23.493 40.488 14.896 10.697 34.09 14.896 53.285 17.095 61.882 6.398 123.664 6.398 198.342 6.398 40.488 0 93.872-2.1 142.858-4.298 27.692 0 53.284-4.3 78.877-14.896 19.194-8.498 29.89-19.194 31.99-40.488 8.498-104.57-72.478-204.84-172.75-217.636zM680.8 375.39c0-87.474-74.678-162.053-164.251-162.053-89.574 0-162.053 74.679-162.053 162.053-2.1 87.474 74.678 164.252 162.053 164.252 89.673 0 164.252-74.678 164.252-164.252z",fill:"#FFF"}),o("path",{d:"M512.35 0C228.733 0 .5 228.233.5 511.85s228.233 511.85 511.85 511.85 511.85-228.233 511.85-511.85S795.967 0 512.35 0zm275.12 772.074c-2.1 21.294-12.797 31.99-31.991 40.488-25.593 10.697-51.185 14.896-78.877 14.896-49.086 2.099-102.37 4.298-142.858 4.298-74.678 0-136.46 0-198.342-6.398-19.195-2.1-38.389-6.398-53.285-17.095-14.895-8.497-23.493-23.493-23.493-40.488-2.1-119.465 87.475-215.437 206.84-215.437 49.085 0 100.27-4.299 149.256 2.1 100.27 12.896 181.247 113.166 172.75 217.636zM354.495 375.39c0-87.474 72.479-162.053 162.053-162.053S680.8 288.016 680.8 375.39c0 89.574-74.679 164.252-164.252 164.252-87.375 0-164.152-76.778-162.053-164.252z",fill:"#249FF8"})],-1))),rn=ln((()=>o("span",null,"版权属于：",-1))),cn=["href"],yn=ln((()=>o("div",{class:"item"},[o("svg",{class:"icon",width:"20",height:"20",viewBox:"0 0 1024 1024"},[o("title",null,"本文链接"),o("path",{d:"M511.854 0A511.854 511.854 0 1 0 1024 511.854 511.854 511.854 0 0 0 511.854 0z",fill:"#39B54A"}),o("path",{d:"M576.491 630.355L460.028 746.818a129.565 129.565 0 0 1-182.555 0l-2.038-2.038a128.983 128.983 0 0 1 0-182.264l81.233-81.233a179.644 179.644 0 0 0 13.102 70.46l-52.7 52.408a69.878 69.878 0 0 0 0 98.703l2.038 2.038a70.169 70.169 0 0 0 98.703 0l116.463-116.463a69.878 69.878 0 0 0 0-98.703l-2.039-2.038a69.587 69.587 0 0 0-13.975-10.772l42.509-42.51a128.11 128.11 0 0 1 13.102 11.356l2.038 2.038a129.274 129.274 0 0 1 0 182.264z",fill:"#FFF"}),o("path",{d:"M746.236 460.902l-81.233 81.233a179.353 179.353 0 0 0-13.102-70.46l52.7-52.409a69.878 69.878 0 0 0 0-98.702l-2.039-2.038a69.878 69.878 0 0 0-98.702 0L487.397 434.989a69.878 69.878 0 0 0 0 98.702l2.038 2.038a68.422 68.422 0 0 0 13.976 10.773l-42.51 42.51a136.553 136.553 0 0 1-13.101-11.356l-2.038-2.038a128.983 128.983 0 0 1 0-182.265l116.463-116.462a129.565 129.565 0 0 1 182.555 0l2.038 2.038a128.983 128.983 0 0 1 0 182.264z",fill:"#FFF"})]),o("span",null,"本文链接：")],-1))),En=E(s({__name:"Copyright",setup(s){var p,c,i;const{theme:y,frontmatter:E}=n(),d=a({author:"123",authorLink:(null==(p=E.value)?void 0:p.authorLink)??(null==(i=null==(c=null==y?void 0:y.value)?void 0:c.articleMetadataConfig)?void 0:i.authorLink)}),{author:u,authorLink:m}=l(d);return(s,n)=>{const a=F("ClientOnly");return e(),f(a,null,{default:v((()=>[o("div",en,[o("div",pn,[o("div",on,[tn,rn,o("span",null,[o("a",{href:r(m),title:"进入作者主页",target:"_blank"},t(r(u)),9,cn)])]),yn])])])),_:1})}}}),[["__scopeId","data-v-b9948fe1"]]),dn={class:"nav-logo"};const un=E({},[["render",function(s,n){return e(),p("div",dn)}]]);var mn,bn={exports:{}};mn=bn,function(s){function n(s,n){var a=(65535&s)+(65535&n);return(s>>16)+(n>>16)+(a>>16)<<16|65535&a}function a(s,a,l,e,p,o){return n((t=n(n(a,s),n(e,o)))<<(r=p)|t>>>32-r,l);var t,r}function l(s,n,l,e,p,o,t){return a(n&l|~n&e,s,n,p,o,t)}function e(s,n,l,e,p,o,t){return a(n&e|l&~e,s,n,p,o,t)}function p(s,n,l,e,p,o,t){return a(n^l^e,s,n,p,o,t)}function o(s,n,l,e,p,o,t){return a(l^(n|~e),s,n,p,o,t)}function t(s,a){var t,r,c,i,y;s[a>>5]|=128<<a%32,s[14+(a+64>>>9<<4)]=a;var E=1732584193,d=-271733879,u=-1732584194,m=271733878;for(t=0;t<s.length;t+=16)r=E,c=d,i=u,y=m,E=l(E,d,u,m,s[t],7,-680876936),m=l(m,E,d,u,s[t+1],12,-389564586),u=l(u,m,E,d,s[t+2],17,606105819),d=l(d,u,m,E,s[t+3],22,-1044525330),E=l(E,d,u,m,s[t+4],7,-176418897),m=l(m,E,d,u,s[t+5],12,1200080426),u=l(u,m,E,d,s[t+6],17,-1473231341),d=l(d,u,m,E,s[t+7],22,-45705983),E=l(E,d,u,m,s[t+8],7,1770035416),m=l(m,E,d,u,s[t+9],12,-1958414417),u=l(u,m,E,d,s[t+10],17,-42063),d=l(d,u,m,E,s[t+11],22,-1990404162),E=l(E,d,u,m,s[t+12],7,1804603682),m=l(m,E,d,u,s[t+13],12,-40341101),u=l(u,m,E,d,s[t+14],17,-1502002290),E=e(E,d=l(d,u,m,E,s[t+15],22,1236535329),u,m,s[t+1],5,-165796510),m=e(m,E,d,u,s[t+6],9,-1069501632),u=e(u,m,E,d,s[t+11],14,643717713),d=e(d,u,m,E,s[t],20,-373897302),E=e(E,d,u,m,s[t+5],5,-701558691),m=e(m,E,d,u,s[t+10],9,38016083),u=e(u,m,E,d,s[t+15],14,-660478335),d=e(d,u,m,E,s[t+4],20,-405537848),E=e(E,d,u,m,s[t+9],5,568446438),m=e(m,E,d,u,s[t+14],9,-1019803690),u=e(u,m,E,d,s[t+3],14,-187363961),d=e(d,u,m,E,s[t+8],20,1163531501),E=e(E,d,u,m,s[t+13],5,-1444681467),m=e(m,E,d,u,s[t+2],9,-51403784),u=e(u,m,E,d,s[t+7],14,1735328473),E=p(E,d=e(d,u,m,E,s[t+12],20,-1926607734),u,m,s[t+5],4,-378558),m=p(m,E,d,u,s[t+8],11,-2022574463),u=p(u,m,E,d,s[t+11],16,1839030562),d=p(d,u,m,E,s[t+14],23,-35309556),E=p(E,d,u,m,s[t+1],4,-1530992060),m=p(m,E,d,u,s[t+4],11,1272893353),u=p(u,m,E,d,s[t+7],16,-155497632),d=p(d,u,m,E,s[t+10],23,-1094730640),E=p(E,d,u,m,s[t+13],4,681279174),m=p(m,E,d,u,s[t],11,-358537222),u=p(u,m,E,d,s[t+3],16,-722521979),d=p(d,u,m,E,s[t+6],23,76029189),E=p(E,d,u,m,s[t+9],4,-640364487),m=p(m,E,d,u,s[t+12],11,-421815835),u=p(u,m,E,d,s[t+15],16,530742520),E=o(E,d=p(d,u,m,E,s[t+2],23,-995338651),u,m,s[t],6,-198630844),m=o(m,E,d,u,s[t+7],10,1126891415),u=o(u,m,E,d,s[t+14],15,-1416354905),d=o(d,u,m,E,s[t+5],21,-57434055),E=o(E,d,u,m,s[t+12],6,1700485571),m=o(m,E,d,u,s[t+3],10,-1894986606),u=o(u,m,E,d,s[t+10],15,-1051523),d=o(d,u,m,E,s[t+1],21,-2054922799),E=o(E,d,u,m,s[t+8],6,1873313359),m=o(m,E,d,u,s[t+15],10,-30611744),u=o(u,m,E,d,s[t+6],15,-1560198380),d=o(d,u,m,E,s[t+13],21,1309151649),E=o(E,d,u,m,s[t+4],6,-145523070),m=o(m,E,d,u,s[t+11],10,-1120210379),u=o(u,m,E,d,s[t+2],15,718787259),d=o(d,u,m,E,s[t+9],21,-343485551),E=n(E,r),d=n(d,c),u=n(u,i),m=n(m,y);return[E,d,u,m]}function r(s){var n,a="",l=32*s.length;for(n=0;n<l;n+=8)a+=String.fromCharCode(s[n>>5]>>>n%32&255);return a}function c(s){var n,a=[];for(a[(s.length>>2)-1]=void 0,n=0;n<a.length;n+=1)a[n]=0;var l=8*s.length;for(n=0;n<l;n+=8)a[n>>5]|=(255&s.charCodeAt(n/8))<<n%32;return a}function i(s){var n,a,l="0123456789abcdef",e="";for(a=0;a<s.length;a+=1)n=s.charCodeAt(a),e+=l.charAt(n>>>4&15)+l.charAt(15&n);return e}function y(s){return unescape(encodeURIComponent(s))}function E(s){return function(s){return r(t(c(s),8*s.length))}(y(s))}function d(s,n){return function(s,n){var a,l,e=c(s),p=[],o=[];for(p[15]=o[15]=void 0,e.length>16&&(e=t(e,8*s.length)),a=0;a<16;a+=1)p[a]=909522486^e[a],o[a]=1549556828^e[a];return l=t(p.concat(c(n)),512+8*n.length),r(t(o.concat(l),640))}(y(s),y(n))}function u(s,n,a){return n?a?d(n,s):i(d(n,s)):a?E(s):i(E(s))}mn.exports?mn.exports=u:s.md5=u}(U);const hn=X(bn.exports);const gn=function s(n){if(n.extends){const a=s(n.extends);return{...a,...n,async enhanceApp(s){a.enhanceApp&&await a.enhanceApp(s),n.enhanceApp&&await n.enhanceApp(s)}}}return n}({extends:Z,Layout:{__name:"Layout",setup(s){const{page:a}=n(),{Layout:l}=Z;return(s,n)=>{const p=F("ClientOnly");return e(),f(r(l),null,{"doc-footer-before":v((()=>[b(p,null,{default:v((()=>[(e(),f(En,{key:r(hn)(r(a).relativePath)}))])),_:1})])),"nav-bar-title":v((()=>[b(p,null,{default:v((()=>[b(un)])),_:1})])),_:1})}}},enhanceApp({app:s}){s.component("Home",Hs),s.component("ArticleMetadata",os),s.component("Cat",zs),s.component("Article",Ws),s.component("Books",an)},setup(){const s=h(),n=()=>{Y(".main img",{background:"var(--vp-c-bg)"})};C((()=>{n()})),k((()=>s.path),(()=>A((()=>n()))))}}),Fn=s({name:"VitePressApp",setup(){const{site:s}=n();return C((()=>{W((()=>{document.documentElement.lang=s.value.lang,document.documentElement.dir=s.value.dir}))})),I(),M(),L(),gn.setup&&gn.setup(),()=>_(gn.Layout)}});async function fn(){const s=function(){let s,n=q;return T((a=>{let l=O(a),e=null;return l&&(n&&(s=l),(n||s===l)&&(l=l.replace(/\.js$/,".lean.js")),e=N((()=>import(l)),[])),q&&(n=!1),e}),gn.NotFound)}(),n=z(Fn);n.provide(D,s);const a=B(s.route);return n.provide(x,a),n.component("Content",w),n.component("ClientOnly",j),Object.defineProperties(n.config.globalProperties,{$frontmatter:{get:()=>a.frontmatter.value},$params:{get:()=>a.page.value.params}}),gn.enhanceApp&&await gn.enhanceApp({app:n,router:s,siteData:P}),{app:n,router:s,data:a}}q&&fn().then((({app:s,router:n,data:a})=>{n.go().then((()=>{S(n.route,a.site),s.mount("#app")}))}));export{fn as createApp};
