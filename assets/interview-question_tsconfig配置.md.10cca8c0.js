import{_ as s,C as n,o as a,c as l,H as p,w as o,k as e,a as t,Q as r}from"./chunks/framework.80346561.js";const c=JSON.parse('{"title":"tsconfig","description":"","frontmatter":{"createTime":"2022/10/18","tag":"ts"},"headers":[],"relativePath":"interview-question/tsconfig配置.md","filePath":"s/前端面试题/ts/tsconfig配置.md","lastUpdated":1696495218000}'),E={name:"interview-question/tsconfig配置.md"},y=e("h1",{id:"tsconfig",tabindex:"-1"},[t("tsconfig "),e("a",{class:"header-anchor",href:"#tsconfig","aria-label":'Permalink to "tsconfig"'},"​")],-1),u=r('<h2 id="tsconfig-json-是-typescript-项目的配置文件" tabindex="-1">tsconfig.json 是 TypeScript 项目的配置文件 <a class="header-anchor" href="#tsconfig-json-是-typescript-项目的配置文件" aria-label="Permalink to &quot;tsconfig.json 是 TypeScript 项目的配置文件&quot;">​</a></h2><p>tsconfig.json 包含 TypeScript 编译的相关配置，通过更改编译配置项，我们可以让 TypeScript 编译出 ES6、ES5、node 的代码。</p><h3 id="重要字段" tabindex="-1">重要字段 <a class="header-anchor" href="#重要字段" aria-label="Permalink to &quot;重要字段&quot;">​</a></h3><p>files - 设置要编译的文件的名称； include - 设置需要进行编译的文件，支持路径模式匹配； exclude - 设置无需进行编译的文件，支持路径模式匹配； compilerOptions - 设置与编译流程相关的选项。</p><h2 id="compileroptions-选项" tabindex="-1">compilerOptions 选项 <a class="header-anchor" href="#compileroptions-选项" aria-label="Permalink to &quot;compilerOptions 选项&quot;">​</a></h2><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 基本选项 */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;target&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;es5&quot;</span><span style="color:#E1E4E8;">,                       </span><span style="color:#6A737D;">// 指定 ECMAScript 目标版本: &#39;ES3&#39; (default), &#39;ES5&#39;, &#39;ES6&#39;/&#39;ES2015&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, or &#39;ESNEXT&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;module&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;commonjs&quot;</span><span style="color:#E1E4E8;">,                  </span><span style="color:#6A737D;">// 指定使用模块: &#39;commonjs&#39;, &#39;amd&#39;, &#39;system&#39;, &#39;umd&#39; or &#39;es2015&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;lib&quot;</span><span style="color:#E1E4E8;">: [],                             </span><span style="color:#6A737D;">// 指定要包含在编译中的库文件</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;allowJs&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                       </span><span style="color:#6A737D;">// 允许编译 javascript 文件</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;checkJs&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                       </span><span style="color:#6A737D;">// 报告 javascript 文件中的错误</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;jsx&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;preserve&quot;</span><span style="color:#E1E4E8;">,                     </span><span style="color:#6A737D;">// 指定 jsx 代码的生成: &#39;preserve&#39;, &#39;react-native&#39;, or &#39;react&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;declaration&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                   </span><span style="color:#6A737D;">// 生成相应的 &#39;.d.ts&#39; 文件</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;sourceMap&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                     </span><span style="color:#6A737D;">// 生成相应的 &#39;.map&#39; 文件</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;outFile&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./&quot;</span><span style="color:#E1E4E8;">,                       </span><span style="color:#6A737D;">// 将输出文件合并为一个文件</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;outDir&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./&quot;</span><span style="color:#E1E4E8;">,                        </span><span style="color:#6A737D;">// 指定输出目录</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;rootDir&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./&quot;</span><span style="color:#E1E4E8;">,                       </span><span style="color:#6A737D;">// 用来控制输出目录结构 --outDir.</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;removeComments&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                </span><span style="color:#6A737D;">// 删除编译后的所有的注释</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noEmit&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                        </span><span style="color:#6A737D;">// 不生成输出文件</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;importHelpers&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                 </span><span style="color:#6A737D;">// 从 tslib 导入辅助工具函数</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;isolatedModules&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,               </span><span style="color:#6A737D;">// 将每个文件做为单独的模块 （与 &#39;ts.transpileModule&#39; 类似）.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 严格的类型检查选项 */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;strict&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                        </span><span style="color:#6A737D;">// 启用所有严格类型检查选项</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noImplicitAny&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                 </span><span style="color:#6A737D;">// 在表达式和声明上有隐含的 any类型时报错</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;strictNullChecks&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,              </span><span style="color:#6A737D;">// 启用严格的 null 检查</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noImplicitThis&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                </span><span style="color:#6A737D;">// 当 this 表达式值为 any 类型的时候，生成一个错误</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;alwaysStrict&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                  </span><span style="color:#6A737D;">// 以严格模式检查每个模块，并在每个文件里加入 &#39;use strict&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 额外的检查 */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noUnusedLocals&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                </span><span style="color:#6A737D;">// 有未使用的变量时，抛出错误</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noUnusedParameters&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,            </span><span style="color:#6A737D;">// 有未使用的参数时，抛出错误</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noImplicitReturns&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,             </span><span style="color:#6A737D;">// 并不是所有函数里的代码都有返回值时，抛出错误</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noFallthroughCasesInSwitch&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,    </span><span style="color:#6A737D;">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 模块解析选项 */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;moduleResolution&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;node&quot;</span><span style="color:#E1E4E8;">,            </span><span style="color:#6A737D;">// 选择模块解析策略： &#39;node&#39; (Node.js) or &#39;classic&#39; (TypeScript pre-1.6)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;baseUrl&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./&quot;</span><span style="color:#E1E4E8;">,                       </span><span style="color:#6A737D;">// 用于解析非相对模块名称的基目录</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;paths&quot;</span><span style="color:#E1E4E8;">: {},                           </span><span style="color:#6A737D;">// 模块名到基于 baseUrl 的路径映射的列表</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;rootDirs&quot;</span><span style="color:#E1E4E8;">: [],                        </span><span style="color:#6A737D;">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;typeRoots&quot;</span><span style="color:#E1E4E8;">: [],                       </span><span style="color:#6A737D;">// 包含类型声明的文件列表</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;types&quot;</span><span style="color:#E1E4E8;">: [],                           </span><span style="color:#6A737D;">// 需要包含的类型声明文件名列表</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;allowSyntheticDefaultImports&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">// 允许从没有设置默认导出的模块中默认导入。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* Source Map Options */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;sourceRoot&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./&quot;</span><span style="color:#E1E4E8;">,                    </span><span style="color:#6A737D;">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;mapRoot&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./&quot;</span><span style="color:#E1E4E8;">,                       </span><span style="color:#6A737D;">// 指定调试器应该找到映射文件而不是生成文件的位置</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;inlineSourceMap&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,               </span><span style="color:#6A737D;">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;inlineSources&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                 </span><span style="color:#6A737D;">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 其他选项 */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;experimentalDecorators&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,        </span><span style="color:#6A737D;">// 启用装饰器</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;emitDecoratorMetadata&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 为装饰器提供元数据的支持</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 基本选项 */</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;target&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;es5&quot;</span><span style="color:#24292E;">,                       </span><span style="color:#6A737D;">// 指定 ECMAScript 目标版本: &#39;ES3&#39; (default), &#39;ES5&#39;, &#39;ES6&#39;/&#39;ES2015&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, or &#39;ESNEXT&#39;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;module&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;commonjs&quot;</span><span style="color:#24292E;">,                  </span><span style="color:#6A737D;">// 指定使用模块: &#39;commonjs&#39;, &#39;amd&#39;, &#39;system&#39;, &#39;umd&#39; or &#39;es2015&#39;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;lib&quot;</span><span style="color:#24292E;">: [],                             </span><span style="color:#6A737D;">// 指定要包含在编译中的库文件</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;allowJs&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                       </span><span style="color:#6A737D;">// 允许编译 javascript 文件</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;checkJs&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                       </span><span style="color:#6A737D;">// 报告 javascript 文件中的错误</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;jsx&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;preserve&quot;</span><span style="color:#24292E;">,                     </span><span style="color:#6A737D;">// 指定 jsx 代码的生成: &#39;preserve&#39;, &#39;react-native&#39;, or &#39;react&#39;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;declaration&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                   </span><span style="color:#6A737D;">// 生成相应的 &#39;.d.ts&#39; 文件</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;sourceMap&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                     </span><span style="color:#6A737D;">// 生成相应的 &#39;.map&#39; 文件</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;outFile&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./&quot;</span><span style="color:#24292E;">,                       </span><span style="color:#6A737D;">// 将输出文件合并为一个文件</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;outDir&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./&quot;</span><span style="color:#24292E;">,                        </span><span style="color:#6A737D;">// 指定输出目录</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;rootDir&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./&quot;</span><span style="color:#24292E;">,                       </span><span style="color:#6A737D;">// 用来控制输出目录结构 --outDir.</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;removeComments&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                </span><span style="color:#6A737D;">// 删除编译后的所有的注释</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noEmit&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                        </span><span style="color:#6A737D;">// 不生成输出文件</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;importHelpers&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                 </span><span style="color:#6A737D;">// 从 tslib 导入辅助工具函数</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;isolatedModules&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,               </span><span style="color:#6A737D;">// 将每个文件做为单独的模块 （与 &#39;ts.transpileModule&#39; 类似）.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 严格的类型检查选项 */</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;strict&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                        </span><span style="color:#6A737D;">// 启用所有严格类型检查选项</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noImplicitAny&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                 </span><span style="color:#6A737D;">// 在表达式和声明上有隐含的 any类型时报错</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;strictNullChecks&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,              </span><span style="color:#6A737D;">// 启用严格的 null 检查</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noImplicitThis&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                </span><span style="color:#6A737D;">// 当 this 表达式值为 any 类型的时候，生成一个错误</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;alwaysStrict&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                  </span><span style="color:#6A737D;">// 以严格模式检查每个模块，并在每个文件里加入 &#39;use strict&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 额外的检查 */</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noUnusedLocals&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                </span><span style="color:#6A737D;">// 有未使用的变量时，抛出错误</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noUnusedParameters&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,            </span><span style="color:#6A737D;">// 有未使用的参数时，抛出错误</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noImplicitReturns&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,             </span><span style="color:#6A737D;">// 并不是所有函数里的代码都有返回值时，抛出错误</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noFallthroughCasesInSwitch&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,    </span><span style="color:#6A737D;">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 模块解析选项 */</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;moduleResolution&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;node&quot;</span><span style="color:#24292E;">,            </span><span style="color:#6A737D;">// 选择模块解析策略： &#39;node&#39; (Node.js) or &#39;classic&#39; (TypeScript pre-1.6)</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;baseUrl&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./&quot;</span><span style="color:#24292E;">,                       </span><span style="color:#6A737D;">// 用于解析非相对模块名称的基目录</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;paths&quot;</span><span style="color:#24292E;">: {},                           </span><span style="color:#6A737D;">// 模块名到基于 baseUrl 的路径映射的列表</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;rootDirs&quot;</span><span style="color:#24292E;">: [],                        </span><span style="color:#6A737D;">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;typeRoots&quot;</span><span style="color:#24292E;">: [],                       </span><span style="color:#6A737D;">// 包含类型声明的文件列表</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;types&quot;</span><span style="color:#24292E;">: [],                           </span><span style="color:#6A737D;">// 需要包含的类型声明文件名列表</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;allowSyntheticDefaultImports&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;">// 允许从没有设置默认导出的模块中默认导入。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* Source Map Options */</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;sourceRoot&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./&quot;</span><span style="color:#24292E;">,                    </span><span style="color:#6A737D;">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;mapRoot&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./&quot;</span><span style="color:#24292E;">,                       </span><span style="color:#6A737D;">// 指定调试器应该找到映射文件而不是生成文件的位置</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;inlineSourceMap&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,               </span><span style="color:#6A737D;">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;inlineSources&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                 </span><span style="color:#6A737D;">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 其他选项 */</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;experimentalDecorators&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,        </span><span style="color:#6A737D;">// 启用装饰器</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;emitDecoratorMetadata&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 为装饰器提供元数据的支持</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div>',6);const i=s(E,[["render",function(s,e,t,r,c,E){const i=n("ArticleMetadata"),q=n("ClientOnly");return a(),l("div",null,[y,p(q,null,{default:o((()=>[p(i)])),_:1}),u])}]]);export{c as __pageData,i as default};
