import{_ as s,C as n,o as a,c as l,H as e,w as p,k as o,a as c,Q as r}from"./chunks/framework.bc643b65.js";const i=JSON.parse('{"title":"docker 起步","description":"","frontmatter":{"createTime":"2022/11/01","tag":"docker"},"headers":[],"relativePath":"interview-question/docker起步.md","filePath":"s/前端面试题/docker/docker起步.md","lastUpdated":1696495218000}'),t={name:"interview-question/docker起步.md"},d=o("h1",{id:"docker-起步",tabindex:"-1"},[c("docker 起步 "),o("a",{class:"header-anchor",href:"#docker-起步","aria-label":'Permalink to "docker 起步"'},"​")],-1),u=r('<p>docker 使应用部署更加轻量，可移植，可扩展，更好的环境隔离也更大程度地避免了生产环境与测试环境不一致的巨大尴尬</p><h2 id="认识docker" tabindex="-1">认识Docker <a class="header-anchor" href="#认识docker" aria-label="Permalink to &quot;认识Docker&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c09275e60e947e4836c7323809cbbec~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="图片"></p><h3 id="术语" tabindex="-1">术语 <a class="header-anchor" href="#术语" aria-label="Permalink to &quot;术语&quot;">​</a></h3><p>docker 的架构图如下 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b83f7ef6f44445fbbd960dfd3d656820~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="图片"></p><h3 id="从图中可以看出几个组成部分" tabindex="-1">从图中可以看出几个组成部分 <a class="header-anchor" href="#从图中可以看出几个组成部分" aria-label="Permalink to &quot;从图中可以看出几个组成部分&quot;">​</a></h3><ul><li>docker client: 即 docker 命令行工具</li><li>docker host: 宿主机，docker daemon 的运行环境服务器</li><li>docker daemon: docker 的守护进程，docker client 通过命令行与 docker daemon 交互</li><li>image: 镜像，可以理解为一个容器的模板，通过一个镜像可以创建多个容器</li><li>container: 最小型的一个操作系统环境，可以对各种服务以及应用容器化，是镜像的运行实例</li><li>registry: 镜像仓库，存储大量镜像，可以从镜像仓库拉取和推送镜像</li><li>Docker 技术的三大核心概念，分别是：镜像 Image、容器 Container、仓库 Repository</li></ul><h2 id="安装-docker" tabindex="-1">安装 Docker <a class="header-anchor" href="#安装-docker" aria-label="Permalink to &quot;安装 Docker&quot;">​</a></h2><h3 id="软件安装" tabindex="-1">软件安装 <a class="header-anchor" href="#软件安装" aria-label="Permalink to &quot;软件安装&quot;">​</a></h3><ul><li>在本地安装 docker/docker-compose，通过 Docker Desktop下载 docker 后，双击安装即可。</li><li>如果是个人服务器且为 linux，可参考 安装 docker ,它将 docker 与 docker compose 一并安装。</li></ul><h3 id="命令行安装" tabindex="-1">命令行安装 <a class="header-anchor" href="#命令行安装" aria-label="Permalink to &quot;命令行安装&quot;">​</a></h3><ul><li>Homebrew 的 Cask 已经支持 Docker for Mac，因此可以很方便的使用 Homebrew Cask 来进行安装，执行如下命令：</li></ul><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">brew cask install docker</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">brew cask install docker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>查看版本</li></ul><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">docker -v</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">docker -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="使用docker启动一个vue项目" tabindex="-1">使用Docker启动一个vue项目 <a class="header-anchor" href="#使用docker启动一个vue项目" aria-label="Permalink to &quot;使用Docker启动一个vue项目&quot;">​</a></h2><h3 id="新建项目" tabindex="-1">新建项目 <a class="header-anchor" href="#新建项目" aria-label="Permalink to &quot;新建项目&quot;">​</a></h3><p>使用Vue 脚手架构建项目</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm init vue@latest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm init vue@latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>给项目起个名字，叫做docker-demo-vue</p><p>然后一路回车。运行命令：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker-demo-vue</span></span>\n<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span></span>\n<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker-demo-vue</span></span>\n<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span></span>\n<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>项目没啥问题，我们对项目进行打包：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm run build</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm run build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="新建-dockerfile" tabindex="-1">新建 Dockerfile <a class="header-anchor" href="#新建-dockerfile" aria-label="Permalink to &quot;新建 Dockerfile&quot;">​</a></h3><p>在docker-demo-vue根目录下执行：</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">touch Dockerfile</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">touch Dockerfile</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此时的项目目录结构是这样的： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cd273772060479ba041a9ce76f3bd4e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="图片"></p><h3 id="拉取-nginx-镜像" tabindex="-1">拉取 Nginx 镜像 <a class="header-anchor" href="#拉取-nginx-镜像" aria-label="Permalink to &quot;拉取 Nginx 镜像&quot;">​</a></h3><ul><li>首先打开你的Docker，默认会启动。</li><li>控制台拉取 Nginx 镜像：</li></ul><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">docker pull nginx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">docker pull nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>出现下面的信息说明拉取Nginx镜像成功 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/acd02c73c8bd4140a7000daef4a1b858~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="图片"></p><h3 id="在根目录创建-nginx-配置文件" tabindex="-1">在根目录创建 Nginx 配置文件 <a class="header-anchor" href="#在根目录创建-nginx-配置文件" aria-label="Permalink to &quot;在根目录创建 Nginx 配置文件&quot;">​</a></h3><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">touch default.conf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">touch default.conf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>写入：</p><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">server</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;"> listen </span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;"> server_name </span><span style="color:#E1E4E8;"> localhost;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#charset koi8-r;</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;"> access_log </span><span style="color:#E1E4E8;"> /var/log/nginx/host.access.log </span><span style="color:#79B8FF;"> main</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;"> error_log </span><span style="color:#E1E4E8;"> /var/log/nginx/error.log </span><span style="color:#79B8FF;"> error</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">location</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">/ </span><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;"> root </span><span style="color:#E1E4E8;">  /usr/share/nginx/html;</span></span>\n<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;"> index </span><span style="color:#E1E4E8;"> index.html index.htm;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;"> error_page </span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">502</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">503</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">504</span><span style="color:#E1E4E8;">  /50x.html;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">location</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">/50x.html </span><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;"> root </span><span style="color:#E1E4E8;">  /usr/share/nginx/html;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">server</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;"> listen </span><span style="color:#24292E;">      </span><span style="color:#005CC5;">80</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;"> server_name </span><span style="color:#24292E;"> localhost;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#charset koi8-r;</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;"> access_log </span><span style="color:#24292E;"> /var/log/nginx/host.access.log </span><span style="color:#005CC5;"> main</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;"> error_log </span><span style="color:#24292E;"> /var/log/nginx/error.log </span><span style="color:#005CC5;"> error</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">location</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">/ </span><span style="color:#24292E;">{</span></span>\n<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;"> root </span><span style="color:#24292E;">  /usr/share/nginx/html;</span></span>\n<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;"> index </span><span style="color:#24292E;"> index.html index.htm;</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;"> error_page </span><span style="color:#24292E;">  </span><span style="color:#005CC5;">500</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">502</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">503</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">504</span><span style="color:#24292E;">  /50x.html;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">location</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/50x.html </span><span style="color:#24292E;">{</span></span>\n<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;"> root </span><span style="color:#24292E;">  /usr/share/nginx/html;</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="配置镜像" tabindex="-1">配置镜像 <a class="header-anchor" href="#配置镜像" aria-label="Permalink to &quot;配置镜像&quot;">​</a></h3><p>打开Dockerfile文件，写入：</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> nginx  </span></span>\n<span class="line"><span style="color:#F97583;">COPY</span><span style="color:#E1E4E8;"> dist/ /usr/share/nginx/html/  </span></span>\n<span class="line"><span style="color:#F97583;">COPY</span><span style="color:#E1E4E8;"> default.conf /etc/nginx/conf.d/default.conf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> nginx  </span></span>\n<span class="line"><span style="color:#D73A49;">COPY</span><span style="color:#24292E;"> dist/ /usr/share/nginx/html/  </span></span>\n<span class="line"><span style="color:#D73A49;">COPY</span><span style="color:#24292E;"> default.conf /etc/nginx/conf.d/default.conf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>FROM nginx 指定该镜像是基于 nginx:latest 镜像而构建的；</li><li>COPY dist/ /usr/share/nginx/html/ 命令的意思是将项目根目录下 dist 文件夹中的所有文件复制到镜像中 /usr/share/nginx/html/ 目录下；</li><li>COPY default.conf /etc/nginx/conf.d/default.conf 将 default.conf 复制到 etc/nginx/conf.d/default.conf，用本地的 default.conf 配置来替换 Nginx 镜像里的默认配置。</li></ul><h3 id="构建镜像" tabindex="-1">构建镜像 <a class="header-anchor" href="#构建镜像" aria-label="Permalink to &quot;构建镜像&quot;">​</a></h3><p>Docker 通过 build 命令来构建镜像：</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">docker build -t docker-demo-vue .</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">docker build -t docker-demo-vue .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72205a4bd7d645e8aba8f94f9720974b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="图片"> 出现上面的信息，表示构建成成功了。 参数说明：</p><ul><li>-t 参数给镜像命名 docker-demo-vue</li><li>. 是基于当前目录的 Dockerfile 来构建镜像 运行docker image ls | grep docker-demo-vue查看镜像 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b89dc49a84eb4e3f8c6a1f74f9497206~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="图片"> 可以看到我们构建了一个项目镜像。 在docker中也可以查看生成的镜像 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b32a3e1fa3d41b0a6a2fabc4f78fe2d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="图片"></li></ul><h3 id="运行容器" tabindex="-1">运行容器 <a class="header-anchor" href="#运行容器" aria-label="Permalink to &quot;运行容器&quot;">​</a></h3><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">docker run -d -p 3000:80 --name docker-vue docker-demo-vue</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">docker run -d -p 3000:80 --name docker-vue docker-demo-vue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="参数解释" tabindex="-1">参数解释 <a class="header-anchor" href="#参数解释" aria-label="Permalink to &quot;参数解释&quot;">​</a></h4><ul><li>-d 设置容器在后台运行</li><li>-p 表示端口映射，把本机的 3000 端口映射到 container 的 80 端口（这样外网就能通过本机的 3000 端口访问了。</li><li>--name 设置容器名 docker-vue</li><li>docker-demo-vue 是我们上面构建的镜像名字</li></ul><p>可以运行docker ps -a 查看容器id： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bbe6a154009b48218d88c000043695ab~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="图片"> 可以看到我们刚才打印的docker-vue的容器id为b6c49793ad48，跟上面的容器idb6c49793ad48ccfc106fab63f988881a1467ae25b5c4c9cee87ad4f3515f9607对应，默认是取了前12位。 同样的也可以在桌面端看到，正在运行的docker容器 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93e73388cc0c46d0a709be93248a4193~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="图片"></p><h3 id="访问项目" tabindex="-1">访问项目 <a class="header-anchor" href="#访问项目" aria-label="Permalink to &quot;访问项目&quot;">​</a></h3><p>可以在浏览器中看到对应的页面，跟我们前面创建项目的时候看到的界面是一样的 也可以使用curl -v -i localhost:3000 去查看对应的静态文件</p><h3 id="发布镜像" tabindex="-1">发布镜像 <a class="header-anchor" href="#发布镜像" aria-label="Permalink to &quot;发布镜像&quot;">​</a></h3><ul><li>如果你想为社区贡献力量，那么需要将镜像发布，方便其他开发者使用。</li><li>发布镜像需要如下步骤：</li><li>登陆 dockerhub，注册账号；</li><li>命令行执行 docker login，之后输入我们的账号密码，进行登录；</li><li>推送镜像之前，需要打一个 Tag，执行 docker tag image username repository:tag</li><li>全流程结束，以后我们要使用，再也不需要「搬石头、砍木头、画图纸、盖房子」了，拎包入住。这也是 docker 独特魅力所在。</li><li>以上，就是如何使用docker去运行一个基础项目的示例。</li></ul><h2 id="底层原理简介" tabindex="-1">底层原理简介 <a class="header-anchor" href="#底层原理简介" aria-label="Permalink to &quot;底层原理简介&quot;">​</a></h2><p>docker 底层使用了一些 linux 内核的特性，大概有 namespace，cgroups 和 ufs。</p><h3 id="namespace" tabindex="-1">namespace <a class="header-anchor" href="#namespace" aria-label="Permalink to &quot;namespace&quot;">​</a></h3><p>docker 使用 linux namespace 构建隔离的环境，它由以下 namespace 组成</p><ul><li>pid: 隔离进程</li><li>net: 隔离网络</li><li>ipc: 隔离 IPC</li><li>mnt: 隔离文件系统挂载</li><li>uts: 隔离hostname</li><li>user: 隔离uid/gid</li></ul><h2 id="进阶技巧总结" tabindex="-1">进阶技巧总结 <a class="header-anchor" href="#进阶技巧总结" aria-label="Permalink to &quot;进阶技巧总结&quot;">​</a></h2><h3 id="镜像仓库与拉取" tabindex="-1">镜像仓库与拉取 <a class="header-anchor" href="#镜像仓库与拉取" aria-label="Permalink to &quot;镜像仓库与拉取&quot;">​</a></h3><ul><li>大部分时候，我们不需要自己构建镜像，我们可以在官方镜像仓库 Docker Hub拉取镜像。</li><li>可以简单使用命令 docker pull 拉取镜像。</li><li>拉取镜像后可以使用 docker inspect 查看镜像信息，如配置及环境变量等。</li></ul><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 加入拉取一个 node:alpine 的镜像</span></span>\n<span class="line"><span style="color:#E1E4E8;">$ docker pull node:alpine</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># 查看镜像信息</span></span>\n<span class="line"><span style="color:#E1E4E8;">$ docker inspect node:alpine</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># 列出所有镜像</span></span>\n<span class="line"><span style="color:#E1E4E8;">$ docker images</span></span>\n<span class="line"><span style="color:#E1E4E8;">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span></span>\n<span class="line"><span style="color:#E1E4E8;">node                alpine              f20a6d8b6721        13 days ago         105MB</span></span>\n<span class="line"><span style="color:#E1E4E8;">mongo               latest              965553e202a4        2 weeks ago         363MB</span></span>\n<span class="line"><span style="color:#E1E4E8;">centos              latest              9f38484d220f        8 months ago        202MB</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 加入拉取一个 node:alpine 的镜像</span></span>\n<span class="line"><span style="color:#24292E;">$ docker pull node:alpine</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># 查看镜像信息</span></span>\n<span class="line"><span style="color:#24292E;">$ docker inspect node:alpine</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># 列出所有镜像</span></span>\n<span class="line"><span style="color:#24292E;">$ docker images</span></span>\n<span class="line"><span style="color:#24292E;">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span></span>\n<span class="line"><span style="color:#24292E;">node                alpine              f20a6d8b6721        13 days ago         105MB</span></span>\n<span class="line"><span style="color:#24292E;">mongo               latest              965553e202a4        2 weeks ago         363MB</span></span>\n<span class="line"><span style="color:#24292E;">centos              latest              9f38484d220f        8 months ago        202MB</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="构建镜像与发布" tabindex="-1">构建镜像与发布 <a class="header-anchor" href="#构建镜像与发布" aria-label="Permalink to &quot;构建镜像与发布&quot;">​</a></h3><p>但并不是所有的镜像都可以在镜像仓库中找到，另外我们也需要为我们自己的业务应用去构建镜像。 使用 docker build 构建镜像，docker build 会使用当前目录的 Dockerfile 构建镜像，至于 Dockerfile 的配置，参考下节。</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -t node-base:10: 指定镜像以及版本号</span></span>\n<span class="line"><span style="color:#6A737D;"># .: 指当前路径</span></span>\n<span class="line"><span style="color:#E1E4E8;">$ docker build -t node-base:10 .</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -t node-base:10: 指定镜像以及版本号</span></span>\n<span class="line"><span style="color:#6A737D;"># .: 指当前路径</span></span>\n<span class="line"><span style="color:#24292E;">$ docker build -t node-base:10 .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="dockerfile" tabindex="-1">Dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;Dockerfile&quot;">​</a></h3><p>在使用 docker 部署自己应用时，往往需要独立构建镜像。 docker 使用 Dockerfile 作为配置文件构建镜像，简单看一个 node 应用构建的 dockerfile。 Dockerfile 的各个指令可参考 Dockerfile Reference。</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> node:alpine</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">ADD</span><span style="color:#E1E4E8;"> package.json package-lock.json /code/</span></span>\n<span class="line"><span style="color:#F97583;">WORKDIR</span><span style="color:#E1E4E8;"> /code</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">RUN</span><span style="color:#E1E4E8;"> npm install --production</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">ADD</span><span style="color:#E1E4E8;"> . /code</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">CMD</span><span style="color:#E1E4E8;"> npm start</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> node:alpine</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">ADD</span><span style="color:#24292E;"> package.json package-lock.json /code/</span></span>\n<span class="line"><span style="color:#D73A49;">WORKDIR</span><span style="color:#24292E;"> /code</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">RUN</span><span style="color:#24292E;"> npm install --production</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">ADD</span><span style="color:#24292E;"> . /code</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">CMD</span><span style="color:#24292E;"> npm start</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="from" tabindex="-1">FROM <a class="header-anchor" href="#from" aria-label="Permalink to &quot;FROM&quot;">​</a></h3><p>基于一个旧有的基础镜像，格式如下。</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> &lt;image&gt; [</span><span style="color:#F97583;">AS</span><span style="color:#E1E4E8;"> &lt;name&gt;]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># 在多阶段构建时会用到</span></span>\n<span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> &lt;image&gt;[:&lt;tag&gt;] [</span><span style="color:#F97583;">AS</span><span style="color:#E1E4E8;"> &lt;name&gt;]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> node:16-alpine</span></span>\n<span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> nginx:alpine</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> &lt;image&gt; [</span><span style="color:#D73A49;">AS</span><span style="color:#24292E;"> &lt;name&gt;]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># 在多阶段构建时会用到</span></span>\n<span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> &lt;image&gt;[:&lt;tag&gt;] [</span><span style="color:#D73A49;">AS</span><span style="color:#24292E;"> &lt;name&gt;]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> node:16-alpine</span></span>\n<span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> nginx:alpine</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="add" tabindex="-1">ADD <a class="header-anchor" href="#add" aria-label="Permalink to &quot;ADD&quot;">​</a></h3><p>把宿主机的文件或目录加入到镜像的文件系统中。</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">ADD</span><span style="color:#E1E4E8;"> [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">ADD</span><span style="color:#E1E4E8;"> . /code</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">ADD</span><span style="color:#24292E;"> [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">ADD</span><span style="color:#24292E;"> . /code</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="run" tabindex="-1">RUN <a class="header-anchor" href="#run" aria-label="Permalink to &quot;RUN&quot;">​</a></h3><p>在镜像中执行命令，由于 ufs 的文件系统，它会在当前镜像的顶层新增一层。</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">RUN</span><span style="color:#E1E4E8;"> &lt;command&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">RUN</span><span style="color:#E1E4E8;"> npm run build</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">RUN</span><span style="color:#24292E;"> &lt;command&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">RUN</span><span style="color:#24292E;"> npm run build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="cmd" tabindex="-1">CMD <a class="header-anchor" href="#cmd" aria-label="Permalink to &quot;CMD&quot;">​</a></h3><p>指定容器如何启动。</p><p>一个 Dockerfile 中只允许有一个 CMD</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># exec form, this is the preferred form</span></span>\n<span class="line"><span style="color:#F97583;">CMD</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;executable&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;param1&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;param2&quot;</span><span style="color:#E1E4E8;">] </span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># as default parameters to ENTRYPOINT</span></span>\n<span class="line"><span style="color:#F97583;">CMD</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;param1&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;param2&quot;</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># shell form</span></span>\n<span class="line"><span style="color:#F97583;">CMD</span><span style="color:#E1E4E8;"> command param1 param2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">CMD</span><span style="color:#E1E4E8;"> npm start</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># exec form, this is the preferred form</span></span>\n<span class="line"><span style="color:#D73A49;">CMD</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;executable&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;param1&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;param2&quot;</span><span style="color:#24292E;">] </span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># as default parameters to ENTRYPOINT</span></span>\n<span class="line"><span style="color:#D73A49;">CMD</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;param1&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;param2&quot;</span><span style="color:#24292E;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># shell form</span></span>\n<span class="line"><span style="color:#D73A49;">CMD</span><span style="color:#24292E;"> command param1 param2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">CMD</span><span style="color:#24292E;"> npm start</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="容器" tabindex="-1">容器 <a class="header-anchor" href="#容器" aria-label="Permalink to &quot;容器&quot;">​</a></h3><p>镜像与容器的关系，类似于代码与进程的关系。</p><ul><li>docker run 创建容器</li><li>docker stop 停止容器</li><li>docker rm 删除容器</li></ul><h3 id="创建容器" tabindex="-1">创建容器 <a class="header-anchor" href="#创建容器" aria-label="Permalink to &quot;创建容器&quot;">​</a></h3><p>基于 nginx 镜像创建一个最简单的容器：启动一个最简单的 http 服务 使用 docker run 来启动容器，docker ps 查看容器启动状态</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 启动 nginx 容器，并在本地 8888 端口进行访问</span></span>\n<span class="line"><span style="color:#E1E4E8;">$ docker run --rm -it --name nginx -p 8888:80 nginx:alpine</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">$ docker ps -l</span></span>\n<span class="line"><span style="color:#E1E4E8;">CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                    NAMES</span></span>\n<span class="line"><span style="color:#E1E4E8;">404e88f0d90c        nginx:alpine         </span><span style="color:#9ECBFF;">&quot;nginx -g &#39;daemon of…&quot;</span><span style="color:#E1E4E8;">   4 minutes ago       Up 4 minutes        0.0.0.0:8888-&gt;80/tcp     nginx</span></span>\n<span class="line"><span style="color:#E1E4E8;">CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                    NAMES</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 启动 nginx 容器，并在本地 8888 端口进行访问</span></span>\n<span class="line"><span style="color:#24292E;">$ docker run --rm -it --name nginx -p 8888:80 nginx:alpine</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">$ docker ps -l</span></span>\n<span class="line"><span style="color:#24292E;">CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                    NAMES</span></span>\n<span class="line"><span style="color:#24292E;">404e88f0d90c        nginx:alpine         </span><span style="color:#032F62;">&quot;nginx -g &#39;daemon of…&quot;</span><span style="color:#24292E;">   4 minutes ago       Up 4 minutes        0.0.0.0:8888-&gt;80/tcp     nginx</span></span>\n<span class="line"><span style="color:#24292E;">CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                    NAMES</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>其中:</p><ul><li>--rm：当停止容器时自动清楚容器</li><li>-it：可交互式、赋予 tty 的方式</li><li>--name：为容器指定名称</li><li>-p host-port:container-port：宿主机与容器端口映射，方便容器对外提供服务</li><li>nginx:alpine：基于该基础镜像创建容器</li></ul><p>此时在宿主机使用 curl 测试容器提供的服务是否正常</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ curl localhost:8888</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;!DOCTYPE html&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;html&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;head&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;style&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    body {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        width: 35em;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        margin: 0 auto;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        font-family: Tahoma, Verdana, Arial, sans-serif;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/style&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/head&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;body&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span></span>\n<span class="line"><span style="color:#E1E4E8;">working. Further configuration is required.&lt;/p&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;p&gt;For online documentation and support please refer to</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;a href=</span><span style="color:#9ECBFF;">&quot;http://nginx.org/&quot;</span><span style="color:#E1E4E8;">&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">Commercial support is available at</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;a href=</span><span style="color:#9ECBFF;">&quot;http://nginx.com/&quot;</span><span style="color:#E1E4E8;">&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/body&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/html&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ curl localhost:8888</span></span>\n<span class="line"><span style="color:#24292E;">&lt;!DOCTYPE html&gt;</span></span>\n<span class="line"><span style="color:#24292E;">&lt;html&gt;</span></span>\n<span class="line"><span style="color:#24292E;">&lt;head&gt;</span></span>\n<span class="line"><span style="color:#24292E;">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span></span>\n<span class="line"><span style="color:#24292E;">&lt;style&gt;</span></span>\n<span class="line"><span style="color:#24292E;">    body {</span></span>\n<span class="line"><span style="color:#24292E;">        width: 35em;</span></span>\n<span class="line"><span style="color:#24292E;">        margin: 0 auto;</span></span>\n<span class="line"><span style="color:#24292E;">        font-family: Tahoma, Verdana, Arial, sans-serif;</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">&lt;/style&gt;</span></span>\n<span class="line"><span style="color:#24292E;">&lt;/head&gt;</span></span>\n<span class="line"><span style="color:#24292E;">&lt;body&gt;</span></span>\n<span class="line"><span style="color:#24292E;">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span></span>\n<span class="line"><span style="color:#24292E;">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span></span>\n<span class="line"><span style="color:#24292E;">working. Further configuration is required.&lt;/p&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">&lt;p&gt;For online documentation and support please refer to</span></span>\n<span class="line"><span style="color:#24292E;">&lt;a href=</span><span style="color:#032F62;">&quot;http://nginx.org/&quot;</span><span style="color:#24292E;">&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span></span>\n<span class="line"><span style="color:#24292E;">Commercial support is available at</span></span>\n<span class="line"><span style="color:#24292E;">&lt;a href=</span><span style="color:#032F62;">&quot;http://nginx.com/&quot;</span><span style="color:#24292E;">&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span></span>\n<span class="line"><span style="color:#24292E;">&lt;/body&gt;</span></span>\n<span class="line"><span style="color:#24292E;">&lt;/html&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>那如果要进入容器环境中呢？使用 docker exec -it container-name 命令</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker exec -it nginx sh</span></span>\n<span class="line"><span style="color:#E1E4E8;">/ #</span></span>\n<span class="line"><span style="color:#E1E4E8;">/ #</span></span>\n<span class="line"><span style="color:#E1E4E8;">/ #</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker exec -it nginx sh</span></span>\n<span class="line"><span style="color:#24292E;">/ #</span></span>\n<span class="line"><span style="color:#24292E;">/ #</span></span>\n<span class="line"><span style="color:#24292E;">/ #</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="容器管理" tabindex="-1">容器管理 <a class="header-anchor" href="#容器管理" aria-label="Permalink to &quot;容器管理&quot;">​</a></h3><p>docker ps 列出所有容器</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker ps</span></span>\n<span class="line"><span style="color:#E1E4E8;">CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                    NAMES</span></span>\n<span class="line"><span style="color:#E1E4E8;">404e88f0d90c        nginx:alpine         </span><span style="color:#9ECBFF;">&quot;nginx -g &#39;daemon of…&quot;</span><span style="color:#E1E4E8;">   4 minutes ago       Up 4 minutes        0.0.0.0:8888-&gt;80/tcp     nginx</span></span>\n<span class="line"><span style="color:#E1E4E8;">498e7d74fb4f        nginx:alpine         </span><span style="color:#9ECBFF;">&quot;nginx -g &#39;daemon of…&quot;</span><span style="color:#E1E4E8;">   7 minutes ago       Up 7 minutes        80/tcp                   lucid_mirzakhani</span></span>\n<span class="line"><span style="color:#E1E4E8;">2ce10556dc8f        redis:4.0.6-alpine   </span><span style="color:#9ECBFF;">&quot;docker-entrypoint.s…&quot;</span><span style="color:#E1E4E8;">   2 months ago        Up 2 months         0.0.0.0:6379-&gt;6379/tcp   apolloserverstarter_redis_1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker ps</span></span>\n<span class="line"><span style="color:#24292E;">CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                    NAMES</span></span>\n<span class="line"><span style="color:#24292E;">404e88f0d90c        nginx:alpine         </span><span style="color:#032F62;">&quot;nginx -g &#39;daemon of…&quot;</span><span style="color:#24292E;">   4 minutes ago       Up 4 minutes        0.0.0.0:8888-&gt;80/tcp     nginx</span></span>\n<span class="line"><span style="color:#24292E;">498e7d74fb4f        nginx:alpine         </span><span style="color:#032F62;">&quot;nginx -g &#39;daemon of…&quot;</span><span style="color:#24292E;">   7 minutes ago       Up 7 minutes        80/tcp                   lucid_mirzakhani</span></span>\n<span class="line"><span style="color:#24292E;">2ce10556dc8f        redis:4.0.6-alpine   </span><span style="color:#032F62;">&quot;docker-entrypoint.s…&quot;</span><span style="color:#24292E;">   2 months ago        Up 2 months         0.0.0.0:6379-&gt;6379/tcp   apolloserverstarter_redis_1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>docker port 查看容器端口映射</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker port nginx</span></span>\n<span class="line"><span style="color:#E1E4E8;">80/tcp -&gt; 0.0.0.0:8888</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker port nginx</span></span>\n<span class="line"><span style="color:#24292E;">80/tcp -&gt; 0.0.0.0:8888</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>docker stats 查看容器资源占用</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker stats nginx</span></span>\n<span class="line"><span style="color:#E1E4E8;">CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS</span></span>\n<span class="line"><span style="color:#E1E4E8;">404e88f0d90c        nginx               0.00%               1.395MiB / 1.796GiB   0.08%               632B / 1.27kB       0B / 0B             2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker stats nginx</span></span>\n<span class="line"><span style="color:#24292E;">CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS</span></span>\n<span class="line"><span style="color:#24292E;">404e88f0d90c        nginx               0.00%               1.395MiB / 1.796GiB   0.08%               632B / 1.27kB       0B / 0B             2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="容器测试" tabindex="-1">容器测试 <a class="header-anchor" href="#容器测试" aria-label="Permalink to &quot;容器测试&quot;">​</a></h3><p>如果某时某个容器出现问题，可直接进入容器内部进行调试。</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">docker exec -it &lt;container_name&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">docker exec -it &lt;container_name&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="docker-compose" tabindex="-1">docker compose <a class="header-anchor" href="#docker-compose" aria-label="Permalink to &quot;docker compose&quot;">​</a></h3><p>在 docker compose v2 中，使用了 docker compose 命令去替代了 docker-compose 命令，可以通过 docker compose version 查看版本号。</p><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker compose version</span></span>\n<span class="line"><span style="color:#E1E4E8;">Docker Compose version v2.6.0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># 如果是 v1 版本，则需要通过 docker-compose 查看命令</span></span>\n<span class="line"><span style="color:#E1E4E8;">$ docker-compose version</span></span>\n<span class="line"><span style="color:#E1E4E8;">docker-compose version 1.29.2, build 5becea4c</span></span>\n<span class="line"><span style="color:#E1E4E8;">docker-py version: 5.0.0</span></span>\n<span class="line"><span style="color:#E1E4E8;">CPython version: 3.7.10</span></span>\n<span class="line"><span style="color:#E1E4E8;">OpenSSL version: OpenSSL 1.1.0l  10 Sep 2019</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker compose version</span></span>\n<span class="line"><span style="color:#24292E;">Docker Compose version v2.6.0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># 如果是 v1 版本，则需要通过 docker-compose 查看命令</span></span>\n<span class="line"><span style="color:#24292E;">$ docker-compose version</span></span>\n<span class="line"><span style="color:#24292E;">docker-compose version 1.29.2, build 5becea4c</span></span>\n<span class="line"><span style="color:#24292E;">docker-py version: 5.0.0</span></span>\n<span class="line"><span style="color:#24292E;">CPython version: 3.7.10</span></span>\n<span class="line"><span style="color:#24292E;">OpenSSL version: OpenSSL 1.1.0l  10 Sep 2019</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在当前目录，新建配置文件为 docker-compose.yaml，内容如下</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;3&quot;</span></span>\n<span class="line"><span style="color:#85E89D;">services</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">app</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;nginx:alpine&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">8000:80</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;3&quot;</span></span>\n<span class="line"><span style="color:#22863A;">services</span><span style="color:#24292E;">:</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">app</span><span style="color:#24292E;">:</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;nginx:alpine&quot;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>\n<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">8000:80</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>此时可通过 docker compose up 启动容器。</p>',110);const E=s(t,[["render",function(s,o,c,r,i,t){const E=n("ArticleMetadata"),b=n("ClientOnly");return a(),l("div",null,[d,e(b,null,{default:p((()=>[e(E)])),_:1}),u])}]]);export{i as __pageData,E as default};
