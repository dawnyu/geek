import{_ as s,C as n,o as a,c as l,H as p,w as o,k as e,a as r,Q as c}from"./chunks/framework.e34e23c1.js";const t=JSON.parse('{"title":"无感刷新token","description":"","frontmatter":{"createTime":"2022/11/20","tags":"无感刷新token"},"headers":[],"relativePath":"interview-question/无感刷新token.md","filePath":"全部文档/前端面试题/场景题/无感刷新token.md","lastUpdated":1696860910000}'),E={name:"interview-question/无感刷新token.md"},y=e("h1",{id:"无感刷新token",tabindex:"-1"},[r("无感刷新token "),e("a",{class:"header-anchor",href:"#无感刷新token","aria-label":'Permalink to "无感刷新token"'},"​")],-1),i=c('<h2 id="一、无感刷新refreshtoken是什么" tabindex="-1">一、无感刷新refreshToken是什么？ <a class="header-anchor" href="#一、无感刷新refreshtoken是什么" aria-label="Permalink to &quot;一、无感刷新refreshToken是什么？&quot;">​</a></h2><p>首先，认证首先的方式有好几种，常见的有 <code>session</code> + <code>cookie</code>，需要存储的 <code>token</code> ，以及无需存储的 <code>token</code> ，其中无感刷新 <code>refreshToken</code> 就是属于无需存储 <code>token</code> 的一种为了提高用户体验，以及安全性的解决方案。</p><h3 id="_1-1、先了解-token-认证流程" tabindex="-1">1-1、先了解 token 认证流程 <a class="header-anchor" href="#_1-1、先了解-token-认证流程" aria-label="Permalink to &quot;1-1、先了解 token 认证流程&quot;">​</a></h3><p><code>token</code> 的认证基本的流程就是：</p><ol><li>客户端输入账号密码登录成功；</li><li>服务端返回 <code>token</code>（一般里面包含用户的一些基本信息，不要让用户隐私信息入内）；</li><li>客户端获取到 <code>token</code> 后，存储到本地的 <code>cookie</code> || <code>localStorge</code> 中；</li><li>以后每次请求的时候，都将在 <code>Authorization</code> 携带上 <code>token</code>；</li></ol><p><strong>缺点：</strong><br> 但是这种方法有一个缺点，就是 <code>token</code> 一经颁布，便无法被废除，只要在服务端规定的有效期内都是有用的，并且就算后面颁布了新的 <code>token</code> 也不会影响到之前旧的 <code>token</code>。这样出于安全考虑，就会将 <code>token</code> 的有效时间设置的短一些，通常都是10min~30min之内，这样就会造成用户的使用感观不好，比如用户的一个页面，填写数据填了很长一段时间，超过了 <code>token</code> 的有效时间，当他一提交时，便发现因为 <code>token</code> 的过期，需要重新登录，这样势必会造成用户的使用感觉极差，如此环境下，refreshToken 应运而生，我们可以通过 <code>refreshToken</code> 来刷新 <code>token</code> 的有效期。</p><h3 id="_1-2、refreshtoken是啥" tabindex="-1">1-2、refreshToken是啥？ <a class="header-anchor" href="#_1-2、refreshtoken是啥" aria-label="Permalink to &quot;1-2、refreshToken是啥？&quot;">​</a></h3><p><code>refreshToken</code> 其实和 <code>token</code> 并没有任何的区别，都是通过 <code>jwt</code> 加密的一串加密字符串，但是 <code>token</code> 是用来操作和获取数据的，<code>refreshToken</code> 仅仅只用来刷新 <code>token</code>。</p><p><strong>使用了 refreshToken 后的认证流程：</strong></p><ol><li>在用户登录成功后，后台返回一个 <code>token</code> ，一个 <code>refreshToken</code> ，平时发送请求的时候都是携带 <code>token</code>。</li><li>当 <code>token</code> 过期时，这时前端便携带 <code>refreshToken</code> 发送一个请求到服务端，请求新的 <code>token</code> 回来。</li><li>客户端用新的 <code>token</code> 替换原来过期的 <code>token</code>。</li><li>如果 <code>refreshToken</code> 过期，则需要用户重新登录。</li></ol><p>但是此时你可能会有一个疑问，既然 <code>refreshToken</code> 和 <code>token</code> 无区别，那为什么不干脆把 <code>token</code> 的过期时间延长呢？<code>refreshToken</code>这样的设计意义到底是什么？</p><h2 id="二、为什么要设置两个token" tabindex="-1">二、为什么要设置两个Token？ <a class="header-anchor" href="#二、为什么要设置两个token" aria-label="Permalink to &quot;二、为什么要设置两个Token？&quot;">​</a></h2><p>首先，我们要了解 <code>token</code> 的主要矛盾点是在于，如果过期的时间设置的太长，用户数据的安全性会大打折扣，但是如果设置的时间过短，用户需要频繁登录，这必然会造成用户使用体验感受下降，所以 <code>refreshToken</code> 就是为了平衡这一矛盾而诞生的。</p><p><code>token</code> 经常频繁的使用，暴露的几率很大，那我们就给他设置短的过期时间，提升安全性。 <code>refreshToken</code> 使用的不频繁，暴露几率相比较 <code>token</code> 小很多，我们需要给他设置较长的过期时间，以提升用户使用感受。</p><h2 id="三、后端如何实现" tabindex="-1">三、后端如何实现？ <a class="header-anchor" href="#三、后端如何实现" aria-label="Permalink to &quot;三、后端如何实现？&quot;">​</a></h2><p><strong>技术栈：koa + TS + mysql2</strong><br> 加密使用的是：jsonwebtoken ，token时间戳的判断使用的是 dayjs；</p><h3 id="_3-1、login-登录后返回" tabindex="-1">3-1、login 登录后返回 <a class="header-anchor" href="#_3-1、login-登录后返回" aria-label="Permalink to &quot;3-1、login 登录后返回&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  async </span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">(ctx: Context, next: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#F97583;">&lt;void&gt;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">user_name</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.request.body </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">userType</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 1、获取用户信息（token 中包含 id，user_name） </span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">password</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUserInfo</span><span style="color:#E1E4E8;">({ user_name })</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span></span>\n<span class="line"><span style="color:#E1E4E8;">      ctx.body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        code: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        message: </span><span style="color:#9ECBFF;">&#39;用户登录成功！&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        result: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          token: jwt.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">            {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">res, </span><span style="color:#6A737D;">// 携带用的的数据 id，与用户名，将密码等敏感信息过滤出去</span></span>\n<span class="line"><span style="color:#E1E4E8;">              exp: </span><span style="color:#B392F0;">dayjs</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;s&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 保存token的有效时间戳，此处因为是测试所以设置的时间很短，一般设置为10—~30m</span></span>\n<span class="line"><span style="color:#E1E4E8;">            },</span></span>\n<span class="line"><span style="color:#E1E4E8;">            env.</span><span style="color:#79B8FF;">JWT_SECRET</span></span>\n<span class="line"><span style="color:#E1E4E8;">          ),</span></span>\n<span class="line"><span style="color:#E1E4E8;">          refreshToken: jwt.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">            {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">res,</span></span>\n<span class="line"><span style="color:#E1E4E8;">              exp: </span><span style="color:#B392F0;">dayjs</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;h&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 保存refreshToken的有效时间戳，一般设置为1d以上</span></span>\n<span class="line"><span style="color:#E1E4E8;">            },</span></span>\n<span class="line"><span style="color:#E1E4E8;">            env.</span><span style="color:#79B8FF;">JWT_REFRESH_SECRET</span></span>\n<span class="line"><span style="color:#E1E4E8;">          )</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;用户登录失败&#39;</span><span style="color:#E1E4E8;">, error)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  async </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(ctx: Context, next: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#D73A49;">&lt;void&gt;</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">user_name</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.request.body </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">userType</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1、获取用户信息（token 中包含 id，user_name） </span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">password</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUserInfo</span><span style="color:#24292E;">({ user_name })</span></span>\n<span class="line"><span style="color:#24292E;">      </span></span>\n<span class="line"><span style="color:#24292E;">      ctx.body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">        code: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">        message: </span><span style="color:#032F62;">&#39;用户登录成功！&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">        result: {</span></span>\n<span class="line"><span style="color:#24292E;">          token: jwt.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(</span></span>\n<span class="line"><span style="color:#24292E;">            {</span></span>\n<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">res, </span><span style="color:#6A737D;">// 携带用的的数据 id，与用户名，将密码等敏感信息过滤出去</span></span>\n<span class="line"><span style="color:#24292E;">              exp: </span><span style="color:#6F42C1;">dayjs</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;s&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 保存token的有效时间戳，此处因为是测试所以设置的时间很短，一般设置为10—~30m</span></span>\n<span class="line"><span style="color:#24292E;">            },</span></span>\n<span class="line"><span style="color:#24292E;">            env.</span><span style="color:#005CC5;">JWT_SECRET</span></span>\n<span class="line"><span style="color:#24292E;">          ),</span></span>\n<span class="line"><span style="color:#24292E;">          refreshToken: jwt.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(</span></span>\n<span class="line"><span style="color:#24292E;">            {</span></span>\n<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">res,</span></span>\n<span class="line"><span style="color:#24292E;">              exp: </span><span style="color:#6F42C1;">dayjs</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;h&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 保存refreshToken的有效时间戳，一般设置为1d以上</span></span>\n<span class="line"><span style="color:#24292E;">            },</span></span>\n<span class="line"><span style="color:#24292E;">            env.</span><span style="color:#005CC5;">JWT_REFRESH_SECRET</span></span>\n<span class="line"><span style="color:#24292E;">          )</span></span>\n<span class="line"><span style="color:#24292E;">        }</span></span>\n<span class="line"><span style="color:#24292E;">      }</span></span>\n<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>\n<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;用户登录失败&#39;</span><span style="color:#24292E;">, error)</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="_3-2、router-单独配置-refreshtoken" tabindex="-1">3-2、router 单独配置 refreshToken <a class="header-anchor" href="#_3-2、router-单独配置-refreshtoken" aria-label="Permalink to &quot;3-2、router 单独配置 refreshToken&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/refresh&#39;</span><span style="color:#E1E4E8;">, refreshAuth, refreshTokenCon)</span></span>\n<span class="line"><span style="color:#6A737D;">// refreshAuth 监控refreshToken有无过期</span></span>\n<span class="line"><span style="color:#6A737D;">// refreshTokenCon 返回新的token给前端</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/refresh&#39;</span><span style="color:#24292E;">, refreshAuth, refreshTokenCon)</span></span>\n<span class="line"><span style="color:#6A737D;">// refreshAuth 监控refreshToken有无过期</span></span>\n<span class="line"><span style="color:#6A737D;">// refreshTokenCon 返回新的token给前端</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-3、refreshtoken-的权限时效判断" tabindex="-1">3-3、refreshToken 的权限时效判断 <a class="header-anchor" href="#_3-3、refreshtoken-的权限时效判断" aria-label="Permalink to &quot;3-3、refreshToken 的权限时效判断&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Context } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;koa&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jwt </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;jsonwebtoken&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> env </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../config/config.default&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> errors </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../constants/err.type&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> dayjs </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;dayjs&#39;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">invalidRefreshToken</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> errors</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">refreshAuth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">ctx</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Context</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">next</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">&gt;) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">authorization</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.request.header</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">refreshToken</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> authorization.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Bearer &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jwt.</span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(refreshToken, env.</span><span style="color:#79B8FF;">JWT_REFRESH_SECRET</span><span style="color:#E1E4E8;">) </span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">dayjs</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isAfter</span><span style="color:#E1E4E8;">(user.exp)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;refreshToken 过期&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ctx.app.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, invalidRefreshToken, ctx)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ctx.state.user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user</span></span>\n<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (error.name) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;无效的refreshToken&#39;</span><span style="color:#E1E4E8;">, error)</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ctx.app.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, invalidRefreshToken, ctx)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> refreshAuth</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Context } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;koa&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jwt </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;jsonwebtoken&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> env </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../config/config.default&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> errors </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../constants/err.type&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> dayjs </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;dayjs&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">invalidRefreshToken</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> errors</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">refreshAuth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">ctx</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Context</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">next</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">void</span><span style="color:#24292E;">&gt;) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">authorization</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.request.header</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">refreshToken</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> authorization.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Bearer &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jwt.</span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(refreshToken, env.</span><span style="color:#005CC5;">JWT_REFRESH_SECRET</span><span style="color:#24292E;">) </span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">dayjs</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isAfter</span><span style="color:#24292E;">(user.exp)) {</span></span>\n<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;refreshToken 过期&#39;</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ctx.app.</span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">, invalidRefreshToken, ctx)</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">    ctx.state.user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user</span></span>\n<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (error.name) {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>\n<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;无效的refreshToken&#39;</span><span style="color:#24292E;">, error)</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ctx.app.</span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">, invalidRefreshToken, ctx)</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> refreshAuth</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="_3-4、token-的时效判断" tabindex="-1">3-4、token 的时效判断 <a class="header-anchor" href="#_3-4、token-的时效判断" aria-label="Permalink to &quot;3-4、token 的时效判断&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Context } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;koa&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jwt </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;jsonwebtoken&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> env </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../config/config.default&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> errors </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../constants/err.type&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> dayjs </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;dayjs&#39;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">invalidToken</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> errors</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">auth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">ctx</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Context</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">next</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">&gt;) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">authorization</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.request.header</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">token</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> authorization.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Bearer &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// user中包含了payload的信息(id, user_name)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jwt.</span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(token, env.</span><span style="color:#79B8FF;">JWT_SECRET</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">dayjs</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isAfter</span><span style="color:#E1E4E8;">(user.exp)) { </span><span style="color:#6A737D;">// 表示 Day.js 对象是否在另一个提供的日期时间之后。</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// dayjs中文官网：https://dayjs.fenxianglu.cn/category/query.html#%E7%9B%B8%E5%90%8C</span></span>\n<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;token 过期&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ctx.app.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, invalidToken, ctx)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    ctx.state.user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user</span></span>\n<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (error.name) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;无效的token&#39;</span><span style="color:#E1E4E8;">, error)</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ctx.app.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, invalidToken, ctx)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> auth</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Context } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;koa&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jwt </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;jsonwebtoken&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> env </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../config/config.default&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> errors </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../constants/err.type&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> dayjs </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;dayjs&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">invalidToken</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> errors</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">auth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">ctx</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Context</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">next</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">void</span><span style="color:#24292E;">&gt;) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">authorization</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.request.header</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">token</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> authorization.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Bearer &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// user中包含了payload的信息(id, user_name)</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jwt.</span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(token, env.</span><span style="color:#005CC5;">JWT_SECRET</span><span style="color:#24292E;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">dayjs</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isAfter</span><span style="color:#24292E;">(user.exp)) { </span><span style="color:#6A737D;">// 表示 Day.js 对象是否在另一个提供的日期时间之后。</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// dayjs中文官网：https://dayjs.fenxianglu.cn/category/query.html#%E7%9B%B8%E5%90%8C</span></span>\n<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;token 过期&#39;</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ctx.app.</span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">, invalidToken, ctx)</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    ctx.state.user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user</span></span>\n<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (error.name) {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>\n<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;无效的token&#39;</span><span style="color:#24292E;">, error)</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ctx.app.</span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">, invalidToken, ctx)</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> auth</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h3 id="_3-5、ctx-body-返回新的token" tabindex="-1">3-5、ctx.body 返回新的token <a class="header-anchor" href="#_3-5、ctx-body-返回新的token" aria-label="Permalink to &quot;3-5、ctx.body 返回新的token&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 重新返回新的 token 和 refreshToken</span></span>\n<span class="line"><span style="color:#E1E4E8;">  async </span><span style="color:#B392F0;">refreshTokenCon</span><span style="color:#E1E4E8;">(ctx: Context, next: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#F97583;">&lt;void&gt;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// user中包含了payload的信息(id, user_name)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.state.user</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ctx.body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      code: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      message: </span><span style="color:#9ECBFF;">&#39;token状态刷新成功！&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      result: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        token: jwt.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">          {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">res,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            exp: </span><span style="color:#B392F0;">dayjs</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;s&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">          },</span></span>\n<span class="line"><span style="color:#E1E4E8;">          env.</span><span style="color:#79B8FF;">JWT_SECRET</span></span>\n<span class="line"><span style="color:#E1E4E8;">        )</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 重新返回新的 token 和 refreshToken</span></span>\n<span class="line"><span style="color:#24292E;">  async </span><span style="color:#6F42C1;">refreshTokenCon</span><span style="color:#24292E;">(ctx: Context, next: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#D73A49;">&lt;void&gt;</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// user中包含了payload的信息(id, user_name)</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.state.user</span></span>\n<span class="line"><span style="color:#24292E;">    ctx.body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">      code: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">      message: </span><span style="color:#032F62;">&#39;token状态刷新成功！&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">      result: {</span></span>\n<span class="line"><span style="color:#24292E;">        token: jwt.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(</span></span>\n<span class="line"><span style="color:#24292E;">          {</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">res,</span></span>\n<span class="line"><span style="color:#24292E;">            exp: </span><span style="color:#6F42C1;">dayjs</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;s&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">()</span></span>\n<span class="line"><span style="color:#24292E;">          },</span></span>\n<span class="line"><span style="color:#24292E;">          env.</span><span style="color:#005CC5;">JWT_SECRET</span></span>\n<span class="line"><span style="color:#24292E;">        )</span></span>\n<span class="line"><span style="color:#24292E;">      }</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="四、前端如何实现" tabindex="-1">四、前端如何实现？ <a class="header-anchor" href="#四、前端如何实现" aria-label="Permalink to &quot;四、前端如何实现？&quot;">​</a></h2><p><strong>技术栈：React + TS + mobx + axios</strong></p><h3 id="_4-1、request封装" tabindex="-1">4-1、request封装 <a class="header-anchor" href="#_4-1、request封装" aria-label="Permalink to &quot;4-1、request封装&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> axios, { </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> Method } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;axios&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> NProgress </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./nprogress&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> useStore </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/store&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { baseUrlFn } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/utils&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { message } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;antd&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { getToken } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/utils&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> handle401 </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./handle401&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// control global serve loading</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">useGlobalStore</span><span style="color:#E1E4E8;">: { </span><span style="color:#79B8FF;">changeIsLoading</span><span style="color:#E1E4E8;"> },</span></span>\n<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useStore</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 请求基地址</span></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">baseURL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">baseUrlFn</span><span style="color:#E1E4E8;">(p<wbr>rocess.env.</span><span style="color:#79B8FF;">BASE_ENV</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> axios.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  baseURL: baseURL,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  timeout: </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 请求拦截器</span></span>\n<span class="line"><span style="color:#E1E4E8;">instance.interceptors.request.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">config</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// token配置请求头</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">config.headers?.authorization </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getToken</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      config.headers.Authorization </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Bearer &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getToken</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">changeIsLoading</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    NProgress.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> config</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(error)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 响应拦截器</span></span>\n<span class="line"><span style="color:#E1E4E8;">instance.interceptors.response.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">changeIsLoading</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    NProgress.</span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> response</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    NProgress.</span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">changeIsLoading</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">status</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">config</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> error.response</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断token过期，进行 refresh token</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 与后台规定好 401 为 token 过期，需要重新请求 token</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 403 为 refresh token 过期，直接登出，让用户重新登录</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">401</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle401</span><span style="color:#E1E4E8;">(config)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">403</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      message.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;身份凭证过期，请重新登录&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对响应错误做点什么</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">error.response) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 网络错误，response 没有信息</span></span>\n<span class="line"><span style="color:#E1E4E8;">      window.location.pathname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/500&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 对响应错误做点什么 400 401 404 500 ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 通用错误，通用提示</span></span>\n<span class="line"><span style="color:#E1E4E8;">      message.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(error.response.data.code </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> error.response.data.message)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> instance</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> axios, { </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> Method } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;axios&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> NProgress </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./nprogress&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> useStore </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/store&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { baseUrlFn } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/utils&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { message } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;antd&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { getToken } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/utils&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> handle401 </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./handle401&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// control global serve loading</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">useGlobalStore</span><span style="color:#24292E;">: { </span><span style="color:#005CC5;">changeIsLoading</span><span style="color:#24292E;"> },</span></span>\n<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useStore</span><span style="color:#24292E;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 请求基地址</span></span>\n<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">baseURL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">baseUrlFn</span><span style="color:#24292E;">(p<wbr>rocess.env.</span><span style="color:#005CC5;">BASE_ENV</span><span style="color:#24292E;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> axios.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">({</span></span>\n<span class="line"><span style="color:#24292E;">  baseURL: baseURL,</span></span>\n<span class="line"><span style="color:#24292E;">  timeout: </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 请求拦截器</span></span>\n<span class="line"><span style="color:#24292E;">instance.interceptors.request.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">config</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// token配置请求头</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">config.headers?.authorization </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getToken</span><span style="color:#24292E;">()) {</span></span>\n<span class="line"><span style="color:#24292E;">      config.headers.Authorization </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Bearer &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getToken</span><span style="color:#24292E;">()</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">changeIsLoading</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">    NProgress.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">()</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> config</span></span>\n<span class="line"><span style="color:#24292E;">  },</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(error)</span></span>\n<span class="line"><span style="color:#24292E;">  },</span></span>\n<span class="line"><span style="color:#24292E;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 响应拦截器</span></span>\n<span class="line"><span style="color:#24292E;">instance.interceptors.response.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">response</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">changeIsLoading</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">300</span><span style="color:#24292E;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    NProgress.</span><span style="color:#6F42C1;">done</span><span style="color:#24292E;">()</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> response</span></span>\n<span class="line"><span style="color:#24292E;">  },</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    NProgress.</span><span style="color:#6F42C1;">done</span><span style="color:#24292E;">()</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">changeIsLoading</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">status</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">config</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> error.response</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断token过期，进行 refresh token</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 与后台规定好 401 为 token 过期，需要重新请求 token</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 403 为 refresh token 过期，直接登出，让用户重新登录</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">401</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle401</span><span style="color:#24292E;">(config)</span></span>\n<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">403</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">      message.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;身份凭证过期，请重新登录&#39;</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对响应错误做点什么</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">error.response) {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 网络错误，response 没有信息</span></span>\n<span class="line"><span style="color:#24292E;">      window.location.pathname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/500&#39;</span></span>\n<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 对响应错误做点什么 400 401 404 500 ...</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 通用错误，通用提示</span></span>\n<span class="line"><span style="color:#24292E;">      message.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(error.response.data.code </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> error.response.data.message)</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span>\n<span class="line"><span style="color:#24292E;">  },</span></span>\n<span class="line"><span style="color:#24292E;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> instance</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br></div></div><h3 id="_4-2、handle401-封装重新请求-token-函数" tabindex="-1">4-2、handle401 封装重新请求 token 函数 <a class="header-anchor" href="#_4-2、handle401-封装重新请求-token-函数" aria-label="Permalink to &quot;4-2、handle401 封装重新请求 token 函数&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./index&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { getRefreshToken, setToken } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/utils&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 将 token 与 refreshToken 用js-cookie存储到cookie中</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> lock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 锁</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">originRequest</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [] </span><span style="color:#6A737D;">// 缓冲</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;"> * 处理401——刷新token并处理之前的请求，目的在于实现用户无感知刷新</span></span>\n<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">config</span><span style="color:#6A737D;"> 之前的请求的配置</span></span>\n<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Promise&lt;unknown&gt;}</span></span>\n<span class="line"><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">config</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (lock) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    lock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">refreshTokenAPI</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getRefreshToken</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">token</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> res.data.result.token</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">setToken</span><span style="color:#E1E4E8;">(token)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      originRequest.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#B392F0;">callback</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(token))</span></span>\n<span class="line"><span style="color:#E1E4E8;">      originRequest.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {}</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  lock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 关键代码，返回Promise替换当前的请求</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 收集旧的请求，以便刷新后构造新的请求，同时由于Promise链式调用的效果，</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// instance(config)的结果就是最终的请求结果</span></span>\n<span class="line"><span style="color:#E1E4E8;">    originRequest.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">instance</span><span style="color:#E1E4E8;">(config))</span></span>\n<span class="line"><span style="color:#E1E4E8;">    })</span></span>\n<span class="line"><span style="color:#E1E4E8;">  })</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 重新获取 Token</span></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">refreshTokenAPI</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">refreshToken</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> instance.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/user/refresh&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    headers: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      authorization: </span><span style="color:#9ECBFF;">&#39;Bearer &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> refreshToken, </span><span style="color:#6A737D;">// 更换authorization为refreshToken</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  })</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./index&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { getRefreshToken, setToken } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/utils&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 将 token 与 refreshToken 用js-cookie存储到cookie中</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> lock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 锁</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">originRequest</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [] </span><span style="color:#6A737D;">// 缓冲</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;"> * 处理401——刷新token并处理之前的请求，目的在于实现用户无感知刷新</span></span>\n<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">config</span><span style="color:#6A737D;"> 之前的请求的配置</span></span>\n<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{Promise&lt;unknown&gt;}</span></span>\n<span class="line"><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">async</span><span style="color:#24292E;">(</span><span style="color:#E36209;">config</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lock) {</span></span>\n<span class="line"><span style="color:#24292E;">    lock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">refreshTokenAPI</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getRefreshToken</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">token</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> res.data.result.token</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">setToken</span><span style="color:#24292E;">(token)</span></span>\n<span class="line"><span style="color:#24292E;">      originRequest.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#6F42C1;">callback</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(token))</span></span>\n<span class="line"><span style="color:#24292E;">      originRequest.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {}</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">  lock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 关键代码，返回Promise替换当前的请求</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 收集旧的请求，以便刷新后构造新的请求，同时由于Promise链式调用的效果，</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// instance(config)的结果就是最终的请求结果</span></span>\n<span class="line"><span style="color:#24292E;">    originRequest.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;">(config))</span></span>\n<span class="line"><span style="color:#24292E;">    })</span></span>\n<span class="line"><span style="color:#24292E;">  })</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 重新获取 Token</span></span>\n<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">refreshTokenAPI</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">refreshToken</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> instance.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/user/refresh&#39;</span><span style="color:#24292E;">, {</span></span>\n<span class="line"><span style="color:#24292E;">    headers: {</span></span>\n<span class="line"><span style="color:#24292E;">      authorization: </span><span style="color:#032F62;">&#39;Bearer &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> refreshToken, </span><span style="color:#6A737D;">// 更换authorization为refreshToken</span></span>\n<span class="line"><span style="color:#24292E;">    },</span></span>\n<span class="line"><span style="color:#24292E;">  })</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h3 id="_4-3、实际效果图" tabindex="-1">4-3、实际效果图 <a class="header-anchor" href="#_4-3、实际效果图" aria-label="Permalink to &quot;4-3、实际效果图&quot;">​</a></h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffb707c8693c4282a5fa2d5646b10814~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt=""></p>',34);const F=s(E,[["render",function(s,e,r,c,t,E){const F=n("ArticleMetadata"),b=n("ClientOnly");return a(),l("div",null,[y,p(b,null,{default:o((()=>[p(F)])),_:1}),i])}]]);export{t as __pageData,F as default};
