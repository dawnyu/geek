import{_ as s,C as n,o as a,c as l,H as p,w as o,k as e,a as t,Q as r}from"./chunks/framework.e34e23c1.js";const c=JSON.parse('{"title":"前端开发实践：如何快速提取字体文件中的文字？","description":"","frontmatter":{"layout":"Article","title":"前端开发实践：如何快速提取字体文件中的文字？","date":"2023/10/17","tags":"CSS","category":"技术专栏","preview":"/common/32.jpg","intro":"前端日常开发过程中，是否经常遇到这种痛点，交互设计使用了新的字体，新的字体文件往往几M或者几十兆，这对于前端包体积优化是不可接受的。本文我们将介绍两种从字体文件中抽取字体的方法：Fontmin 和 sfnttool.jar。两种方案都可以帮我们可以减小字体文件的体积，不影响网页加载速度。"},"headers":[],"relativePath":"article/前端开发实践：如何快速提取字体文件中的文字.md","filePath":"全部文档/技术专栏/前端/前端开发实践：如何快速提取字体文件中的文字.md","lastUpdated":1697524459000}'),E={name:"article/前端开发实践：如何快速提取字体文件中的文字.md"},i=e("h1",{id:"前端开发实践-如何快速提取字体文件中的文字",tabindex:"-1"},[t("前端开发实践：如何快速提取字体文件中的文字？ "),e("a",{class:"header-anchor",href:"#前端开发实践-如何快速提取字体文件中的文字","aria-label":'Permalink to "前端开发实践：如何快速提取字体文件中的文字？"'},"​")],-1),y=r('<blockquote><p>本文首发「前端大湿兄」公众号，欢迎关注，福利多多~ 前端日常开发过程中，是否经常遇到这种痛点，交互设计使用了新的字体，新的字体文件往往几M或者几十兆，这对于前端包体积优化是不可接受的。本文我们将介绍两种从字体文件中抽取字体的方法：Fontmin 和 sfnttool.jar。两种方案都可以帮我们可以减小字体文件的体积，不影响网页加载速度。</p></blockquote><h2 id="node环境中使用fontmin" tabindex="-1">node环境中使用Fontmin <a class="header-anchor" href="#node环境中使用fontmin" aria-label="Permalink to &quot;node环境中使用Fontmin&quot;">​</a></h2><p>Fontmin 是一个用于字体压缩和提取的 Node.js 模块，可以帮助我们从字体文件中提取指定的文字。下面是使用 Fontmin 进行字体提取的步骤：</p><ol><li>安装 Node.js 环境和 Fontmin 模块。如果你不知道怎么安装，可以去问问你的程序员小哥哥或小姐姐。</li><li>创建一个 Fontmin 实例，并设置要提取的文字。这里我们可以设置一些有趣的文字，比如“我爱吃糖果！”。</li><li>调用 Fontmin 实例的 <code>src()</code> 方法，指定要处理的字体文件路径。这里我们可以使用一些有趣的字体文件，比如“Comic Sans MS”。</li><li>调用 Fontmin 实例的 <code>use()</code> 方法，添加 Fontmin 插件，用于处理字体文件。这里我们可以添加一些有趣的插件，比如“emoji”插件，让我们的字体文件更加有趣。</li><li>调用 Fontmin 实例的 <code>run()</code> 方法，执行字体文件处理操作。</li><li>获取处理后的字体文件，就可以引入到项目中使用了。</li></ol><p>示例代码：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Fontmin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fontmin&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 创建 Fontmin 实例</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fontmin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fontmin</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 设置要提取的文字</span></span>\n<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(Fontmin.</span><span style="color:#B392F0;">glyph</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    text: </span><span style="color:#9ECBFF;">&#39;我爱吃糖果！&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }))</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 指定要处理的字体文件路径</span></span>\n<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path/to/ComicSansMS.ttf&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 添加 Fontmin 插件，用于处理字体文件</span></span>\n<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(Fontmin.</span><span style="color:#B392F0;">emoji</span><span style="color:#E1E4E8;">())</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 执行字体文件处理操作</span></span>\n<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">files</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取处理后的字体文件，并将其保存到本地磁盘上</span></span>\n<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">writeFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path/to/new-font.ttf&#39;</span><span style="color:#E1E4E8;">, files[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].contents);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Fontmin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fontmin&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 创建 Fontmin 实例</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fontmin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fontmin</span><span style="color:#24292E;">()</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 设置要提取的文字</span></span>\n<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(Fontmin.</span><span style="color:#6F42C1;">glyph</span><span style="color:#24292E;">({</span></span>\n<span class="line"><span style="color:#24292E;">    text: </span><span style="color:#032F62;">&#39;我爱吃糖果！&#39;</span></span>\n<span class="line"><span style="color:#24292E;">  }))</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 指定要处理的字体文件路径</span></span>\n<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path/to/ComicSansMS.ttf&#39;</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 添加 Fontmin 插件，用于处理字体文件</span></span>\n<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(Fontmin.</span><span style="color:#6F42C1;">emoji</span><span style="color:#24292E;">())</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 执行字体文件处理操作</span></span>\n<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">files</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err;</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取处理后的字体文件，并将其保存到本地磁盘上</span></span>\n<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">writeFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path/to/new-font.ttf&#39;</span><span style="color:#24292E;">, files[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].contents);</span></span>\n<span class="line"><span style="color:#24292E;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>在上面的示例代码中，我们使用 Fontmin 提取了字体文件中的“我爱吃糖果！”这几个字。我们指定了要处理的字体文件路径，并添加了一些有趣的 Fontmin 插件，用于处理字体文件。最后，我们调用了 Fontmin 实例的 <code>run()</code> 方法，执行字体文件处理操作，并获取处理后的字体文件。</p><h2 id="java环境中使用sfnttool-jar" tabindex="-1">Java环境中使用sfnttool.jar <a class="header-anchor" href="#java环境中使用sfnttool-jar" aria-label="Permalink to &quot;Java环境中使用sfnttool.jar&quot;">​</a></h2><p>sfnttool.jar 是一个 Java开源字体提取库，可以帮助我们从字体文件中提取指定的文字。下面是使用 sfnttool.jar 进行字体提取的步骤：</p><ol><li>下载 sfnttool.jar 文件。</li><li>打开命令行窗口，进入 sfnttool.jar 文件所在的目录。这里我们可以使用一些有趣的命令行工具，比如“cmatrix”工具，让我们的字体文件更加有趣。</li><li>运行以下命令，提取指定的文字：</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">java</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-jar</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sfnttool.jar</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;我爱吃糖果！&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">path/to/font.ttf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">path/to/new-font.ttf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">java</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-jar</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sfnttool.jar</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;我爱吃糖果！&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">path/to/font.ttf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">path/to/new-font.ttf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行完这个命令后，就会在指定的新路径下生成一个新的字体文件，其中只包含了我们指定的文字。</p><p><strong>需要注意的是</strong>，执行jar包需要终端按装Java环境，这个很简单google一下就会了。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文给大家介绍了两种从字体文件中抽取字体的方法：Fontmin 和 sfnttool.jar。两个方案都非常简单，小伙伴准备好字体文件，按照步骤傻瓜式操作就ok了。</p>',15);const F=s(E,[["render",function(s,e,t,r,c,E){const F=n("ArticleMetadata"),m=n("ClientOnly");return a(),l("div",null,[i,p(m,null,{default:o((()=>[p(F)])),_:1}),y])}]]);export{c as __pageData,F as default};
