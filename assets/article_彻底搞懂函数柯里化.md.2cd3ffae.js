import{_ as s,C as n,o as a,c as l,H as p,w as o,k as e,a as r,Q as c}from"./chunks/framework.e34e23c1.js";const t=JSON.parse('{"title":"彻底搞懂函数柯里化","description":"JavaScript科里化是什么","frontmatter":{"layout":"Article","title":"彻底搞懂函数柯里化","head":[["meta",{"name":"description","content":"JavaScript科里化是什么"}],["meta",{"name":"keywords","content":"JavaScript科里化,什么是科里化,JavaScript科里化做什么"}]],"date":"2023/10/10","tags":"JavaScript","category":"技术专栏","preview":"/common/24.jpg","intro":"函数柯里化是一种强大的函数式编程技术，它使我们能够预设函数的参数，创建新的函数，并在需要的时候执行这些函数。这个技术提供了强大的代码复用和组合能力，使我们的代码变得更简洁、更具可读性。"},"headers":[],"relativePath":"article/彻底搞懂函数柯里化.md","filePath":"全部文档/技术专栏/前端/彻底搞懂函数柯里化.md","lastUpdated":1697783789000}'),y={name:"article/彻底搞懂函数柯里化.md"},E=e("h1",{id:"彻底搞懂函数柯里化",tabindex:"-1"},[r("彻底搞懂函数柯里化 "),e("a",{class:"header-anchor",href:"#彻底搞懂函数柯里化","aria-label":'Permalink to "彻底搞懂函数柯里化"'},"​")],-1),i=c('<blockquote><p>函数柯里化是一种强大的函数式编程技术，它使我们能够预设函数的参数，创建新的函数，并在需要的时候执行这些函数。这个技术提供了强大的代码复用和组合能力，使我们的代码变得更简洁、更具可读性。</p></blockquote><h2 id="什么是函数柯里化" tabindex="-1">什么是函数柯里化？ <a class="header-anchor" href="#什么是函数柯里化" aria-label="Permalink to &quot;什么是函数柯里化？&quot;">​</a></h2><p>函数柯里化（Currying）是在函数式编程中常用的技术，它的基本思想是将一个带有多个参数的函数转化为一系列使用一个参数的函数。这种转化可以使我们在函数调用时只提供部分参数，从而得到一个新的函数，这个新的函数接收剩下的参数。</p><h2 id="函数柯里化的优点" tabindex="-1">函数柯里化的优点 <a class="header-anchor" href="#函数柯里化的优点" aria-label="Permalink to &quot;函数柯里化的优点&quot;">​</a></h2><p>主要有两个优点：</p><ol><li>参数复用：我们可以创建一个新的函数，它的一部分参数已经被预设好了。</li><li>延迟执行：我们可以创建一系列的函数，只有在真正需要执行时才提供所有的参数。</li></ol><h2 id="如何实现函数柯里化" tabindex="-1">如何实现函数柯里化？ <a class="header-anchor" href="#如何实现函数柯里化" aria-label="Permalink to &quot;如何实现函数柯里化？&quot;">​</a></h2><p>在JavaScript中，实现函数柯里化的一种常见方法是使用高阶函数。下面是一个简单的柯里化函数的实现：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">curry</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> arity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fn.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f1</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (args.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> arity) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f2</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">moreArgs</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newArgs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">moreArgs];</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f1</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">newArgs);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">curry</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fn.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f1</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (args.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> arity) {</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args);</span></span>\n<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f2</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">moreArgs</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newArgs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">moreArgs];</span></span>\n<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f1</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">newArgs);</span></span>\n<span class="line"><span style="color:#24292E;">            }</span></span>\n<span class="line"><span style="color:#24292E;">        }</span></span>\n<span class="line"><span style="color:#24292E;">    };</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在上述代码中，<code>curry</code>函数接受一个函数<code>fn</code>作为参数，然后返回一个新的函数<code>f1</code>。如果<code>f1</code>接收的参数个数大于或等于<code>fn</code>的参数个数，就直接调用<code>fn</code>，否则返回一个新的函数<code>f2</code>，这个函数会将新的参数和旧的参数合并，然后递归调用<code>f1</code>。</p><h2 id="如何使用函数柯里化" tabindex="-1">如何使用函数柯里化？ <a class="header-anchor" href="#如何使用函数柯里化" aria-label="Permalink to &quot;如何使用函数柯里化？&quot;">​</a></h2><p>下面这个例子，演示如何使用上面的<code>curry</code>函数：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 原始函数</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">multiply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> c;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 柯里化后的函数</span></span>\n<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> curriedMultiply </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">curry</span><span style="color:#E1E4E8;">(multiply);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 使用柯里化后的函数</span></span>\n<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> temp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">curriedMultiply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// 返回一个新的函数</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">temp</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">));  </span><span style="color:#6A737D;">// 输出 24</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 原始函数</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">multiply</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">, </span><span style="color:#E36209;">c</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> c;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 柯里化后的函数</span></span>\n<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> curriedMultiply </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">curry</span><span style="color:#24292E;">(multiply);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 使用柯里化后的函数</span></span>\n<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">curriedMultiply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// 返回一个新的函数</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">temp</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">));  </span><span style="color:#6A737D;">// 输出 24</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在上述代码中，我们首先定义了一个函数<code>multiply</code>，然后使用<code>curry</code>函数将其柯里化。通过调用柯里化后的函数，我们可以在不同的时间点提供不同的参数，并得到新的函数。最后，我们通过提供所有的参数，得到了最终的结果。</p><p>总结下函数柯里化的优点：</p><ol><li><p><strong>参数复用</strong>：柯里化可以使我们在定义函数时设置一些通用的参数，然后生成一个新的函数，我们在调用这个新的函数时只需要提供剩下的参数。这样可以减少重复代码，提高代码复用性。</p><p>例如，如果我们有一个添加事件监听的函数，它需要元素、事件类型和处理函数作为参数。如果我们要为多个元素添加相同类型的事件和处理函数，我们可以把这个函数柯里化，预设事件类型和处理函数，然后为每个元素生成一个新的函数。</p></li><li><p><strong>延迟执行</strong>：柯里化的函数在接收到足够的参数之前不会执行，而是返回一个新的函数，等待剩余的参数。这意味着我们可以在任何需要的时候提供参数，然后在最后一刻计算结果。 这对于一些需要复杂计算的函数来说特别有用，我们可以把参数的收集和实际的计算分开，只在需要结果的时候进行计算。</p></li><li><p><strong>提高代码可读性</strong>：通过柯里化，我们可以创建更具描述性的函数，提高代码的可读性和可维护性。这是因为柯里化的函数通常会有更具体的用途和更明确的函数名。</p></li><li><p><strong>函数组合</strong>：柯里化可以使函数更容易组合。我们可以创建一系列的小函数，每个函数只做一件事，然后通过柯里化和函数组合来创建更复杂的函数。这是函数式编程的一种常见手法。</p></li></ol>',16);const u=s(y,[["render",function(s,c,t,y,u,d){const b=n("ArticleMetadata"),F=n("ClientOnly"),m=n("font");return a(),l("div",null,[E,p(F,null,{default:o((()=>[p(b)])),_:1}),i,e("p",null,[r("最后还是要提一点，"),p(m,{color:"red"},{default:o((()=>[r("柯里化函数的主要目标是提供参数复用和延迟执行的功能，而不是提高性能")])),_:1}),r("。因此，柯里化函数可能会比原始函数稍微慢一些，但对应用的性能影响微乎其微。")])])}]]);export{t as __pageData,u as default};
