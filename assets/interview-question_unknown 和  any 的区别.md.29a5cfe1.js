import{_ as s,C as n,o as a,c as l,H as p,w as o,k as e,a as r,Q as t}from"./chunks/framework.bc643b65.js";const c=JSON.parse('{"title":"unknown 和  any 的区别","description":"","frontmatter":{"createTime":"2022/10/18","tag":"ts"},"headers":[],"relativePath":"interview-question/unknown 和  any 的区别.md","filePath":"s/前端面试题/ts/unknown 和  any 的区别.md","lastUpdated":1696495218000}'),y={name:"interview-question/unknown 和  any 的区别.md"},E=e("h1",{id:"unknown-和-any-的区别",tabindex:"-1"},[r("unknown 和 any 的区别 "),e("a",{class:"header-anchor",href:"#unknown-和-any-的区别","aria-label":'Permalink to "unknown 和  any 的区别"'},"​")],-1),i=t('<ul><li>any 类型 是任何类型可以直接使用 但是要尽量不使用 因为使用any过多 会导致 失去 ts 的类型检查意义</li><li>unknown 类型 代表我们不知道他是什么类型 但是他有类型 无法直接使用 <ul><li>要使用 unknown 类型 的话 需要配合 类型断言的方式来使用 as</li></ul></li></ul><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>\n<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;1&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>\n<span class="line"><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { }</span></span>\n<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> { }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">unknown</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">333</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> c</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>\n<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;1&#39;</span></span>\n<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>\n<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>\n<span class="line"><span style="color:#6F42C1;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { }</span></span>\n<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> { }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">unknown</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">333</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> c</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',2);const u=s(y,[["render",function(s,e,r,t,c,y){const u=n("ArticleMetadata"),F=n("ClientOnly");return a(),l("div",null,[E,p(F,null,{default:o((()=>[p(u)])),_:1}),i])}]]);export{c as __pageData,u as default};
