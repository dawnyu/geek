import{_ as s,C as a,o as n,c as l,H as p,w as o,k as e,a as r,Q as c}from"./chunks/framework.f92cd432.js";const t=JSON.parse('{"title":"前端 Cookie 最佳实践","description":"","frontmatter":{"layout":"Article","title":"前端 Cookie 最佳实践","date":"2023/10/17","tags":"Cookie","category":"技术专栏","preview":"/common/4.jpg","intro":"Cookie和LocalStorage是前端开发中常用的客户端存储机制。前两天有个前端小伙伴问我几个的Cookie问题，没想到还有前端不熟悉Cookie，今天我们就重点聊一下这个老生常谈的知识点。"},"headers":[],"relativePath":"article/前端 Cookie 最佳实践.md","filePath":"全部文档/技术专栏/前端/前端 Cookie 最佳实践.md","lastUpdated":1697524459000}'),E={name:"article/前端 Cookie 最佳实践.md"},y=e("h1",{id:"前端-cookie-最佳实践",tabindex:"-1"},[r("前端 Cookie 最佳实践 "),e("a",{class:"header-anchor",href:"#前端-cookie-最佳实践","aria-label":'Permalink to "前端 Cookie 最佳实践"'},"​")],-1),i=c('<p>Cookie和LocalStorage是前端开发中常用的客户端存储机制。前两天有个前端小伙伴问我几个的Cookie问题，没想到还有前端不熟悉Cookie，今天我们就重点聊一下这个老生常谈的知识点。</p><h3 id="什么是cookie" tabindex="-1">什么是Cookie？ <a class="header-anchor" href="#什么是cookie" aria-label="Permalink to &quot;什么是Cookie？&quot;">​</a></h3><p>Cookie是一种存储在用户浏览器中的小型文本文件，由服务器发送给客户端（浏览器），然后存储在客户端的本地文件系统中。当用户访问同一网站时，浏览器会将Cookie发送回服务器，以便服务器可以识别用户。Cookie通常包含键-值对，用于存储各种信息，如用户标识、用户首选项和会话数据。</p><h4 id="存储机制" tabindex="-1">存储机制 <a class="header-anchor" href="#存储机制" aria-label="Permalink to &quot;存储机制&quot;">​</a></h4><p>Cookie 是通过服务器发送到客户端的小型文本文件，存储在客户端的文件系统中。它们在每次HTTP请求中都会被发送到服务器。</p><h4 id="存储容量" tabindex="-1">存储容量 <a class="header-anchor" href="#存储容量" aria-label="Permalink to &quot;存储容量&quot;">​</a></h4><p>Cookie的数据容量通常受到4KB的限制，这意味着它们适合存储较小的数据。</p><h4 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h4><p>Cookie可以设置生存周期，可以是会话Cookie（在浏览器关闭时过期）或持久性Cookie（可以设置特定过期日期）。</p><h4 id="服务器端通信" tabindex="-1">服务器端通信 <a class="header-anchor" href="#服务器端通信" aria-label="Permalink to &quot;服务器端通信&quot;">​</a></h4><p>Cookie会在每个HTTP请求中发送到服务器，这可以用于识别用户或维护用户状态。</p><h4 id="安全性" tabindex="-1">安全性 <a class="header-anchor" href="#安全性" aria-label="Permalink to &quot;安全性&quot;">​</a></h4><p>由于Cookie在每个请求中都会发送到服务器，它们可能会更容易受到CSRF（跨站点请求伪造）攻击。</p><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><h4 id="保存用户登录状态" tabindex="-1">保存用户登录状态 <a class="header-anchor" href="#保存用户登录状态" aria-label="Permalink to &quot;保存用户登录状态&quot;">​</a></h4><p>Cookie经常用于保存用户的登录状态。当用户成功登录后，服务器会创建一个包含用户信息的Cookie，并将其发送到客户端。这允许用户在会话期间保持登录状态，而无需每次都重新登录。</p><h4 id="跟踪用户行为" tabindex="-1">跟踪用户行为 <a class="header-anchor" href="#跟踪用户行为" aria-label="Permalink to &quot;跟踪用户行为&quot;">​</a></h4><p>网站可以使用Cookie来跟踪用户的行为，例如记录他们浏览的页面、点击的链接或购物车中的商品。这种信息对于分析用户行为和提供个性化内容非常重要。</p><h3 id="限制" tabindex="-1">限制 <a class="header-anchor" href="#限制" aria-label="Permalink to &quot;限制&quot;">​</a></h3><p>虽然Cookie在前端开发中非常有用，但它们也有一些限制</p><h4 id="数据大小限制" tabindex="-1">数据大小限制 <a class="header-anchor" href="#数据大小限制" aria-label="Permalink to &quot;数据大小限制&quot;">​</a></h4><p>Cookie的数据容量通常受到4KB的限制，这意味着它们适合存储较小的数据。</p><h4 id="cookie数量限制" tabindex="-1">Cookie数量限制 <a class="header-anchor" href="#cookie数量限制" aria-label="Permalink to &quot;Cookie数量限制&quot;">​</a></h4><p>每个域名下Cookie的数量也是有限制的，通常为20个。这意味着在同一域名下存储太多Cookie可能会引发问题。</p><h4 id="安全性问题" tabindex="-1">安全性问题 <a class="header-anchor" href="#安全性问题" aria-label="Permalink to &quot;安全性问题&quot;">​</a></h4><p>Cookie可能会被篡改。因此，它们不适合存储敏感信息，如密码。为了增强Cookie的安全性，可以使用加密来保护数据。</p><h4 id="隐私法规合规" tabindex="-1">隐私法规合规 <a class="header-anchor" href="#隐私法规合规" aria-label="Permalink to &quot;隐私法规合规&quot;">​</a></h4><p>随着对隐私的关注不断增加，法规如GDPR等对Cookie的使用提出了更严格的要求。开发人员需要确保他们的网站遵守这些法规。</p><h3 id="如何避免前端篡改cookie" tabindex="-1">如何避免前端篡改Cookie <a class="header-anchor" href="#如何避免前端篡改cookie" aria-label="Permalink to &quot;如何避免前端篡改Cookie&quot;">​</a></h3><p>为了确保Cookie不会被前端篡改，最佳实践是将Cookie的处理完全委托给服务端。以下是一种常见的实现方式，使用Node.js和Express框架：</p><ol><li>服务端生成一个随机字符串，作为用户的身份标识。</li><li>将该字符串存储在服务器的数据库中，并作为Cookie的值发送给客户端。</li><li>当客户端再次访问网站时，客户端会将Cookie发送给服务器。</li><li>服务器根据Cookie中的值来识别用户，并从数据库中获取用户信息。</li></ol><p>在实现过程中，确保Cookie的安全性，不要直接在Cookie中存储敏感信息。最好能够将Cookie信息加密，然后在需要使用时，再由服务器端进行解密。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">express</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;express&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cookieParser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;cookie-parser&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 使用 cookie-parser 中间件</span></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">cookieParser</span><span style="color:#E1E4E8;">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 生成随机字符串作为用户的身份标识</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateToken</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">token</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">36</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> token;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 处理登录请求</span></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/login&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 验证用户名和密码</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">username</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">password</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.body;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (username </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;admin&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> password </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;123456&#39;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 生成随机字符串作为用户的身份标识</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">token</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateToken</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将身份标识存储在数据库中</span></span>\n<span class="line"><span style="color:#E1E4E8;">    db.</span><span style="color:#B392F0;">saveToken</span><span style="color:#E1E4E8;">(username, token);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将身份标识作为 Cookie 的值发送给客户端</span></span>\n<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">cookie</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;token&#39;</span><span style="color:#E1E4E8;">, token);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;登录成功&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;用户名或密码错误&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 处理其他请求</span></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从 Cookie 中获取身份标识</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">token</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.cookies.token;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 根据身份标识从数据库中获取用户信息</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.</span><span style="color:#B392F0;">getUserByToken</span><span style="color:#E1E4E8;">(token);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (user) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`欢迎您，${</span><span style="color:#E1E4E8;">user</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">username</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;请先登录&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Server started on port 3000&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">express</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;express&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cookieParser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;cookie-parser&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">express</span><span style="color:#24292E;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 使用 cookie-parser 中间件</span></span>\n<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">cookieParser</span><span style="color:#24292E;">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 生成随机字符串作为用户的身份标识</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateToken</span><span style="color:#24292E;">() {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">token</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">36</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">substr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> token;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 处理登录请求</span></span>\n<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/login&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 验证用户名和密码</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">username</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">password</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.body;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (username </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;admin&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> password </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;123456&#39;</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 生成随机字符串作为用户的身份标识</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">token</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateToken</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将身份标识存储在数据库中</span></span>\n<span class="line"><span style="color:#24292E;">    db.</span><span style="color:#6F42C1;">saveToken</span><span style="color:#24292E;">(username, token);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将身份标识作为 Cookie 的值发送给客户端</span></span>\n<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">cookie</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;token&#39;</span><span style="color:#24292E;">, token);</span></span>\n<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;登录成功&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;用户名或密码错误&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 处理其他请求</span></span>\n<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从 Cookie 中获取身份标识</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">token</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.cookies.token;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 根据身份标识从数据库中获取用户信息</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.</span><span style="color:#6F42C1;">getUserByToken</span><span style="color:#24292E;">(token);</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (user) {</span></span>\n<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`欢迎您，${</span><span style="color:#24292E;">user</span><span style="color:#032F62;">.</span><span style="color:#24292E;">username</span><span style="color:#032F62;">}`</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;请先登录&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Server started on port 3000&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>这种方式可以帮助避免前端篡改Cookie，从而提高安全性和用户数据的保护。</p><h4 id="再谈谈localstorage" tabindex="-1">再谈谈LocalStorage <a class="header-anchor" href="#再谈谈localstorage" aria-label="Permalink to &quot;再谈谈LocalStorage&quot;">​</a></h4><p>与Cookie不同，Local Storage是HTML5引入的一种客户端存储机制，数据以键值对的形式存储在浏览器中。Local Storage通常支持更大的存储容量，通常在5MB至10MB之间，这使其适用于存储大量数据。</p><p>Local Storage的数据在浏览器中一直保留，除非通过JavaScript代码显式删除。与Cookie不同，Local Storage不会在每个HTTP请求中发送到服务器，这使其更适合用于存储持久性数据，如用户首选项、本地缓存和临时存储。</p><p>在前端开发中，开发人员需要根据实际需求选择使用Cookie或LocalStorage。Cookie通常用于需要与服务器通信的情况，如保存用户登录状态，而Local Storage更适用于需要在客户端存储和检索数据的场景，例如保存用户首选项。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>Cookie和LocalStorage都是前端开发中重要的工具，用于存储用户信息和状态。不过一般情况下还是使用LocalStorage最省心吧😄</p>',40);const F=s(E,[["render",function(s,e,r,c,t,E){const F=a("ArticleMetadata"),b=a("ClientOnly");return n(),l("div",null,[y,p(b,null,{default:o((()=>[p(F)])),_:1}),i])}]]);export{t as __pageData,F as default};
