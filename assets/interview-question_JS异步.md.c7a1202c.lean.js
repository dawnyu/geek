import{_ as l,C as a,o as e,c as t,H as n,w as s,k as i,a as r}from"./chunks/framework.f92cd432.js";const u=JSON.parse('{"title":"如何理解 JS 的异步？","description":"","frontmatter":{"createTime":"2022/11/30","tags":"js,面试题"},"headers":[],"relativePath":"interview-question/JS异步.md","filePath":"全部文档/前端面试题/js/JS异步.md","lastUpdated":1696860910000}'),d={name:"interview-question/JS异步.md"},o=i("h1",{id:"如何理解-js-的异步",tabindex:"-1"},[r("如何理解 JS 的异步？ "),i("a",{class:"header-anchor",href:"#如何理解-js-的异步","aria-label":'Permalink to "如何理解 JS 的异步？"'},"​")],-1),c=i("ul",null,[i("li",null,"JS是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。"),i("li",null,"而渲染主线程承担着诸多的工作，渲染页面、执行Js 都在其中运行。"),i("li",null,"如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。"),i("li",null,"这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。"),i("li",null,"所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。"),i("li",null,"当其他线程完成时，将事先传递的回调西数包装成任务，加入到消息队列的未尾排队，等待主线程调度执行。在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行")],-1);const m=l(d,[["render",function(l,i,r,u,d,m){const J=a("ArticleMetadata"),f=a("ClientOnly");return e(),t("div",null,[o,n(f,null,{default:s((()=>[n(J)])),_:1}),c])}]]);export{u as __pageData,m as default};
