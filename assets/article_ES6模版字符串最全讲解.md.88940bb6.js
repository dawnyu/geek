import{_ as s,C as n,o as a,c as l,H as p,w as o,k as e,a as t,Q as c}from"./chunks/framework.f92cd432.js";const r=JSON.parse('{"title":"ES6模版字符串最全讲解","description":"","frontmatter":{"layout":"Article","title":"ES6模版字符串最全讲解","date":"2023/10/10","tags":"JavaScript","category":"技术专栏","preview":"/common/12.jpg","intro":"模板字符串（template strings）是JS一个非常有用并且强大的特性。模板字符串不仅可以让字符串拼接更加简洁，还支持一些高级的用法，本文和大家深入探讨模板字符串的高级用法，分享如何利用它实现更加优雅和强大的字符串操作。"},"headers":[],"relativePath":"article/ES6模版字符串最全讲解.md","filePath":"全部文档/技术专栏/前端/ES6模版字符串最全讲解.md","lastUpdated":1696945268000}'),E={name:"article/ES6模版字符串最全讲解.md"},y=e("h1",{id:"es6模版字符串最全讲解",tabindex:"-1"},[t("ES6模版字符串最全讲解 "),e("a",{class:"header-anchor",href:"#es6模版字符串最全讲解","aria-label":'Permalink to "ES6模版字符串最全讲解"'},"​")],-1),i=c('<blockquote><p>模板字符串（template strings）是JS一个非常有用并且强大的特性。模板字符串不仅可以让字符串拼接更加简洁，还支持一些高级的用法，本文和大家深入探讨模板字符串的高级用法，分享如何利用它实现更加优雅和强大的字符串操作。</p></blockquote><h2 id="什么是模板字符串" tabindex="-1">什么是模板字符串？ <a class="header-anchor" href="#什么是模板字符串" aria-label="Permalink to &quot;什么是模板字符串？&quot;">​</a></h2><p>模板字符串是ES6引入的一种新的字符串表示方式。它使用反引号（`）来定义字符串，并支持插值表达式，使字符串拼接更加方便。以下是一个简单的模板字符串示例：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Alice&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">greeting</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">`Hello, ${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}!`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(greeting); </span><span style="color:#6A737D;">// 输出 &quot;Hello, Alice!&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Alice&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">greeting</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">`Hello, ${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}!`</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(greeting); </span><span style="color:#6A737D;">// 输出 &quot;Hello, Alice!&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在上面的示例中，<code>${name}</code> 是一个插值表达式，它会在运行时被替换为变量 <code>name</code> 的值。这使得在字符串中嵌入变量变得轻而易举。</p><h2 id="_1-多行字符串" tabindex="-1">1. 多行字符串 <a class="header-anchor" href="#_1-多行字符串" aria-label="Permalink to &quot;1. 多行字符串&quot;">​</a></h2><p>传统的字符串表示方式要创建多行字符串通常需要使用换行符（<code>\\n</code>），而模板字符串允许您直接编写多行字符串，使代码更加清晰：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">multiLineString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">`</span></span>\n<span class="line"><span style="color:#9ECBFF;">  This is a</span></span>\n<span class="line"><span style="color:#9ECBFF;">  multi-line</span></span>\n<span class="line"><span style="color:#9ECBFF;">  string.</span></span>\n<span class="line"><span style="color:#9ECBFF;">`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(multiLineString);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">multiLineString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">`</span></span>\n<span class="line"><span style="color:#032F62;">  This is a</span></span>\n<span class="line"><span style="color:#032F62;">  multi-line</span></span>\n<span class="line"><span style="color:#032F62;">  string.</span></span>\n<span class="line"><span style="color:#032F62;">`</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(multiLineString);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这使得文本块的创建变得更加自然，无需手动添加换行符。</p><h2 id="_2-嵌套模板字符串" tabindex="-1">2. 嵌套模板字符串 <a class="header-anchor" href="#_2-嵌套模板字符串" aria-label="Permalink to &quot;2. 嵌套模板字符串&quot;">​</a></h2><p>模板字符串可以嵌套在其他模板字符串内部，这样可以构建复杂的字符串结构。这在创建HTML模板或其他嵌套字符串时非常有用：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">firstName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;John&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lastName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Doe&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fullNameHTML</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">`</span></span>\n<span class="line"><span style="color:#9ECBFF;">  &lt;div&gt;</span></span>\n<span class="line"><span style="color:#9ECBFF;">    &lt;p&gt;First Name: ${</span><span style="color:#E1E4E8;">firstName</span><span style="color:#9ECBFF;">}&lt;/p&gt;</span></span>\n<span class="line"><span style="color:#9ECBFF;">    &lt;p&gt;Last Name: ${</span><span style="color:#E1E4E8;">lastName</span><span style="color:#9ECBFF;">}&lt;/p&gt;</span></span>\n<span class="line"><span style="color:#9ECBFF;">  &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#9ECBFF;">`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(fullNameHTML);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">firstName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;John&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">lastName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Doe&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fullNameHTML</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">`</span></span>\n<span class="line"><span style="color:#032F62;">  &lt;div&gt;</span></span>\n<span class="line"><span style="color:#032F62;">    &lt;p&gt;First Name: ${</span><span style="color:#24292E;">firstName</span><span style="color:#032F62;">}&lt;/p&gt;</span></span>\n<span class="line"><span style="color:#032F62;">    &lt;p&gt;Last Name: ${</span><span style="color:#24292E;">lastName</span><span style="color:#032F62;">}&lt;/p&gt;</span></span>\n<span class="line"><span style="color:#032F62;">  &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#032F62;">`</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(fullNameHTML);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_3-函数调用" tabindex="-1">3. 函数调用 <a class="header-anchor" href="#_3-函数调用" aria-label="Permalink to &quot;3. 函数调用&quot;">​</a></h2><p>模板字符串也可以作为函数的参数传递，这为字符串处理提供了更多的灵活性。您可以定义一个函数，接收模板字符串作为参数，并在函数内部处理字符串，例如格式化字符串或执行其他操作：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">formatCurrency</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">strings</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  values.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">`${</span><span style="color:#E1E4E8;">strings</span><span style="color:#9ECBFF;">[</span><span style="color:#E1E4E8;">index</span><span style="color:#9ECBFF;">]</span><span style="color:#9ECBFF;">}${</span><span style="color:#E1E4E8;">value</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  result </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> strings[strings.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">price</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">19.99</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">discount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">formattedPrice</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">formatCurrency</span><span style="color:#9ECBFF;">`Price: ${</span><span style="color:#E1E4E8;">price</span><span style="color:#9ECBFF;">} (20%)`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(formattedPrice); </span><span style="color:#6A737D;">// 输出 &quot;Price: 19.99 (20%)&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">formatCurrency</span><span style="color:#24292E;">(</span><span style="color:#E36209;">strings</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">values</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">  values.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">value</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">`${</span><span style="color:#24292E;">strings</span><span style="color:#032F62;">[</span><span style="color:#24292E;">index</span><span style="color:#032F62;">]</span><span style="color:#032F62;">}${</span><span style="color:#24292E;">value</span><span style="color:#032F62;">}`</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">  });</span></span>\n<span class="line"><span style="color:#24292E;">  result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> strings[strings.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">price</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">19.99</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">discount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">formattedPrice</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">formatCurrency</span><span style="color:#032F62;">`Price: ${</span><span style="color:#24292E;">price</span><span style="color:#032F62;">} (20%)`</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(formattedPrice); </span><span style="color:#6A737D;">// 输出 &quot;Price: 19.99 (20%)&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这个例子中，<code>formatCurrency</code> 函数接收一个模板字符串以及值，然后将它们组合成一个新的字符串。这种方式可以用于国际化、文本格式化等场景。</p><h2 id="_4-原始模板字符串" tabindex="-1">4. 原始模板字符串 <a class="header-anchor" href="#_4-原始模板字符串" aria-label="Permalink to &quot;4. 原始模板字符串&quot;">​</a></h2><p>除了默认的模板字符串处理方式，您还可以使用原始模板字符串（raw template strings）。原始模板字符串不会对转义字符进行转义处理，而是保留它们的原始形式。要使用原始模板字符串，只需在模板字符串前加上一个 <code>String.raw</code> 函数：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">filePath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">raw</span><span style="color:#9ECBFF;">`C:</span><span style="color:#79B8FF;">\\U</span><span style="color:#9ECBFF;">sers</span><span style="color:#79B8FF;">\\J</span><span style="color:#9ECBFF;">ohn</span><span style="color:#79B8FF;">\\D</span><span style="color:#9ECBFF;">esktop</span><span style="color:#79B8FF;">\\f</span><span style="color:#9ECBFF;">ile.txt`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(filePath); </span><span style="color:#6A737D;">// 输出 &quot;C:\\Users\\John\\Desktop\\file.txt&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">filePath</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">raw</span><span style="color:#032F62;">`C:</span><span style="color:#005CC5;">\\U</span><span style="color:#032F62;">sers</span><span style="color:#005CC5;">\\J</span><span style="color:#032F62;">ohn</span><span style="color:#005CC5;">\\D</span><span style="color:#032F62;">esktop</span><span style="color:#005CC5;">\\f</span><span style="color:#032F62;">ile.txt`</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(filePath); </span><span style="color:#6A737D;">// 输出 &quot;C:\\Users\\John\\Desktop\\file.txt&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这在处理正则表达式、文件路径等需要保留转义字符的场景中非常有用。</p><h2 id="_5-标签模板字符串" tabindex="-1">5. 标签模板字符串 <a class="header-anchor" href="#_5-标签模板字符串" aria-label="Permalink to &quot;5. 标签模板字符串&quot;">​</a></h2><p>标签模板字符串是一种特殊的模板字符串，它允许您定义一个标签函数，该函数可以处理模板字符串的内容。标签函数会接收模板字符串的各个部分，并返回最终的字符串结果。这样我们就可以自定义字符串的生成方式。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">customTag</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">strings</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  strings.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> string;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> values.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> values[index];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Alice&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">age</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">formattedString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">customTag</span><span style="color:#9ECBFF;">`Name: ${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}, Age: ${</span><span style="color:#E1E4E8;">age</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(formattedString); </span><span style="color:#6A737D;">// 输出 &quot;NAME: ALICE, AGE: 30&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">customTag</span><span style="color:#24292E;">(</span><span style="color:#E36209;">strings</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">values</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">  strings.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> string;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> values.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> values[index];</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">  });</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Alice&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">age</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">formattedString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">customTag</span><span style="color:#032F62;">`Name: ${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}, Age: ${</span><span style="color:#24292E;">age</span><span style="color:#032F62;">}`</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(formattedString); </span><span style="color:#6A737D;">// 输出 &quot;NAME: ALICE, AGE: 30&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>在这个例子中，<code>customTag</code> 函数将模板字符串的内容合并为一个大写的字符串。这种方式可用于自定义文本处理或创建特定格式的字符串。</p><h2 id="_6-高级用法-标签函数" tabindex="-1">6.高级用法：标签函数 <a class="header-anchor" href="#_6-高级用法-标签函数" aria-label="Permalink to &quot;6.高级用法：标签函数&quot;">​</a></h2><p>标签函数是一种强大的工具，它们允许您在模板字符串的每个部分上执行自定义操作。这些函数接收字符串部分和插值表达式的值，使您能够根据需要进行文本处理、格式化或执行其他操作。</p><p>以下是一个更复杂的示例，展示了标签函数的强大功能：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">highlight</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">strings</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  strings.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> string;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> values.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">`&lt;span class=&quot;highlight&quot;&gt;${</span><span style="color:#E1E4E8;">values</span><span style="color:#9ECBFF;">[</span><span style="color:#E1E4E8;">index</span><span style="color:#9ECBFF;">]</span><span style="color:#9ECBFF;">}&lt;/span&gt;`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">keyword</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;JavaScript&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">description</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;a versatile programming language&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">highlightedText</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">highlight</span><span style="color:#9ECBFF;">`Learn ${</span><span style="color:#E1E4E8;">keyword</span><span style="color:#9ECBFF;">} - ${</span><span style="color:#E1E4E8;">description</span><span style="color:#9ECBFF;">} today!`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(highlightedText);</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">highlight</span><span style="color:#24292E;">(</span><span style="color:#E36209;">strings</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">values</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">  strings.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> string;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> values.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">`&lt;span class=&quot;highlight&quot;&gt;${</span><span style="color:#24292E;">values</span><span style="color:#032F62;">[</span><span style="color:#24292E;">index</span><span style="color:#032F62;">]</span><span style="color:#032F62;">}&lt;/span&gt;`</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">  });</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">keyword</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;JavaScript&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">description</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;a versatile programming language&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">highlightedText</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">highlight</span><span style="color:#032F62;">`Learn ${</span><span style="color:#24292E;">keyword</span><span style="color:#032F62;">} - ${</span><span style="color:#24292E;">description</span><span style="color:#032F62;">} today!`</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(highlightedText);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>在这个示例中，<code>highlight</code> 标签函数将模板字符串的各个部分合并，并将 <code>${values[index]}</code> 部分用 <code>&lt;span class=&quot;highlight&quot;&gt;</code> 包装，以实现文本高亮效果。</p><h2 id="_7-模板字符串的性能" tabindex="-1">7. 模板字符串的性能 <a class="header-anchor" href="#_7-模板字符串的性能" aria-label="Permalink to &quot;7. 模板字符串的性能&quot;">​</a></h2><p>与传统字符串拼接相比，模板字符串具有更好的性能，因为JS引擎可以在编译时对模板字符串进行优化，从而降低了运行时的开销。当需要频繁进行字符串拼接操作时，建议大家尽量使用模板字符串。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>模板字符串是JS中一个强大且灵活的特性，它不仅简化了字符串拼接，还支持多行字符串、插值表达式、原始模板字符串、标签函数等高级用法。合理的运用模板字符串，可以提高代码的可读性和维护性。</p>',33);const F=s(E,[["render",function(s,e,t,c,r,E){const F=n("ArticleMetadata"),u=n("ClientOnly");return a(),l("div",null,[y,p(u,null,{default:o((()=>[p(F)])),_:1}),i])}]]);export{r as __pageData,F as default};
