import{_ as s,C as n,o as a,c as l,H as p,w as o,k as e,a as c,Q as r}from"./chunks/framework.e34e23c1.js";const t=JSON.parse('{"title":"node实现云函数","description":"","frontmatter":{"layout":"Article","title":"node实现云函数","date":"2023/10/01","tags":"Node","category":"技术专栏","preview":"/common/62.jpg","intro":"云函数是一种无服务器计算模型，它允许你在需要时运行代码，而无需管理服务器的基础架构。它适用于各种场景，包括事件驱动型的任务，如响应 HTTP 请求、处理队列等。"},"headers":[],"relativePath":"article/node实现云函数.md","filePath":"全部文档/技术专栏/前端/node实现云函数.md","lastUpdated":1696947851000}'),E={name:"article/node实现云函数.md"},y=e("h1",{id:"node实现云函数",tabindex:"-1"},[c("node实现云函数 "),e("a",{class:"header-anchor",href:"#node实现云函数","aria-label":'Permalink to "node实现云函数"'},"​")],-1),i=r('<p>云函数是一种无服务器计算模型，它允许你在需要时运行代码，而无需管理服务器的基础架构。它适用于各种场景，包括事件驱动型的任务，如响应 HTTP 请求、处理队列等。 举个🌰：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 示例：简单的云函数</span></span>\n<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;第一个云函数&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    statusCode: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    body: { message, event },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  };</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 示例：简单的云函数</span></span>\n<span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">message</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;第一个云函数&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    statusCode: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    body: { message, event },</span></span>\n<span class="line"><span style="color:#24292E;">  };</span></span>\n<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h1 id="常见的云开发方式" tabindex="-1">常见的云开发方式 <a class="header-anchor" href="#常见的云开发方式" aria-label="Permalink to &quot;常见的云开发方式&quot;">​</a></h1>',3),F=e("ul",null,[e("li",null,"小程序云开发"),e("li",null,"腾讯云serverless"),e("li",null,"BFF服务编排等")],-1),u=e("h1",{id:"不想花钱怎么搞",tabindex:"-1"},[c("不想花钱怎么搞？ "),e("a",{class:"header-anchor",href:"#不想花钱怎么搞","aria-label":'Permalink to "不想花钱怎么搞？"'},"​")],-1),d=r('<p>自己撸一个不就得了😁~</p><h2 id="先了解下沙箱" tabindex="-1">先了解下沙箱 <a class="header-anchor" href="#先了解下沙箱" aria-label="Permalink to &quot;先了解下沙箱&quot;">​</a></h2><p>沙箱是一个计算机安全概念，用于隔离和保护一个程序或一段代码不受其他程序或系统的影响，以确保其安全性和稳定性。沙箱技术通常被用来运行不受信任的代码，如用户提交的脚本或第三方插件，同时限制其对系统和资源的访问权限。</p><ol><li><strong>隔离性：</strong> 沙箱通过创建一个独立的执行环境，将运行的代码与主系统或其他代码隔离开来。这意味着在沙箱中运行的代码无法直接访问主系统的资源或其他进程的数据。</li><li><strong>资源限制：</strong> 沙箱可以对运行的代码施加资源限制，例如内存、CPU 使用量和文件系统访问权限。这有助于防止代码耗尽系统资源或执行恶意操作。</li><li><strong>权限控制：</strong> 沙箱可以根据需要对代码的权限进行精细的控制。这意味着你可以指定哪些系统资源和功能可用于运行的代码，哪些不可用。例如，可以限制网络访问或文件访问权限。</li><li><strong>错误隔离：</strong> 如果在沙箱中运行的代码发生错误或崩溃，它通常不会影响到主系统或其他代码。沙箱提供了错误隔离，确保问题局限在沙箱内部。</li><li><strong>安全性：</strong> 沙箱用于运行不受信任的代码，以减少潜在的安全漏洞和攻击。通过限制代码的访问权限，可以降低潜在风险。</li><li><strong>多用途性：</strong> 沙箱不仅用于运行不受信任的代码，还可以用于测试、调试和隔离应用程序的不同部分。</li></ol><h2 id="几种实现沙箱环境的方法" tabindex="-1">几种实现沙箱环境的方法 <a class="header-anchor" href="#几种实现沙箱环境的方法" aria-label="Permalink to &quot;几种实现沙箱环境的方法&quot;">​</a></h2><p><strong>vm</strong> vm是node内置模块之一，用于创建虚拟机环境，以便在其中运行 JavaScript 代码。虚拟机环境提供了隔离和安全性，允许你在不污染当前 Node.js 进程的全局环境的情况下执行代码。； 相对于eval，Function来说，安全性也更好一点；</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;1+2&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 3</span></span>\n<span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;return a+b&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">// 3</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 使用vm</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;vm&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">context</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  x: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  y: </span><span style="color:#79B8FF;">20</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">`</span></span>\n<span class="line"><span style="color:#9ECBFF;">  const result = x + y;</span></span>\n<span class="line"><span style="color:#9ECBFF;">  result;</span></span>\n<span class="line"><span style="color:#9ECBFF;">`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.</span><span style="color:#B392F0;">runInNewContext</span><span style="color:#E1E4E8;">(code, context);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;1+2&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 3</span></span>\n<span class="line"><span style="color:#24292E;">func </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;return a+b&#39;</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">// 3</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 使用vm</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;vm&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">context</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  x: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">  y: </span><span style="color:#005CC5;">20</span></span>\n<span class="line"><span style="color:#24292E;">};</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">`</span></span>\n<span class="line"><span style="color:#032F62;">  const result = x + y;</span></span>\n<span class="line"><span style="color:#032F62;">  result;</span></span>\n<span class="line"><span style="color:#032F62;">`</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.</span><span style="color:#6F42C1;">runInNewContext</span><span style="color:#24292E;">(code, context);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>VM常用的api：</p><ol><li><strong>vm.createContext(sandbox)</strong>: 创建一个新的上下文对象，可用于在虚拟机中执行代码。<strong>sandbox</strong> 参数是一个可选的对象，它会被注入到虚拟机的全局作用域中，可以在其中访问对象的属性和方法。</li><li><strong>vm.runInContext(code, context, options)</strong>: 在指定的上下文环境中执行 JavaScript 代码。<strong>code</strong> 参数是要执行的代码字符串，<strong>context</strong> 参数是由 <strong>vm.createContext</strong> 创建的上下文对象。<strong>options</strong> 参数是一个可选的配置，可参考官网；</li><li><strong>vm.runInThisContext(code, options)</strong>: 在当前上下文环境中执行 JavaScript 代码。不需要指定上下文对象，代码将在当前环境中执行。</li></ol><p><strong>runInThisContext</strong>会在当前上下文中执行JavaScript 代码，能够访问全局变量和全局函数。 一般用于动态加载，比如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;externalScript.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;utf8&#39;</span><span style="color:#E1E4E8;">); </span></span>\n<span class="line"><span style="color:#E1E4E8;">vm.</span><span style="color:#B392F0;">runInThisContext</span><span style="color:#E1E4E8;">(code);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;externalScript.js&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;utf8&#39;</span><span style="color:#24292E;">); </span></span>\n<span class="line"><span style="color:#24292E;">vm.</span><span style="color:#6F42C1;">runInThisContext</span><span style="color:#24292E;">(code);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="4"><li><strong>vm.runInNewContext(code, sandbox, options)</strong>: 在新的上下文环境中执行 JavaScript 代码。与 <strong>runInContext</strong> 类似，但会创建一个新的上下文环境，而不是在现有的上下文中执行。</li></ol><p>以上都是直接执行，不会返回编译后的代码；下面几个api是先编译后，可以在程序中多次执行；</p><ol start="5"><li><strong>vm.createScript(code, options)</strong>: 创建一个 <strong>Script</strong> 对象，该对象包含要执行的 JavaScript 代码。<strong>code</strong> 参数是代码字符串，<strong>options</strong> 参数是一个可选的选项对象。</li><li><strong>Script.runInContext(contextifiedSandbox, options)</strong>: 在指定的上下文环境中执行 <strong>Script</strong> 对象中包含的代码。</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm1.</span><span style="color:#B392F0;">createScript</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`var a = 1;a;`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">content</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm1.</span><span style="color:#B392F0;">createContext</span><span style="color:#E1E4E8;">({});</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> script.</span><span style="color:#B392F0;">runInContext</span><span style="color:#E1E4E8;">(content);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">script</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm1.</span><span style="color:#6F42C1;">createScript</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`var a = 1;a;`</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">content</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm1.</span><span style="color:#6F42C1;">createContext</span><span style="color:#24292E;">({});</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> script.</span><span style="color:#6F42C1;">runInContext</span><span style="color:#24292E;">(content);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="7"><li><strong>Script.runInNewContext(sandbox, options)</strong>: 在新的上下文环境中执行 <strong>Script</strong> 对象中包含的代码。</li><li><strong>Script.runInThisContext(options)</strong>: 在当前上下文环境中执行 <strong>Script</strong> 对象中包含的代码。</li></ol><ul><li>优点： <ul><li>简单，不需要额外的依赖。</li><li>适用于一些基本的隔离需求。</li></ul></li><li>缺点： <ul><li>安全性有限，不能提供高级的隔离；</li></ul></li></ul><p>比如这段代码：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">`const fs = require(&#39;fs&#39;); const data = fs.readFileSync(&#39;/etc/passwd&#39;, &#39;utf8&#39;);console.log(data);`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">vm.</span><span style="color:#B392F0;">runInContext</span><span style="color:#E1E4E8;">(evilCode, context);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">`const fs = require(&#39;fs&#39;); const data = fs.readFileSync(&#39;/etc/passwd&#39;, &#39;utf8&#39;);console.log(data);`</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">vm.</span><span style="color:#6F42C1;">runInContext</span><span style="color:#24292E;">(evilCode, context);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>vm2</strong><strong>vm2</strong> 是开源社区提供的一个库，它基于vm在 Node.js 中创建一个隔离的 JavaScript 执行环境，通过es6新增的代理（Proxy）机制，来拦截对外部属性的访问，同时限制对敏感资源的访问，可以自定义全局对象，提供安全配置和错误处理来提高代码的安全性和隔离性。 vm2 提供3个类： <strong>VM：<strong>其中</strong>VM</strong>只支持简单的JavaScript代码执行，不支持require，所以VM不支持CommonJS模块加载。 **NodeVM：**这是 <strong>vm2</strong> 的核心类，用于创建一个沙箱环境。 <strong>VMScript</strong>：用于预编译 JavaScript 代码的类。 <strong>NodeVM核心方法：</strong></p><ol><li><strong>vm.run(code: string)</strong>：在沙箱环境中执行 JavaScript 代码，并返回执行结果。</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;console.log(&quot;Hello from sandbox!&quot;);&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;console.log(&quot;Hello from sandbox!&quot;);&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li><strong>vm.runScript(script: VMScript)</strong>：运行一个预编译的 <strong>VMScript</strong> 对象，可以提高执行效率。</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VMScript</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;console.log(&quot;Hello from script!&quot;);&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.</span><span style="color:#B392F0;">runScript</span><span style="color:#E1E4E8;">(script);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">script</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VMScript</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;console.log(&quot;Hello from script!&quot;);&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.</span><span style="color:#6F42C1;">runScript</span><span style="color:#24292E;">(script);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="3"><li><strong>vm.freeze(object: any, name: string)</strong>：冻结一个对象，阻止其在沙箱中被修改。</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { value: </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;"> };</span></span>\n<span class="line"><span style="color:#E1E4E8;">vm.</span><span style="color:#B392F0;">freeze</span><span style="color:#E1E4E8;">(obj, </span><span style="color:#9ECBFF;">&#39;obj&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { value: </span><span style="color:#005CC5;">42</span><span style="color:#24292E;"> };</span></span>\n<span class="line"><span style="color:#24292E;">vm.</span><span style="color:#6F42C1;">freeze</span><span style="color:#24292E;">(obj, </span><span style="color:#032F62;">&#39;obj&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="4"><li><strong>vm.unfreeze(name: string)</strong>：解冻被冻结的对象，允许其在沙箱中被修改。</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">vm.</span><span style="color:#B392F0;">unfreeze</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;obj&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">vm.</span><span style="color:#6F42C1;">unfreeze</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;obj&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><strong>优点：</strong></li></ul><ol><li><strong>上下文隔离</strong>：<strong>vm2</strong> 使用内置 <strong>vm</strong> 模块来创建一个新的上下文执行环境，与当前 Node.js 应用程序的全局上下文完全隔离。</li><li><strong>安全沙箱配置</strong>：通过限制访问 Node.js 核心模块、系统模块和一些敏感资源来创建沙箱环境。不能直接访问文件系统、网络、操作系统命令等敏感功能，从而提高了安全性。你可以选择是否允许代码访问某些全局对象、设置执行时间限制、限制内存使用等。</li><li><strong>自定义全局对象</strong>： 限制了访问核心模块和系统资源，但它允许你定义自己的全局对象，以供沙箱中的代码使用。</li><li><strong>错误处理</strong>：提供错误处理机制，可以捕获沙箱中的异常并返回给主程序，便于做错误处理和日志记录。</li><li><strong>性能优化</strong>：通过代码预编译和缓存，来提高代码执行的性能。</li></ol><ul><li><strong>缺点：</strong></li></ul><ol><li><strong>不适合高性能应用</strong>：例如游戏引擎或高吞吐量的服务器应用，更适合直接执行代码。</li><li><strong>无法完全隔离</strong>：虽然 <strong>vm2</strong> 提供了一定程度的隔离性，但它仍然无法完全隔离代码。一些全局对象和变量仍然可以在沙箱中访问。</li></ol><p><strong>isolated-vm：</strong> 这个npm库也是vm2作者开发的，作者认为vm2现在越来越难维护，已经到了不得不终止项目的地步 🤣🤣</p><blockquote><p><img src="https://cdn.geekbuluo.com/blog/20231010/f17f9a.png" alt="">：Unfortunately, the growing complexity of Node has brought us to a crossroads. We now find ourselves facing an escape so complicated that fixing it seems impossible. And this isn&#39;t about one isolated issue. Recent reports have highlighted that sustaining this project in its current form is not viable in the long term.</p></blockquote><ul><li>优点： <ul><li>提供更高级的隔离和安全性，可以在不同的 V8 上下文中运行代码。</li><li>具有更强大的隔离，可以限制对模块和全局对象的访问。</li><li>更适合于运行不受信任的代码。</li></ul></li><li>缺点： <ul><li>较复杂，学习曲线较陡。</li><li>性能开销较大。</li></ul></li></ul><p><strong>Docker：</strong></p><ul><li>优点： <ul><li>提供了完全的容器隔离，可以运行整个应用程序环境。</li><li>适用于运行不受信任的代码以及其他应用程序的隔离需求。</li></ul></li><li>缺点： <ul><li>较重量级，需要额外的系统资源。</li><li>对于简单的隔离需求可能过于复杂</li></ul></li></ul><h2 id="基于vm2开发个云函数" tabindex="-1">基于vm2开发个云函数 <a class="header-anchor" href="#基于vm2开发个云函数" aria-label="Permalink to &quot;基于vm2开发个云函数&quot;">​</a></h2><h3 id="先看个小例子" tabindex="-1">先看个小例子 <a class="header-anchor" href="#先看个小例子" aria-label="Permalink to &quot;先看个小例子&quot;">​</a></h3><p>再回到开篇说到的那个例子：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 示例：简单的云函数</span></span>\n<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;第一个云函数&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    statusCode: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    body: { message, event },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  };</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 示例：简单的云函数</span></span>\n<span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">message</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;第一个云函数&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    statusCode: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    body: { message, event },</span></span>\n<span class="line"><span style="color:#24292E;">  };</span></span>\n<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>下面是实现以上例子的code</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Koa</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;koa&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">KoaStatic</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;koa-static&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Router</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;koa-router&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bodyParser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;koa-bodyparser&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">NodeVM</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;vm2&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeVM</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// wrapper: &#39;none&#39;,</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Koa</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">router</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Router</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/cloud/test&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">script</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.request.body;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(script);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ctx.body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { result: a.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">() };</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">serve</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KoaStatic</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;./public&#39;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(serve);</span></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">bodyParser</span><span style="color:#E1E4E8;">());</span></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(router.</span><span style="color:#B392F0;">routes</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(router.</span><span style="color:#B392F0;">allowedMethods</span><span style="color:#E1E4E8;">());</span></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8003</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Koa</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;koa&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">KoaStatic</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;koa-static&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Router</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;koa-router&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bodyParser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;koa-bodyparser&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">NodeVM</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;vm2&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NodeVM</span><span style="color:#24292E;">({</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// wrapper: &#39;none&#39;,</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Koa</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">router</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Router</span><span style="color:#24292E;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/cloud/test&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">script</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.request.body;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(script);</span></span>\n<span class="line"><span style="color:#24292E;">  ctx.body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { result: a.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">() };</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">serve</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KoaStatic</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;./public&#39;</span><span style="color:#24292E;">));</span></span>\n<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(serve);</span></span>\n<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">bodyParser</span><span style="color:#24292E;">());</span></span>\n<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(router.</span><span style="color:#6F42C1;">routes</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(router.</span><span style="color:#6F42C1;">allowedMethods</span><span style="color:#24292E;">());</span></span>\n<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8003</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>使用postman测试，可以正常执行： <img src="https://cdn.geekbuluo.com/blog/20231010/e0ed49.png" alt="image.png"></p><h3 id="实现一个功能相对完善的云函数服务" tabindex="-1">实现一个功能相对完善的云函数服务 <a class="header-anchor" href="#实现一个功能相对完善的云函数服务" aria-label="Permalink to &quot;实现一个功能相对完善的云函数服务&quot;">​</a></h3><p><img src="https://cdn.geekbuluo.com/blog/20231010/202e04.png" alt=""></p><ol><li><strong>先整一个云函数模版</strong></li></ol><p>关键步骤：</p><ol><li>创建通配符路由：/cloud/:funcName，funcName：云函数名称</li><li>实现一个通用关闭应用接口shutdown</li><li>确定外部模块引入打标位置，示例为9，29（这个后面用到）</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Koa</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;koa&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Router</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;koa-router&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">KoaStatic</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;koa-static&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cors</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@koa/cors&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bodyParser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;koa-bodyparser&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">NodeVM</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;vm2&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">/** 依赖库，打标位置 */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">jsonStr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">`../db/func.json`</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(jsonStr);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Koa</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">router</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Router</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeVM</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  require: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    external: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    root: </span><span style="color:#9ECBFF;">&#39;./&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  sandbox: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 次数插入依赖， 打标位置</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// wrapper: &#39;node&#39;,</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/cloud/:funcName&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">funcName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.params.funcName;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">body</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.request;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cloud</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(cloud.script);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ctx.body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">(body);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ctx.body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { message: error.message };</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/shutdown&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 在这里执行关闭操作</span></span>\n<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Server has been shut down.&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">bodyParser</span><span style="color:#E1E4E8;">());</span></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">cors</span><span style="color:#E1E4E8;">());</span></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(router.</span><span style="color:#B392F0;">routes</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(router.</span><span style="color:#B392F0;">allowedMethods</span><span style="color:#E1E4E8;">());</span></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8001</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Koa</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;koa&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Router</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;koa-router&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">KoaStatic</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;koa-static&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cors</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@koa/cors&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bodyParser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;koa-bodyparser&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">NodeVM</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;vm2&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#6A737D;">/** 依赖库，打标位置 */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">() {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">jsonStr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">`../db/func.json`</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(jsonStr);</span></span>\n<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Koa</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">router</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Router</span><span style="color:#24292E;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NodeVM</span><span style="color:#24292E;">({</span></span>\n<span class="line"><span style="color:#24292E;">  require: {</span></span>\n<span class="line"><span style="color:#24292E;">    external: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    root: </span><span style="color:#032F62;">&#39;./&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">  },</span></span>\n<span class="line"><span style="color:#24292E;">  sandbox: {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 次数插入依赖， 打标位置</span></span>\n<span class="line"><span style="color:#24292E;">  },</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// wrapper: &#39;node&#39;,</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/cloud/:funcName&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">funcName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.params.funcName;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">body</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.request;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cloud</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {};</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(cloud.script);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    ctx.body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">(body);</span></span>\n<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>\n<span class="line"><span style="color:#24292E;">    ctx.body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { message: error.message };</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/shutdown&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 在这里执行关闭操作</span></span>\n<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Server has been shut down.&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">  });</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">bodyParser</span><span style="color:#24292E;">());</span></span>\n<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">cors</span><span style="color:#24292E;">());</span></span>\n<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(router.</span><span style="color:#6F42C1;">routes</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(router.</span><span style="color:#6F42C1;">allowedMethods</span><span style="color:#24292E;">());</span></span>\n<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8001</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div><ol start="2"><li><strong>创建云函数</strong></li></ol><p>参考上面koa标准模版，构建一个云函数管理服务 关键步骤：</p><ol><li>简单起见，我们直接使用json文件存储云函数</li><li>创建成功后改函数名就不能被其他人在使用</li></ol><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/cloud/create&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">body</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.request;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`../db/func.json`</span><span style="color:#E1E4E8;">, { funcName: body.funcName });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ctx.body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { code: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, msg: </span><span style="color:#9ECBFF;">&#39;npm install sunccess&#39;</span><span style="color:#E1E4E8;"> };</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/cloud/create&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">body</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.request;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`../db/func.json`</span><span style="color:#24292E;">, { funcName: body.funcName });</span></span>\n<span class="line"><span style="color:#24292E;">  ctx.body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { code: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, msg: </span><span style="color:#032F62;">&#39;npm install sunccess&#39;</span><span style="color:#24292E;"> };</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="3"><li><strong>实现云函数并运行</strong></li></ol><p>关键步骤：</p><ol><li>校验云函数合法性</li><li>把云函数实现内容存储到刚创建的云函数中</li><li>通过child_process提供的spawn方法启动一个子进程运行刚创建的云函数服务</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/cloud/save&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">body</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.request;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 校验逻辑省略</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cloud</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`../db/func.json`</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">  cloud.script </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> body.script;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`../db/func.json`</span><span style="color:#E1E4E8;">, cloud);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 子进程启动node服务</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">nodeStart</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`../cloudFunction/vm2.js`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ctx.body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { code: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, msg: </span><span style="color:#9ECBFF;">&#39;func is run&#39;</span><span style="color:#E1E4E8;"> };</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/cloud/save&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">body</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.request;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 校验逻辑省略</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cloud</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`../db/func.json`</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {};</span></span>\n<span class="line"><span style="color:#24292E;">  cloud.script </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> body.script;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`../db/func.json`</span><span style="color:#24292E;">, cloud);</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 子进程启动node服务</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">nodeStart</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`../cloudFunction/vm2.js`</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">  ctx.body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { code: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, msg: </span><span style="color:#032F62;">&#39;func is run&#39;</span><span style="color:#24292E;"> };</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="4"><li><strong>处理外部模块（npm包）</strong></li></ol><p>vm2默认是隔离上下文当中的局部变量或函数的，此时如果不在程序中安装依赖云函数是无法正常运行的，NodeVM中提供sandbox参数可以注入依赖的模块,比如想使用dayjs包：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dayjs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(dayjs);</span></span>\n<span class="line"><span style="color:#E1E4E8;">vm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeVM</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  sandbox: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    dayjs</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dayjs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(dayjs);</span></span>\n<span class="line"><span style="color:#24292E;">vm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NodeVM</span><span style="color:#24292E;">({</span></span>\n<span class="line"><span style="color:#24292E;">  sandbox: {</span></span>\n<span class="line"><span style="color:#24292E;">    dayjs</span></span>\n<span class="line"><span style="color:#24292E;">  },</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>关键步骤：</p><ol><li>创建安装依赖的接口</li><li>创建安装依赖命令：npm install :npmName,并通过execSync执行到云函数所在目录</li><li>关闭子进程中运行云函数Node服务</li><li>获取刚创建的云函数主应用文件，并按行进行数组处理</li><li>根据上面打标的位置，把这两个代码插入云函数源码对应的位置： <ol><li>const npmName = require(&#39;npmName&#39;);</li><li>npmName: npmName,</li></ol></li><li>修改过的源码覆盖原来的代码；</li><li>重新通过spawn(&#39;node&#39;, [path.join(__dirname, &#39;云函数主入口路径&#39;)])重启云函数服务；</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/cloud/npminstall&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">body</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.request;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">npmName</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> body; </span><span style="color:#6A737D;">// 版本</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">npmCommand</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">`npm install ${</span><span style="color:#E1E4E8;">npmName</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">execSync</span><span style="color:#E1E4E8;">(npmCommand, { cwd: </span><span style="color:#9ECBFF;">&#39;../cloudFunction&#39;</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> axios.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://localhost:8001/shutdown&#39;</span><span style="color:#E1E4E8;">, {});</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cloud</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`../db/func.json`</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">  cloud.npmName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> npmName;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`../db/func.json`</span><span style="color:#E1E4E8;">, cloud);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 2.修改代码：：：当然，完整功能这里要保存代码快照，可以切换回滚</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 读取需要添加配置行数</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">line</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`../db/config.json`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fileStr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">`../cloudFunction/vm2.js`</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">codeLines</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fileStr.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  codeLines.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(line.requireLine, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">`const ${</span><span style="color:#E1E4E8;">npmName</span><span style="color:#9ECBFF;">} = require(&#39;${</span><span style="color:#E1E4E8;">npmName</span><span style="color:#9ECBFF;">}&#39;);`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  codeLines.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(line.dependLine, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">`${</span><span style="color:#E1E4E8;">npmName</span><span style="color:#9ECBFF;">},`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  fs.</span><span style="color:#B392F0;">writeFileSync</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">`../cloudFunction/vm2.js`</span><span style="color:#E1E4E8;">), codeLines.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&#39;utf8&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 修改源文件可编辑行数</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// line.requireLine += 1;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// line.dependLine += 1;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`../db/config.json`</span><span style="color:#E1E4E8;">, line);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ctx.body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { code: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, msg: </span><span style="color:#9ECBFF;">&#39;npm install sunccess&#39;</span><span style="color:#E1E4E8;"> };</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/cloud/npminstall&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">body</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.request;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">npmName</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> body; </span><span style="color:#6A737D;">// 版本</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">npmCommand</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">`npm install ${</span><span style="color:#24292E;">npmName</span><span style="color:#032F62;">}`</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">execSync</span><span style="color:#24292E;">(npmCommand, { cwd: </span><span style="color:#032F62;">&#39;../cloudFunction&#39;</span><span style="color:#24292E;"> });</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> axios.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://localhost:8001/shutdown&#39;</span><span style="color:#24292E;">, {});</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cloud</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`../db/func.json`</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {};</span></span>\n<span class="line"><span style="color:#24292E;">  cloud.npmName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> npmName;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`../db/func.json`</span><span style="color:#24292E;">, cloud);</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 2.修改代码：：：当然，完整功能这里要保存代码快照，可以切换回滚</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 读取需要添加配置行数</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">line</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`../db/config.json`</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fileStr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">`../cloudFunction/vm2.js`</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">codeLines</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fileStr.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">  codeLines.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(line.requireLine, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">`const ${</span><span style="color:#24292E;">npmName</span><span style="color:#032F62;">} = require(&#39;${</span><span style="color:#24292E;">npmName</span><span style="color:#032F62;">}&#39;);`</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">  codeLines.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(line.dependLine, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">`${</span><span style="color:#24292E;">npmName</span><span style="color:#032F62;">},`</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">  fs.</span><span style="color:#6F42C1;">writeFileSync</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">`../cloudFunction/vm2.js`</span><span style="color:#24292E;">), codeLines.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&#39;utf8&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 修改源文件可编辑行数</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// line.requireLine += 1;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// line.dependLine += 1;</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`../db/config.json`</span><span style="color:#24292E;">, line);</span></span>\n<span class="line"><span style="color:#24292E;">  ctx.body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { code: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, msg: </span><span style="color:#032F62;">&#39;npm install sunccess&#39;</span><span style="color:#24292E;"> };</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>至此，我们实现了一个简易版的云函数；这里操作云函数服务都是通过node的子进程实现的，在高并发下其实是挺吃内存的，如果想在生产上应用，把云函数部署到docker容器中是比较好的选择；docker能够完全实现隔离，并且不受主应用服务内存影响，稳定性也会比较高；</p><h3 id="安全防护" tabindex="-1">安全防护 <a class="header-anchor" href="#安全防护" aria-label="Permalink to &quot;安全防护&quot;">​</a></h3><ol><li><strong>限制资源访问</strong>：使用 <strong>vm2</strong> 的 <strong>NodeVM</strong>时，可以配置选项来限制代码对系统资源的访问权限。通过设置 <strong>sandbox</strong> 选项，可以限制脚本对全局对象的访问，以及禁用对某些敏感模块的访问。例如：</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">NodeVM</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;vm2&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeVM</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  sandbox: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在沙箱中禁用全局对象访问</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console: </span><span style="color:#9ECBFF;">&#39;off&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    process: </span><span style="color:#9ECBFF;">&#39;off&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    timeout: </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//超时时间</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 限制对 fs 模块的访问</span></span>\n<span class="line"><span style="color:#E1E4E8;">    fs: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      readFileSync: </span><span style="color:#9ECBFF;">&#39;readonly&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 其他方法可设置为 &#39;off&#39;，禁止访问</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">NodeVM</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;vm2&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NodeVM</span><span style="color:#24292E;">({</span></span>\n<span class="line"><span style="color:#24292E;">  sandbox: {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在沙箱中禁用全局对象访问</span></span>\n<span class="line"><span style="color:#24292E;">    console: </span><span style="color:#032F62;">&#39;off&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    process: </span><span style="color:#032F62;">&#39;off&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    timeout: </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//超时时间</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 限制对 fs 模块的访问</span></span>\n<span class="line"><span style="color:#24292E;">    fs: {</span></span>\n<span class="line"><span style="color:#24292E;">      readFileSync: </span><span style="color:#032F62;">&#39;readonly&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 其他方法可设置为 &#39;off&#39;，禁止访问</span></span>\n<span class="line"><span style="color:#24292E;">    },</span></span>\n<span class="line"><span style="color:#24292E;">  },</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol start="2"><li><strong>隔离环境</strong>：使用 <strong>NodeVM</strong> 创建隔离的沙箱环境，以确保脚本的执行不会影响主应用程序。这可以通过创建多个独立的 <strong>NodeVM</strong> 实例来实现，每个实例都有自己的沙箱环境。</li><li><strong>限制运行时间</strong>：使用 <strong>timeout</strong> 选项来限制代码的运行时间，以防止无限循环或长时间运行的代码占用资源。</li><li><strong>白名单方法</strong>：只暴露给沙箱环境必要的方法和模块，通过白名单方式限制其它方法和模块的访问。</li><li><strong>监控和日志</strong>：在沙箱环境中设置事件监听器，以便监控代码的行为。同时，记录代码执行的日志和错误信息，以便检查和排除问题。</li><li><strong>定期审查代码</strong>：定期审查允许在沙箱中运行的代码，以确保其安全性和合规性。</li><li><strong>使用可信赖的库</strong>：避免在沙箱中使用不受信任或不安全的第三方库，尽可能使用受信任的库。</li></ol><h1 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h1>',70),b=e("p",null,"使用云函数模式开发有比较多的好处，每个云函数有独立的沙箱环境，与主程序隔离，灵活性大大提高，可拓展性也比较高，比如动态地添加、更新和删除云函数，而无需重新启动主应用程序。",-1);const m=s(E,[["render",function(s,e,c,r,t,E){const m=n("ArticleMetadata"),C=n("ClientOnly");return a(),l("div",null,[y,p(C,null,{default:o((()=>[p(m)])),_:1}),i,p(C,null,{default:o((()=>[p(m)])),_:1}),F,u,p(C,null,{default:o((()=>[p(m)])),_:1}),d,p(C,null,{default:o((()=>[p(m)])),_:1}),b])}]]);export{t as __pageData,m as default};
