import{_ as s,C as n,o as a,c as p,H as l,w as e,k as o,a as t,Q as r}from"./chunks/framework.e34e23c1.js";const c=JSON.parse('{"title":"Bun.js基础入门","description":"","frontmatter":{"layout":"Article","title":"Bun.js基础入门","date":"2023/10/10","tags":"Node,Bun,JavaScript","category":"技术专栏","preview":"https://cdn.geekbuluo.com/blog/20231010/b23f18.jpg","intro":"Bun是Node.js和Deno的竞争对手，是一个新的JavaScript运行时。在本文中，我们将介绍Bun 1.0，以及它可能让你尝试去使用的理由。"},"headers":[],"relativePath":"article/Bun.js基础入门.md","filePath":"全部文档/技术专栏/前端/Bun.js基础入门.md","lastUpdated":1696945268000}'),i={name:"article/Bun.js基础入门.md"},y=o("h1",{id:"bun-js基础入门",tabindex:"-1"},[t("Bun.js基础入门 "),o("a",{class:"header-anchor",href:"#bun-js基础入门","aria-label":'Permalink to "Bun.js基础入门"'},"​")],-1),d=r('<p>Bun是Node.js和Deno的竞争对手，是一个新的JavaScript运行时。在本文中，我们将介绍Bun 1.0，以及它可能让你尝试去使用的理由。</p><h2 id="历史-bun在node和deno中的位置" tabindex="-1">历史：Bun在Node和Deno中的位置 <a class="header-anchor" href="#历史-bun在node和deno中的位置" aria-label="Permalink to &quot;历史：Bun在Node和Deno中的位置&quot;">​</a></h2><p>Ryan Dahl于2009年发布了Node.js。虽然它不是第一个服务器端JavaScript运行时，但Node.js迅速崭露头角。<a href="https://www.sitepoint.com/node-js-20-new/" target="_blank" rel="noreferrer">2023年发布了第20版</a>，Node.js拥有最大的开发生态系统，拥有320万个模块，每周下载量接近5000亿次。</p><p>2020年，Ryan Dahl发布了<a href="https://www.sitepoint.com/learn-deno/" target="_blank" rel="noreferrer">Deno</a>，它是“noDe”的一种<em>混合体</em>，旨在现代化JavaScript开发并解决Node.js安全性、API兼容性、<a href="https://www.sitepoint.com/deno-built-in-tools/" target="_blank" rel="noreferrer">工具</a>和模块管理方面的传统问题。虽然Deno受到了积极的评价，但尚未挑战Node的主导地位。</p><p>2022年，Jarred Sumner发布了Bun，因为他在开发Next.js项目时对Node.js的速度感到不满。</p><p>Bun使用JavaScriptCore引擎，该引擎驱动WebKit浏览器，如Safari，而不是Node.js、Deno和Chrome中使用的V8引擎。</p><p>Bun运行时侧重于性能和开发人员体验。其目标是消除速度慢和复杂性，而不是放弃JavaScript的所有优点。</p><p>Bun可以比Node.js更快地发展，后者必须与现有的JavaScript和npm生态系统保持（基本）向后兼容。</p><p>与Deno一样，Bun对JavaScript和TypeScript本地支持，无需第三方转译器或配置。</p><p>Bun正在成为Node.js、Deno、无服务器运行时、构建和测试工具的即插即用替代品。它可以替代npm、npx、yarn、TypeScript编译器、dotenv、nodemon、pm2、Webpack、Babel和Jest，为在单一平台上开发应用程序提供了一个完整的多合一工具箱。</p><p>最初的运行时是稳定的，但多亏了<a href="https://github.com/oven-sh/bun/graphs/contributors" target="_blank" rel="noreferrer">近300名开发人员的贡献</a>，<a href="https://bun.sh/blog/bun-v1.0" target="_blank" rel="noreferrer">Bun版本1.0发布</a>于2023年9月发布。这将不可避免地诱使更多的开发人员迁移到Bun，他们可以享受下文描述的<a href="https://www.sitepoint.com/bun-javascript-runtime-introduction/#tastybunbenefits" target="_blank" rel="noreferrer">好处</a>。</p><h3 id="bun-这个名字有什么" tabindex="-1">“Bun”这个名字有什么 <a class="header-anchor" href="#bun-这个名字有什么" aria-label="Permalink to &quot;“Bun”这个名字有什么&quot;">​</a></h3><p>来历？“Bun”这个名字的起源不清楚，标志也没有帮助！它可能与食物、蓬松的兔子、“bundle”或者可能是一个简短、容易记住的名字有关，而且<a href="https://bun.sh/" target="_blank" rel="noreferrer">bun.sh</a>域名也可用。</p><p><img src="https://cdn.geekbuluo.com/blog/20231010/b23f18.jpg" alt=""></p><h2 id="美味的bun好处" tabindex="-1">美味的Bun好处 <a class="header-anchor" href="#美味的bun好处" aria-label="Permalink to &quot;美味的Bun好处&quot;">​</a></h2><p>Node.js和Deno使用Chrome的<a href="https://v8.dev/" target="_blank" rel="noreferrer">V8 JavaScript引擎</a>。Bun选择了<a href="https://github.com/WebKit/WebKit/tree/main/Source/JavaScriptCore" target="_blank" rel="noreferrer">JavaScriptCore引擎</a>，该引擎驱动WebKit浏览器，如Safari。Bun本身是用<a href="https://ziglang.org/" target="_blank" rel="noreferrer">Zig</a>编写的，这是一种具有手动内存管理和本机线程处理能力的低级编程语言。其结果是一个轻量级运行时，具有更小的内存占用、更快的启动时间，以及在某些（基准测试）条件下性能可以比Node.js和Deno快四倍。</p><p>与Deno一样，Bun对JavaScript和<a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">TypeScript</a>都有本机支持，无需第三方转译器或配置。它还支持<a href="https://bun.sh/docs/runtime/loaders#jsx" target="_blank" rel="noreferrer">.jsx和.tsx文件</a>，以将类似HTML的标记转换为本机JavaScript。还提供了运行<a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly编译的.wasm文件</a>的实验性支持。</p><p>在内部Bun使用<a href="https://www.sitepoint.com/understanding-es6-modules/" target="_blank" rel="noreferrer">ES模块</a>，支持顶级<code>await</code>，翻译CommonJS，并实现了Node的<code>node_modules</code>解析算法。Bun将模块缓存到<code>~/.bun/install/cache/</code>中，并使用硬链接将它们“复制”到项目的<code>node_modules</code>目录中。因此，您系统上的所有项目都将引用同一库的单个实例，这减少了磁盘空间需求并提高了安装性能。(请注意，macOS安装保留本地版本以提高速度。)</p><p>Bun支持Node的<code>package.json</code>，与<code>npm</code>等效命令，以及<a href="https://bun.sh/docs/cli/bunx" target="_blank" rel="noreferrer">bunx</a>，这是一个类似<code>npx</code>的选项，可以在单个命令中自动安装和运行包。例如：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">bunx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cowsay</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello, world!&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">bunx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cowsay</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello, world!&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>bun init</code>与<code>npm init</code>相同，用于创建空项目，但您还可以使用<code>bun create &lt;template&gt; &lt;destination&gt;</code>来<a href="https://bun.sh/docs/templates" target="_blank" rel="noreferrer">模板化新项目</a>，其中<code>&lt;template&gt;</code>是一个<a href="https://github.com/bun-community/create-templates" target="_blank" rel="noreferrer">官方包</a>、GitHub存储库或本地包。例如，要创建一个新的Next.js项目：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">next</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./myapp</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">next</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./myapp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Bun包含一个<a href="https://bun.sh/docs/cli/build" target="_blank" rel="noreferrer">bundler</a>，用于将所有依赖项导入单个文件，并且可以针对Bun、Node.js和客户端JavaScript。这减少了使用<a href="https://esbuild.github.io/" target="_blank" rel="noreferrer">esbuild</a>或<a href="https://www.sitepoint.com/rollup-javascript-bundler-introduction/" target="_blank" rel="noreferrer">Rollup</a>等工具的需求：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./index.ts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">—outdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./out</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./index.ts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">—outdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./out</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>大多数命令行界面选项都可以通过JavaScript API使用，因此可以创建复杂的构建脚本，而无需专门的任务运行器。以下是与上述命令相同的构建：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  entrypoints: [</span><span style="color:#9ECBFF;">&#39;./index.ts&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">  outdir: </span><span style="color:#9ECBFF;">&#39;./out&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">({</span></span>\n<span class="line"><span style="color:#24292E;">  entrypoints: [</span><span style="color:#032F62;">&#39;./index.ts&#39;</span><span style="color:#24292E;">],</span></span>\n<span class="line"><span style="color:#24292E;">  outdir: </span><span style="color:#032F62;">&#39;./out&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Bun具有标准的<a href="https://bun.sh/docs/cli/test" target="_blank" rel="noreferrer">测试运行器</a>，类似于<a href="https://www.sitepoint.com/deno-built-in-tools/#testrunner" target="_blank" rel="noreferrer">Deno</a>和<a href="https://www.sitepoint.com/node-js-20-new/#nativetestrunner" target="_blank" rel="noreferrer">Node.js 20</a>。运行<code>bun test</code>会执行如下命名的脚本：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">.test.{</span><span style="color:#B392F0;">js</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">jsx</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">ts</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">tsx}</span></span>\n<span class="line"><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">_test.{</span><span style="color:#B392F0;">js</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">jsx</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">ts</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">tsx}</span></span>\n<span class="line"><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">.spec.{</span><span style="color:#B392F0;">js</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">jsx</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">ts</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">tsx}</span></span>\n<span class="line"><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">_spec.{</span><span style="color:#B392F0;">js</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">jsx</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">ts</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">tsx}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">*</span><span style="color:#24292E;">.test.{</span><span style="color:#6F42C1;">js</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">jsx</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">ts</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">tsx}</span></span>\n<span class="line"><span style="color:#D73A49;">*</span><span style="color:#24292E;">_test.{</span><span style="color:#6F42C1;">js</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">jsx</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">ts</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">tsx}</span></span>\n<span class="line"><span style="color:#D73A49;">*</span><span style="color:#24292E;">.spec.{</span><span style="color:#6F42C1;">js</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">jsx</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">ts</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">tsx}</span></span>\n<span class="line"><span style="color:#D73A49;">*</span><span style="color:#24292E;">_spec.{</span><span style="color:#6F42C1;">js</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">jsx</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">ts</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">tsx}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>无需<a href="https://nodemon.io/" target="_blank" rel="noreferrer">nodemon</a>等工具，因为<code>bun</code>具有<code>--watch</code>标志，可在修改依赖文件时重新启动脚本或测试。重新启动速度如此之快，以至于可以在每次按键时进行实时重新加载。(是否实用而不会分散注意力是另一回事！)</p><p><em>实时重新加载不太美观！ (警告：内容闪烁！)</em> <a href="https://user-images.githubusercontent.com/709451/228439002-7b9fad11-0db2-4e48-b82d-2b88c8625625.gif" target="_blank" rel="noreferrer">查看原始动画GIF。</a></p><p>类似的<code>—hot</code>模式也可用，Bun会监视更改并重新加载模块。所有文件都将重新评估，但全局状态保持不变。</p><p>项目<code>.env</code>文件中包含的环境变量会自动加载和解析，使它们在Bun应用程序中可用，因此无需使用<a href="https://www.npmjs.com/package/dotenv" target="_blank" rel="noreferrer">dotenv</a>等包。</p><p>除了自己的<a href="https://bun.sh/docs/runtime/bun-apis" target="_blank" rel="noreferrer">Bun APIs</a>，用于网络、文件访问、子进程等方面，Bun还支持：</p><ul><li><a href="https://bun.sh/docs/runtime/web-apis" target="_blank" rel="noreferrer">Web API</a></li></ul><p>，例如<code>fetch</code>、<code>URL</code>、<code>blob</code>、<code>WebSocket</code>、<code>JSON</code>、<code>setTimeout</code>和事件。</p><ul><li><a href="https://bun.sh/docs/runtime/nodejs-apis" target="_blank" rel="noreferrer">Node.js兼容性API</a>，例如<code>console</code>、<code>assert</code>、<code>dns</code>、<code>http</code>、<code>path</code>、<code>stream</code>和<code>util</code>，以及全局变量，包括<code>__dirname</code>和<code>__filename</code>*。Bun声称已经完全实现了最常用API的90%，尽管您应该仔细检查与项目特定的API。</li></ul><p>最后，Bun具有本机的SQLite3客户端——<a href="https://bun.sh/docs/api/sqlite" target="_blank" rel="noreferrer">bun:sqlite</a>，这可以减少某些项目中所需的依赖项数量。</p><h2 id="安装-bun" tabindex="-1">安装 Bun <a class="header-anchor" href="#安装-bun" aria-label="Permalink to &quot;安装 Bun&quot;">​</a></h2><p>Bun 可以作为一个单一的二进制文件安装在 Linux、macOS 和 Windows WSL 上，使用 curl：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-fsSL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">https://bun.sh/instal</span><span style="color:#E1E4E8;">l</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-fsSL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">https://bun.sh/instal</span><span style="color:#24292E;">l</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>它也可以通过 Node 包管理器安装：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或者通过 macOS 上的 Brew 安装：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">brew</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tap</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">oven-sh/bun</span></span>\n<span class="line"><span style="color:#B392F0;">brew</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">brew</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tap</span><span style="color:#24292E;"> </span><span style="color:#032F62;">oven-sh/bun</span></span>\n<span class="line"><span style="color:#6F42C1;">brew</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>或者通过 Docker 安装：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pull</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">oven/bun</span></span>\n<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--ulimit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">memlock=</span><span style="color:#79B8FF;">-1</span><span style="color:#9ECBFF;">:-1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">oven/bun</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">oven/bun</span></span>\n<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--ulimit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">memlock=</span><span style="color:#005CC5;">-1</span><span style="color:#032F62;">:-1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">oven/bun</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>安装完成后，您可以使用以下命令升级 Bun：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">upgrade</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">upgrade</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>要卸载 Bun，只需删除 <code>~/.bun</code> 二进制文件和缓存目录：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.bun</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.bun</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后更新您的 shell 配置文件（<code>.bashrc</code>、<code>.zshrc</code> 或类似文件），以从 <code>$PATH</code> 变量中删除 <code>~/.bun/bin</code> 的引用。</p><h2 id="使用-bun" tabindex="-1">使用 Bun <a class="header-anchor" href="#使用-bun" aria-label="Permalink to &quot;使用 Bun&quot;">​</a></h2><p>如果您从项目的开始使用 Bun，它是可靠的。速度比 Node.js 更快，尽管除非您的应用程序执行特定的密集任务，如大量的 SQLite 处理或 WebSocket 消息传递，否则不太可能看到显著的性能提升。</p><p>对于较小、较简单的项目，Node.js 的兼容性很好，我成功地使用 <code>bun start</code> 启动了一些脚本，而没有进行任何更改。但对于更复杂的应用程序，可能会失败，并生成在 <code>node_modules</code> 层次结构深处生成的晦涩错误消息。</p><h2 id="bun-vs-deno-vs-node-js" tabindex="-1">Bun vs Deno vs Node.js <a class="header-anchor" href="#bun-vs-deno-vs-node-js" aria-label="Permalink to &quot;Bun vs Deno vs Node.js&quot;">​</a></h2><p>Deno解决了Node的许多缺点，但开发人员并不一定感到有必要切换：</p><ul><li>Deno不支持Node的第三方模块。</li><li>从Node.js迁移到Deno需要学习新的技术。</li><li>虽然Deno提供了更好的开发体验，但Node.js已经足够好用。</li></ul><p>现在，Deno已经添加了Node.js兼容选项。这是让开发人员转向Deno的最简单方法，但与此同时，Node.js也采用了Deno的一些功能，包括ES模块、本地测试运行程序和<code>--watch</code>模式。</p><p>Bun采取了不同的方法，旨在成为一个快速、与Node兼容的引擎，具有Deno的先进功能。迹象是令人鼓舞的，但还没有完全达到目标：</p><ul><li>性能很好，但很少有开发人员抱怨Node.js的速度。</li><li>兼容性很好，但在不同的JavaScript引擎中支持所有Node.js模块将是一项挑战。JavaScriptCore是否能够跟上V8的发展，而投入远远少于V8？</li><li>Bun有潜力替代您的工具套件，但尚未提供与Deno中找到的完整范围相匹配的功能。</li></ul><h2 id="bun-与-node-js-的兼容性" tabindex="-1">Bun 与 Node.js 的兼容性 <a class="header-anchor" href="#bun-与-node-js-的兼容性" aria-label="Permalink to &quot;Bun 与 Node.js 的兼容性&quot;">​</a></h2><p>对于较小、较简单的项目，与Node.js的兼容性通常很好。您可能可以启动一些脚本，而不需要进行任何更改，只需使用<code>bun start</code>代替<code>npm start</code>。</p><p>Bun支持：</p><ul><li>内置Node.js模块和API，如<code>fs</code>、<code>path</code>、<code>http</code>、<code>console</code>、<code>assert</code>等</li><li>全局变量和对象，如<code>__dirname</code>和<code>process</code></li><li>Node.js模块解析算法，以在<code>node_modules</code>中查找文件</li></ul><p>Bun 1.0 声称可以运行“几乎任何野外的Node.js应用程序”。我尚未完全相信；复杂的应用程序可能会由于在第三方模块中生成的晦涩错误消息而失败。</p><h2 id="es模块和commonjs兼容性" tabindex="-1">ES模块和CommonJS兼容性 <a class="header-anchor" href="#es模块和commonjs兼容性" aria-label="Permalink to &quot;ES模块和CommonJS兼容性&quot;">​</a></h2><p>Bun支持ESM和CommonJS两种模块系统，还支持顶级<code>await</code>。ESM在Node.js中花了几年时间才推出，生态系统仍然以CommonJS为主导。使用Bun，无需特定的文件扩展名（<code>.js</code>、<code>.cjs</code>、<code>.mjs</code>）或在<code>package.json</code>中的<code>&quot;type&quot;: &quot;module&quot;</code>。您可以在任何文件中交替使用<code>import</code>或<code>require()</code>！</p><p>在内部，Bun将所有模块都转换为CommonJS，并实现了Node的<code>node_modules</code>解析算法。是否如预期地工作是另一回事：</p><ul><li>ES6模块会在执行代码之前预先解析，以解析更多导入。动态导入是可能的，但应该只被视为最后的选择。</li><li>CommonJS模块在执行代码时按需加载依赖项。动态导入问题较少。</li></ul><p>在某些应用程序中，执行顺序可能至关重要，这也是Node.js限制您在单个文件中使用EMS或CommonJS的原因。</p><h2 id="web-api" tabindex="-1">Web API <a class="header-anchor" href="#web-api" aria-label="Permalink to &quot;Web API&quot;">​</a></h2><p>Bun具有内置对浏览器中可用的Web标准API的支持，例如<code>fetch</code>、<code>Request</code>、<code>Response</code>、<code>URL</code>、<code>blob</code>、<code>WebSocket</code>、<code>JSON</code>、<code>setTimeout</code>和<code>ReadableStream</code>。Deno将这些API引入其服务器运行时，使Web编码更加一致。Node.js正在赶上，但像<code>fetch</code>这样的功能最近才在18版中加入。</p><h2 id="bun-api" tabindex="-1">Bun API <a class="header-anchor" href="#bun-api" aria-label="Permalink to &quot;Bun API&quot;">​</a></h2><p>Bun附带了高度优化的用于常见操作的标准API，例如文件读取、文件写入、HTTP服务、SQLite查询和密码哈希。</p><p>WebSockets支持HTTP，无需第三方模块，例如<code>ws</code>：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.s</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">erve</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  port: </span><span style="color:#79B8FF;">8000</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Response</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello from the Bun server!&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  websocket: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ws</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">message</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ws</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ws</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reason</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.s</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;">erve</span><span style="color:#24292E;">({</span></span>\n<span class="line"><span style="color:#24292E;">  port: </span><span style="color:#005CC5;">8000</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">request</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Response</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello from the Bun server!&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">  },</span></span>\n<span class="line"><span style="color:#24292E;">  websocket: {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ws</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> },</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">message</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ws</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> },</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ws</span><span style="color:#24292E;">, </span><span style="color:#E36209;">code</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reason</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> },</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="typescript-和-jsx-支持" tabindex="-1">TypeScript 和 JSX 支持 <a class="header-anchor" href="#typescript-和-jsx-支持" aria-label="Permalink to &quot;TypeScript 和 JSX 支持&quot;">​</a></h2><p>与Deno一样，Bun在运行时内置了JavaScript转译器。您可以在不需要第三方依赖项的情况下运行JavaScript、TypeScript、JSX或TSX文件。例如：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index.ts</span></span>\n<span class="line"><span style="color:#B392F0;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index.jsx</span></span>\n<span class="line"><span style="color:#B392F0;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index.tsx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.ts</span></span>\n<span class="line"><span style="color:#6F42C1;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.jsx</span></span>\n<span class="line"><span style="color:#6F42C1;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.tsx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="包管理" tabindex="-1">包管理 <a class="header-anchor" href="#包管理" aria-label="Permalink to &quot;包管理&quot;">​</a></h2><p>您可以直接在任何Node.js项目中使用Bun作为<code>npm</code>的替代品。例如：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span></span>\n<span class="line"><span style="color:#B392F0;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">packag</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> [--dev</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--production</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--peer]</span></span>\n<span class="line"><span style="color:#B392F0;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">remove</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">packag</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span>\n<span class="line"><span style="color:#B392F0;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">update</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">packag</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span></span>\n<span class="line"><span style="color:#6F42C1;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">packag</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> [--dev</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">--production</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">--peer]</span></span>\n<span class="line"><span style="color:#6F42C1;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">remove</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">packag</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span>\n<span class="line"><span style="color:#6F42C1;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">update</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">packag</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Bun将模块缓存到<code>~/.bun/install/cache/</code>，并使用硬链接将它们复制到项目的<code>node_modules</code>目录中。因此，您系统上的所有项目都引用相同库的单个实例。这可以减少磁盘空间使用，并将安装性能提高多达30倍。</p><h2 id="实时重载" tabindex="-1">实时重载 <a class="header-anchor" href="#实时重载" aria-label="Permalink to &quot;实时重载&quot;">​</a></h2><p>无需像nodemon这样的工具，因为<code>bun</code>可执行文件具有<code>-watch</code>标志，可以在修改文件时重新启动脚本或测试。</p><p>还提供了类似的<code>--hot</code>模式，其中Bun会监视更改并进行软重载模块。所有文件都将重新评估，但全局状态保持不变。</p><h2 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h2><p>Bun提供了与Jest兼容的<code>bun:test</code>测试运行器，支持快照测试、模拟和代码覆盖。例如：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { test, expect } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:test&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2 + 2&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { test, expect } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:test&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;2 + 2&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>从Jest或Vitest迁移非常简单，因为来自<code>@jest/globals</code>或<code>vitest</code>的导入会在内部重新映射到<code>bun:test</code>。不应该需要进行代码更改。</p><p>运行<code>bun test</code>会执行以下命名的脚本：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">*.test.{js|jsx|ts|tsx}</span></span>\n<span class="line"><span style="color:#e1e4e8;">*_test.{js|jsx|ts|tsx}</span></span>\n<span class="line"><span style="color:#e1e4e8;">*.spec.{js|jsx|ts|tsx}</span></span>\n<span class="line"><span style="color:#e1e4e8;">*_spec.{js|jsx|ts|tsx}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">*.test.{js|jsx|ts|tsx}</span></span>\n<span class="line"><span style="color:#24292e;">*_test.{js|jsx|ts|tsx}</span></span>\n<span class="line"><span style="color:#24292e;">*.spec.{js|jsx|ts|tsx}</span></span>\n<span class="line"><span style="color:#24292e;">*_spec.{js|jsx|ts|tsx}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="脚本捆绑" tabindex="-1">脚本捆绑 <a class="header-anchor" href="#脚本捆绑" aria-label="Permalink to &quot;脚本捆绑&quot;">​</a></h2><p>Bun是一个JavaScript和TypeScript捆绑器和代码缩小工具，可以针对浏览器、Node.js和其他平台的代码进行目标定位。它受到esbuild的启发，并提供了一个兼容的插件API：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 简单的构建</span></span>\n<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  entrypoints: [</span><span style="color:#9ECBFF;">&#39;index.js&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">  outdir: </span><span style="color:#9ECBFF;">&#39;build&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 简单的构建</span></span>\n<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">({</span></span>\n<span class="line"><span style="color:#24292E;">  entrypoints: [</span><span style="color:#032F62;">&#39;index.js&#39;</span><span style="color:#24292E;">],</span></span>\n<span class="line"><span style="color:#24292E;">  outdir: </span><span style="color:#032F62;">&#39;build&#39;</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>基准测试显示，与Go编译的esbuild相比，Bun的性能可以快两倍，而且节省的缩小程度相似。</p><p>与esbuild不同，Bun不支持CSS捆绑，但考虑到有一个通用的插件API，这很可能会到来...</p><p>通用插件API</p><p>Bun的插件API是通用的：它适用于捆绑器和运行时。您可以定义插件以拦截导入并执行自定义加载逻辑。以下示例实现了对<code>.yaml</code>文件的导入：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { plugin } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&#39;YAML&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">build</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">load</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;js-yaml&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">readFileSync</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    build.</span><span style="color:#B392F0;">onLoad</span><span style="color:#E1E4E8;">({ filter:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">.</span><span style="color:#DBEDFF;">(yaml</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">yml)</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> }, (</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(args.path, </span><span style="color:#9ECBFF;">&#39;utf8&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(text) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { exports, loader: </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;"> };</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { plugin } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;">plugin</span><span style="color:#24292E;">({</span></span>\n<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;YAML&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">(</span><span style="color:#E36209;">build</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">load</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;js-yaml&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">readFileSync</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    build.</span><span style="color:#6F42C1;">onLoad</span><span style="color:#24292E;">({ filter:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\\\</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">(yaml</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">yml)</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;"> }, (</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">text</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(args.path, </span><span style="color:#032F62;">&#39;utf8&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(text) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Record</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt;;</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { exports, loader: </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;"> };</span></span>\n<span class="line"><span style="color:#24292E;">    });</span></span>\n<span class="line"><span style="color:#24292E;">  },</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="启动和执行速度" tabindex="-1">启动和执行速度 <a class="header-anchor" href="#启动和执行速度" aria-label="Permalink to &quot;启动和执行速度&quot;">​</a></h2><p>与<code>npm run &lt;script&gt;</code>相比，使用<code>bun run &lt;script&gt;</code>通常会快150毫秒启动应用程序。这可能是一个小的改进，但是比Node.js快4倍，当您运行许多命令和构建脚本时会非常明显。当使用TypeScript时，性能改进将更为显著，因为没有编译步骤。</p><p>Bun还提供以下关于Node.js性能的声称：</p><ul><li>比<code>npx</code>快5倍</li><li>文件读取速度快10倍（使用<code>Bun.read()</code>）</li><li>文件写入速度快3倍（使用<code>Bun.write()</code>）</li><li>提供HTTP请求时，速度快4倍（使用<code>Bun.serve()</code>）</li><li>SQLite查询速度快4倍（使用<code>bun:sqlite</code>）</li><li>在测试时比Jest快13倍</li><li>在测试时比Vitest快8倍</li></ul><p>对于捆绑，Bun是：</p><ul><li>几乎比esbuild快两倍</li><li>比Parcel 2快150倍</li><li>比使用Terser的Rollup快180倍</li><li>比Webpack快220倍</li></ul><p>您不太可能在每个项目中都看到这样的提升，但Bun应该能够改善您的开发体验</p><h2 id="实验性-windows-版本" tabindex="-1">实验性 Windows 版本 <a class="header-anchor" href="#实验性-windows-版本" aria-label="Permalink to &quot;实验性 Windows 版本&quot;">​</a></h2><p>Bun 的本机构建将很快提供给 Windows 用户。这是一个高度实验性的版本，仅支持 JavaScript 运行时，没有性能优化。像包管理器、测试运行器和捆绑器等功能都已禁用，直到它们变得稳定为止。</p><p>目前，Windows 用户可以在<a href="https://www.sitepoint.com/wsl2/" target="_blank" rel="noreferrer">Windows 子系统 Linux（WSL）</a> 上安装 Bun，这仍然是进行任何重型 JavaScript 工作的最佳选择。</p><h2 id="总结-您应该尝试使用-bun-吗" tabindex="-1">总结：您应该尝试使用 Bun 吗？ <a class="header-anchor" href="#总结-您应该尝试使用-bun-吗" aria-label="Permalink to &quot;总结：您应该尝试使用 Bun 吗？&quot;">​</a></h2><p>Bun 是一个成熟的 JavaScript 运行时，但对于关键任务或传统应用程序，Node.js 仍然是首选。您可以尝试使用 <code>bun start</code> 运行您的应用程序，但是代码库越大，执行而无需修改的机会就越小。</p><p>对于新项目来说，Deno 可能比 Bun 更好，因为它更加成熟且功能更完整。</p><p>Bun 很棒，而且正在积极开发，但它是新的。运行时是稳定的，但在这个阶段，很少有人会押注它的长期未来。尽管如此，Bun 提出了一些有趣的想法，我希望 Node.js 和 Deno 团队都会考虑采纳（CLI API 和自动加载的 <code>.env</code> 请注意！）</p><p><em>另外，我喜欢 Bun 的名称，但在搜索资源时可能会有些困难。ChatGPT 大胆地声明：“没有一个被广泛知晓的名为 &#39;Bun&#39; 的 JavaScript 运行时。据我所知，JavaScript 生态系统中没有这样的技术。”这可能是因为后续数据有限，尽管某些问题会返回 Bun 的响应并对错误表示道歉！</em></p><p>我怀疑我们正走向一个同构的服务器端 JavaScript 时代，在这个时代，模块开发人员试图编写与所有运行时兼容的代码：Node.js、Deno、Bun、无服务器、边缘、嵌入式等等。我们最终可能会达到一个 JavaScript 运行时基本上可以互换使用的程度，就像今天的浏览器一样。</p><p>Bun 版本 1.0 里程碑在技术上可能没有太多意义，鉴于与 0.8 版本相比的<a href="https://bun.sh/blog/bun-v1.0#changelog-since-v0-8" target="_blank" rel="noreferrer">微小更改</a>。但心理上的差异更大：Bun <em>感觉上</em> 更完整、更可用。更多开发人员将考虑将其用于自己的项目的运行时和工具集。</p><p>Deno 最初走了自己（不错的）方向，但不得不后退。对于许多 Node.js 开发人员来说，它过于激进和不兼容。在项目中从 Node.js 切换到 Deno 仍然不是一件您应该考虑而不接受后果的事情。</p><p>Bun 从一开始就提供了兼容性和速度，这在使用不同的 JavaScript 引擎的情况下是一项重大成就。它是否能够实现接近 100% 的 Node.js 兼容性还有待观察，但您可以考虑将其用于传统项目中工具集的一部分。</p><p>Bun 的性能声称令人印象深刻，但很少有人抱怨原始 Node.js 的性能，特别是当它在每个版本中都有所提高时。一些框架可能较慢，但这通常是由于膨胀而不是运行时的固有故障。</p><p>目前，Node.js 仍然是无可争议的 JavaScript 冠军。选择 Node.js 的人很少会因此而被解雇，但 Bun 避免了一些 Deno 的错误，并迅速成为一个吸引人的选择。</p><blockquote><p>翻译原文：<a href="https://www.sitepoint.com/bun-javascript-runtime-introduction/" target="_blank" rel="noreferrer">https://www.sitepoint.com/bun-javascript-runtime-introduction/</a></p></blockquote>',122);const E=s(i,[["render",function(s,o,t,r,c,i){const E=n("ArticleMetadata"),u=n("ClientOnly");return a(),p("div",null,[y,l(u,null,{default:e((()=>[l(E)])),_:1}),d])}]]);export{c as __pageData,E as default};
